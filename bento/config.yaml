input:
  websocket:
    - name: avax-c
      url: ${AVAX_C_WEBSOCKET_URL}
      open_message: '{
        "jsonrpc":"2.0",
        "method":"eth_subscribe",
        "params":["newPendingTransactions"],
        "id":1
      }'
    - name: avax-p
      url: ${AVAX_P_WEBSOCKET_URL}
      open_message: '{
        "jsonrpc":"2.0",
        "method":"platform.getBlockchainStatus",
        "params":[],
        "id":1
      }'

pipeline:
  processors:
    - mapping: |
        root = this
        root.timestamp = timestamp_unix()
        root.transaction_hash = content()
        root.blockchain_symbol = websocket_name()  # avax-c or avax-p

    - http:
        url: https://api.snowtrace.io/api/v1/transaction/${! json("transaction_hash") }
        verb: GET
        headers:
          apikey: ${SNOWTRACE_API_KEY}
        rate_limit: "5/s"
        successful_on: [200]
        
    - python:
        path: ./processors/alert_processor.py
        class: AlertProcessor
        init:
          redis_url: ${REDIS_URL}
        method: process_transaction
        
    - log:
        level: INFO
        message: "Processing transaction: ${!json(\"transaction_hash\")}"

    - catch:
        - error:
            - log:
                level: ERROR
                message: "Failed to process transaction: ${!error()}"

output:
  broker:
    pattern: fan_out
    outputs:
      - redis_list:
          url: ${REDIS_URL}
          key: raw_transactions
          max_length: 1000
      
      - aws_s3:
          bucket: ${MINIO_BUCKET}
          endpoint: ${MINIO_URL}
          credentials:
            id: ${MINIO_ACCESS_KEY}
            secret: ${MINIO_SECRET_KEY}
          region: us-east-1
          path: "raw_transactions/${!timestamp_unix()}_${!uuid_v4()}.json"
          force_path_style_urls: true
