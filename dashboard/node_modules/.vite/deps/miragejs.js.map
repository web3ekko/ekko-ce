{
  "version": 3,
  "sources": ["../../lodash/uniq.js", "../../lodash/lowerFirst.js", "../../lodash/cloneDeep.js", "../../lodash/_baseInvoke.js", "../../lodash/invokeMap.js", "../../lodash/compact.js", "../../lodash/_baseHas.js", "../../lodash/has.js", "../../lodash/_baseValues.js", "../../lodash/values.js", "../../lodash/_castFunction.js", "../../lodash/forIn.js", "../../lodash/_baseSet.js", "../../lodash/_basePickBy.js", "../../lodash/_basePick.js", "../../lodash/pick.js", "../../lodash/_createAssigner.js", "../../lodash/assign.js", "../../lodash/isInteger.js", "../../inflected/dist/esm/inflected.js", "../../@miragejs/pretender-node-polyfill/before.js", "../../route-recognizer/dist/route-recognizer/util.ts", "../../route-recognizer/dist/route-recognizer/dsl.ts", "../../route-recognizer/dist/route-recognizer/normalizer.ts", "../../route-recognizer/dist/route-recognizer.ts", "../../fake-xml-http-request/src/fake-xml-http-request.js", "../../pretender/dist/pretender.es.js", "../../@miragejs/pretender-node-polyfill/after.js", "../../miragejs/lib/utils/reference-sort.js", "../../miragejs/lib/factory.js", "../../miragejs/lib/identity-manager.js", "../../miragejs/lib/association.js", "../../miragejs/lib/trait.js", "../../miragejs/lib/response.js", "../../miragejs/lib/utils/inflector.js", "../../miragejs/lib/utils/is-association.js", "../../miragejs/lib/assert.js", "../../miragejs/lib/orm/associations/association.js", "../../miragejs/lib/orm/associations/belongs-to.js", "../../miragejs/lib/db-collection.js", "../../miragejs/lib/db.js", "../../miragejs/lib/orm/collection.js", "../../miragejs/lib/orm/polymorphic-collection.js", "../../miragejs/lib/orm/associations/has-many.js", "../../miragejs/lib/route-handlers/base.js", "../../miragejs/lib/route-handlers/function.js", "../../miragejs/lib/route-handlers/object.js", "../../miragejs/lib/route-handlers/shorthands/base.js", "../../miragejs/lib/route-handlers/shorthands/get.js", "../../miragejs/lib/route-handlers/shorthands/post.js", "../../miragejs/lib/route-handlers/shorthands/put.js", "../../miragejs/lib/route-handlers/shorthands/delete.js", "../../miragejs/lib/route-handlers/shorthands/head.js", "../../miragejs/lib/route-handler.js", "../../miragejs/lib/utils/extend.js", "../../miragejs/lib/orm/model.js", "../../miragejs/lib/serializer.js", "../../miragejs/lib/serializers/json-api-serializer.js", "../../miragejs/lib/serializer-registry.js", "../../miragejs/lib/orm/schema.js", "../../miragejs/lib/container.js", "../../miragejs/lib/mock-server/pretender-config.js", "../../miragejs/lib/server.js", "../../miragejs/lib/serializers/active-model-serializer.js", "../../miragejs/lib/serializers/rest-serializer.js", "../../miragejs/lib/utils/uuid.js", "../../miragejs/lib/index.js"],
  "sourcesContent": ["var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n", "var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to lower case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.lowerFirst('Fred');\n * // => 'fred'\n *\n * _.lowerFirst('FRED');\n * // => 'fRED'\n */\nvar lowerFirst = createCaseFirst('toLowerCase');\n\nmodule.exports = lowerFirst;\n", "var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n", "var apply = require('./_apply'),\n    castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.invoke` without support for individual\n * method arguments.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the method to invoke.\n * @param {Array} args The arguments to invoke the method with.\n * @returns {*} Returns the result of the invoked method.\n */\nfunction baseInvoke(object, path, args) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  var func = object == null ? object : object[toKey(last(path))];\n  return func == null ? undefined : apply(func, object, args);\n}\n\nmodule.exports = baseInvoke;\n", "var apply = require('./_apply'),\n    baseEach = require('./_baseEach'),\n    baseInvoke = require('./_baseInvoke'),\n    baseRest = require('./_baseRest'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Invokes the method at `path` of each element in `collection`, returning\n * an array of the results of each invoked method. Any additional arguments\n * are provided to each invoked method. If `path` is a function, it's invoked\n * for, and `this` bound to, each element in `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|string} path The path of the method to invoke or\n *  the function invoked per iteration.\n * @param {...*} [args] The arguments to invoke each method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * _.invokeMap([123, 456], String.prototype.split, '');\n * // => [['1', '2', '3'], ['4', '5', '6']]\n */\nvar invokeMap = baseRest(function(collection, path, args) {\n  var index = -1,\n      isFunc = typeof path == 'function',\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value) {\n    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n  });\n  return result;\n});\n\nmodule.exports = invokeMap;\n", "/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = compact;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nmodule.exports = baseHas;\n", "var baseHas = require('./_baseHas'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n", "var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n", "var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n", "var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n", "var baseFor = require('./_baseFor'),\n    castFunction = require('./_castFunction'),\n    keysIn = require('./keysIn');\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nmodule.exports = forIn;\n", "var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n", "var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n", "var basePickBy = require('./_basePickBy'),\n    hasIn = require('./hasIn');\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nmodule.exports = basePick;\n", "var basePick = require('./_basePick'),\n    flatRest = require('./_flatRest');\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n", "var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n", "var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n", "var toInteger = require('./toInteger');\n\n/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on\n * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n * @example\n *\n * _.isInteger(3);\n * // => true\n *\n * _.isInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isInteger(Infinity);\n * // => false\n *\n * _.isInteger('3');\n * // => false\n */\nfunction isInteger(value) {\n  return typeof value == 'number' && value == toInteger(value);\n}\n\nmodule.exports = isInteger;\n", "var toString = Object.prototype.toString;\n\nfunction isFunc(obj) {\n  return toString.call(obj) === \"[object Function]\";\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction icPart(str) {\n  return str.split(\"\").map(function (c) {\n    return \"(?:\" + c.toUpperCase() + \"|\" + c.toLowerCase() + \")\";\n  }).join(\"\");\n}\n\nfunction remove(arr, elem) {\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === elem) {\n      Array.prototype.splice.call(arr, i, 1);\n    }\n  }\n}\n\nfunction hasProp(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nvar instances = {};\n\nvar Inflector = function () {\n  createClass(Inflector, null, [{\n    key: \"getInstance\",\n    value: function getInstance(locale) {\n      instances[locale] = instances[locale] || new Inflector();\n      return instances[locale];\n    }\n  }]);\n\n  function Inflector() {\n    classCallCheck(this, Inflector);\n\n    this.plurals = [];\n    this.singulars = [];\n    this.uncountables = [];\n    this.humans = [];\n    this.acronyms = {};\n    this.acronymRegex = /(?=a)b/;\n  }\n\n  createClass(Inflector, [{\n    key: \"acronym\",\n    value: function acronym(word) {\n      this.acronyms[word.toLowerCase()] = word;\n\n      var values = [];\n\n      for (var key in this.acronyms) {\n        if (hasProp(this.acronyms, key)) {\n          values.push(this.acronyms[key]);\n        }\n      }\n\n      this.acronymRegex = new RegExp(values.join(\"|\"));\n    }\n  }, {\n    key: \"plural\",\n    value: function plural(rule, replacement) {\n      if (typeof rule === \"string\") {\n        remove(this.uncountables, rule);\n      }\n\n      remove(this.uncountables, replacement);\n      this.plurals.unshift([rule, replacement]);\n    }\n  }, {\n    key: \"singular\",\n    value: function singular(rule, replacement) {\n      if (typeof rule === \"string\") {\n        remove(this.uncountables, rule);\n      }\n\n      remove(this.uncountables, replacement);\n      this.singulars.unshift([rule, replacement]);\n    }\n  }, {\n    key: \"irregular\",\n    value: function irregular(singular, plural) {\n      remove(this.uncountables, singular);\n      remove(this.uncountables, plural);\n\n      var s0 = singular[0];\n      var sRest = singular.substr(1);\n\n      var p0 = plural[0];\n      var pRest = plural.substr(1);\n\n      if (s0.toUpperCase() === p0.toUpperCase()) {\n        this.plural(new RegExp(\"(\" + s0 + \")\" + sRest + \"$\", \"i\"), \"$1\" + pRest);\n        this.plural(new RegExp(\"(\" + p0 + \")\" + pRest + \"$\", \"i\"), \"$1\" + pRest);\n\n        this.singular(new RegExp(\"(\" + s0 + \")\" + sRest + \"$\", \"i\"), \"$1\" + sRest);\n        this.singular(new RegExp(\"(\" + p0 + \")\" + pRest + \"$\", \"i\"), \"$1\" + sRest);\n      } else {\n        var sRestIC = icPart(sRest);\n        var pRestIC = icPart(pRest);\n\n        this.plural(new RegExp(s0.toUpperCase() + sRestIC + \"$\"), p0.toUpperCase() + pRest);\n        this.plural(new RegExp(s0.toLowerCase() + sRestIC + \"$\"), p0.toLowerCase() + pRest);\n        this.plural(new RegExp(p0.toUpperCase() + pRestIC + \"$\"), p0.toUpperCase() + pRest);\n        this.plural(new RegExp(p0.toLowerCase() + pRestIC + \"$\"), p0.toLowerCase() + pRest);\n\n        this.singular(new RegExp(s0.toUpperCase() + sRestIC + \"$\"), s0.toUpperCase() + sRest);\n        this.singular(new RegExp(s0.toLowerCase() + sRestIC + \"$\"), s0.toLowerCase() + sRest);\n        this.singular(new RegExp(p0.toUpperCase() + pRestIC + \"$\"), s0.toUpperCase() + sRest);\n        this.singular(new RegExp(p0.toLowerCase() + pRestIC + \"$\"), s0.toLowerCase() + sRest);\n      }\n    }\n  }, {\n    key: \"uncountable\",\n    value: function uncountable() {\n      for (var _len = arguments.length, words = Array(_len), _key = 0; _key < _len; _key++) {\n        words[_key] = arguments[_key];\n      }\n\n      this.uncountables = this.uncountables.concat(words);\n    }\n  }, {\n    key: \"human\",\n    value: function human(rule, replacement) {\n      this.humans.unshift([rule, replacement]);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"all\";\n\n      if (scope === \"all\") {\n        this.plurals = [];\n        this.singulars = [];\n        this.uncountables = [];\n        this.humans = [];\n      } else {\n        this[scope] = [];\n      }\n    }\n  }]);\n  return Inflector;\n}();\n\nfunction en(inflector) {\n  inflector.plural(/$/, \"s\");\n  inflector.plural(/s$/i, \"s\");\n  inflector.plural(/^(ax|test)is$/i, \"$1es\");\n  inflector.plural(/(octop|vir)us$/i, \"$1i\");\n  inflector.plural(/(octop|vir)i$/i, \"$1i\");\n  inflector.plural(/(alias|status)$/i, \"$1es\");\n  inflector.plural(/(bu)s$/i, \"$1ses\");\n  inflector.plural(/(buffal|tomat)o$/i, \"$1oes\");\n  inflector.plural(/([ti])um$/i, \"$1a\");\n  inflector.plural(/([ti])a$/i, \"$1a\");\n  inflector.plural(/sis$/i, \"ses\");\n  inflector.plural(/(?:([^f])fe|([lr])f)$/i, \"$1$2ves\");\n  inflector.plural(/(hive)$/i, \"$1s\");\n  inflector.plural(/([^aeiouy]|qu)y$/i, \"$1ies\");\n  inflector.plural(/(x|ch|ss|sh)$/i, \"$1es\");\n  inflector.plural(/(matr|vert|ind)(?:ix|ex)$/i, \"$1ices\");\n  inflector.plural(/^(m|l)ouse$/i, \"$1ice\");\n  inflector.plural(/^(m|l)ice$/i, \"$1ice\");\n  inflector.plural(/^(ox)$/i, \"$1en\");\n  inflector.plural(/^(oxen)$/i, \"$1\");\n  inflector.plural(/(quiz)$/i, \"$1zes\");\n\n  inflector.singular(/s$/i, \"\");\n  inflector.singular(/(ss)$/i, \"$1\");\n  inflector.singular(/(n)ews$/i, \"$1ews\");\n  inflector.singular(/([ti])a$/i, \"$1um\");\n  inflector.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, \"$1sis\");\n  inflector.singular(/(^analy)(sis|ses)$/i, \"$1sis\");\n  inflector.singular(/([^f])ves$/i, \"$1fe\");\n  inflector.singular(/(hive)s$/i, \"$1\");\n  inflector.singular(/(tive)s$/i, \"$1\");\n  inflector.singular(/([lr])ves$/i, \"$1f\");\n  inflector.singular(/([^aeiouy]|qu)ies$/i, \"$1y\");\n  inflector.singular(/(s)eries$/i, \"$1eries\");\n  inflector.singular(/(m)ovies$/i, \"$1ovie\");\n  inflector.singular(/(x|ch|ss|sh)es$/i, \"$1\");\n  inflector.singular(/^(m|l)ice$/i, \"$1ouse\");\n  inflector.singular(/(bus)(es)?$/i, \"$1\");\n  inflector.singular(/(o)es$/i, \"$1\");\n  inflector.singular(/(shoe)s$/i, \"$1\");\n  inflector.singular(/(cris|test)(is|es)$/i, \"$1is\");\n  inflector.singular(/^(a)x[ie]s$/i, \"$1xis\");\n  inflector.singular(/(octop|vir)(us|i)$/i, \"$1us\");\n  inflector.singular(/(alias|status)(es)?$/i, \"$1\");\n  inflector.singular(/^(ox)en/i, \"$1\");\n  inflector.singular(/(vert|ind)ices$/i, \"$1ex\");\n  inflector.singular(/(matr)ices$/i, \"$1ix\");\n  inflector.singular(/(quiz)zes$/i, \"$1\");\n  inflector.singular(/(database)s$/i, \"$1\");\n\n  inflector.irregular(\"person\", \"people\");\n  inflector.irregular(\"man\", \"men\");\n  inflector.irregular(\"child\", \"children\");\n  inflector.irregular(\"sex\", \"sexes\");\n  inflector.irregular(\"move\", \"moves\");\n  inflector.irregular(\"zombie\", \"zombies\");\n\n  inflector.uncountable(\"equipment\", \"information\", \"rice\", \"money\", \"species\", \"series\", \"fish\", \"sheep\", \"jeans\", \"police\");\n}\n\nvar defaults$1 = {\n  en: en\n};\n\nfunction inflections(locale, fn) {\n  if (isFunc(locale)) {\n    fn = locale;\n    locale = null;\n  }\n\n  locale = locale || \"en\";\n\n  if (fn) {\n    fn(Inflector.getInstance(locale));\n  } else {\n    return Inflector.getInstance(locale);\n  }\n}\n\nfor (var locale in defaults$1) {\n  inflections(locale, defaults$1[locale]);\n}\n\nfunction applyInflections(word, rules) {\n  var result = \"\" + word,\n      rule,\n      regex,\n      replacement;\n\n  if (result.length === 0) {\n    return result;\n  } else {\n    var match = result.toLowerCase().match(/\\b\\w+$/);\n\n    if (match && inflections().uncountables.indexOf(match[0]) > -1) {\n      return result;\n    } else {\n      for (var i = 0, ii = rules.length; i < ii; i++) {\n        rule = rules[i];\n\n        regex = rule[0];\n        replacement = rule[1];\n\n        if (result.match(regex)) {\n          result = result.replace(regex, replacement);\n          break;\n        }\n      }\n\n      return result;\n    }\n  }\n}\n\nfunction pluralize(word) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en\";\n\n  return applyInflections(word, inflections(locale).plurals);\n}\n\nfunction singularize(word) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en\";\n\n  return applyInflections(word, inflections(locale).singulars);\n}\n\nfunction capitalize(str) {\n  var result = str === null || str === undefined ? \"\" : String(str);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nfunction camelize(term, uppercaseFirstLetter) {\n  if (uppercaseFirstLetter === null || uppercaseFirstLetter === undefined) {\n    uppercaseFirstLetter = true;\n  }\n\n  var result = \"\" + term;\n\n  if (uppercaseFirstLetter) {\n    result = result.replace(/^[a-z\\d]*/, function (a) {\n      return inflections().acronyms[a] || capitalize(a);\n    });\n  } else {\n    result = result.replace(new RegExp(\"^(?:\" + inflections().acronymRegex.source + \"(?=\\\\b|[A-Z_])|\\\\w)\"), function (a) {\n      return a.toLowerCase();\n    });\n  }\n\n  result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, function (match, a, b, idx, string) {\n    a || (a = \"\");\n    return \"\" + a + (inflections().acronyms[b] || capitalize(b));\n  });\n\n  return result;\n}\n\nfunction underscore(camelCasedWord) {\n  var result = \"\" + camelCasedWord;\n\n  result = result.replace(new RegExp(\"(?:([A-Za-z\\\\d])|^)(\" + inflections().acronymRegex.source + \")(?=\\\\b|[^a-z])\", \"g\"), function (match, $1, $2) {\n    return \"\" + ($1 || \"\") + ($1 ? \"_\" : \"\") + $2.toLowerCase();\n  });\n\n  result = result.replace(/([A-Z\\d]+)([A-Z][a-z])/g, \"$1_$2\");\n  result = result.replace(/([a-z\\d])([A-Z])/g, \"$1_$2\");\n  result = result.replace(/-/g, \"_\");\n\n  return result.toLowerCase();\n}\n\nfunction humanize(lowerCaseAndUnderscoredWord, options) {\n  var result = \"\" + lowerCaseAndUnderscoredWord;\n  var humans = inflections().humans;\n  var human = void 0,\n      rule = void 0,\n      replacement = void 0;\n\n  options = options || {};\n\n  if (options.capitalize === null || options.capitalize === undefined) {\n    options.capitalize = true;\n  }\n\n  for (var i = 0, ii = humans.length; i < ii; i++) {\n    human = humans[i];\n    rule = human[0];\n    replacement = human[1];\n\n    if (rule.test && rule.test(result) || result.indexOf(rule) > -1) {\n      result = result.replace(rule, replacement);\n      break;\n    }\n  }\n\n  result = result.replace(/_id$/, \"\");\n  result = result.replace(/_/g, \" \");\n\n  result = result.replace(/([a-z\\d]*)/gi, function (match) {\n    return inflections().acronyms[match] || match.toLowerCase();\n  });\n\n  if (options.capitalize) {\n    result = result.replace(/^\\w/, function (match) {\n      return match.toUpperCase();\n    });\n  }\n\n  return result;\n}\n\nfunction titleize(word) {\n  return humanize(underscore(word)).replace(/(^|[\\s¿/]+)([a-z])/g, function (match, boundary, letter, idx, string) {\n    return match.replace(letter, letter.toUpperCase());\n  });\n}\n\nfunction tableize(className) {\n  return pluralize(underscore(className));\n}\n\nfunction classify(tableName) {\n  return camelize(singularize(tableName.replace(/.*\\./g, \"\")));\n}\n\nfunction dasherize(underscoredWord) {\n  return underscoredWord.replace(/_/g, \"-\");\n}\n\nfunction foreignKey(className) {\n  var separateWithUnderscore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  return \"\" + underscore(className) + (separateWithUnderscore ? \"_id\" : \"id\");\n}\n\nfunction ordinal(number) {\n  var absNumber = Math.abs(Number(number));\n  var mod100 = absNumber % 100;\n\n  if (mod100 === 11 || mod100 === 12 || mod100 === 13) {\n    return \"th\";\n  } else {\n    switch (absNumber % 10) {\n      case 1:\n        return \"st\";\n      case 2:\n        return \"nd\";\n      case 3:\n        return \"rd\";\n      default:\n        return \"th\";\n    }\n  }\n}\n\nfunction ordinalize(number) {\n  return \"\" + number + ordinal(number);\n}\n\n// prettier-ignore\nvar DEFAULT_APPROXIMATIONS = {\n  'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE',\n  'Ç': 'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I',\n  'Î': 'I', 'Ï': 'I', 'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O',\n  'Õ': 'O', 'Ö': 'O', '×': 'x', 'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U',\n  'Ü': 'U', 'Ý': 'Y', 'Þ': 'Th', 'ß': 'ss', 'à': 'a', 'á': 'a', 'â': 'a',\n  'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c', 'è': 'e', 'é': 'e',\n  'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i', 'ð': 'd',\n  'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ø': 'o',\n  'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ý': 'y', 'þ': 'th', 'ÿ': 'y',\n  'Ā': 'A', 'ā': 'a', 'Ă': 'A', 'ă': 'a', 'Ą': 'A', 'ą': 'a', 'Ć': 'C',\n  'ć': 'c', 'Ĉ': 'C', 'ĉ': 'c', 'Ċ': 'C', 'ċ': 'c', 'Č': 'C', 'č': 'c',\n  'Ď': 'D', 'ď': 'd', 'Đ': 'D', 'đ': 'd', 'Ē': 'E', 'ē': 'e', 'Ĕ': 'E',\n  'ĕ': 'e', 'Ė': 'E', 'ė': 'e', 'Ę': 'E', 'ę': 'e', 'Ě': 'E', 'ě': 'e',\n  'Ĝ': 'G', 'ĝ': 'g', 'Ğ': 'G', 'ğ': 'g', 'Ġ': 'G', 'ġ': 'g', 'Ģ': 'G',\n  'ģ': 'g', 'Ĥ': 'H', 'ĥ': 'h', 'Ħ': 'H', 'ħ': 'h', 'Ĩ': 'I', 'ĩ': 'i',\n  'Ī': 'I', 'ī': 'i', 'Ĭ': 'I', 'ĭ': 'i', 'Į': 'I', 'į': 'i', 'İ': 'I',\n  'ı': 'i', 'Ĳ': 'IJ', 'ĳ': 'ij', 'Ĵ': 'J', 'ĵ': 'j', 'Ķ': 'K', 'ķ': 'k',\n  'ĸ': 'k', 'Ĺ': 'L', 'ĺ': 'l', 'Ļ': 'L', 'ļ': 'l', 'Ľ': 'L', 'ľ': 'l',\n  'Ŀ': 'L', 'ŀ': 'l', 'Ł': 'L', 'ł': 'l', 'Ń': 'N', 'ń': 'n', 'Ņ': 'N',\n  'ņ': 'n', 'Ň': 'N', 'ň': 'n', 'ŉ': '\\'n', 'Ŋ': 'NG', 'ŋ': 'ng',\n  'Ō': 'O', 'ō': 'o', 'Ŏ': 'O', 'ŏ': 'o', 'Ő': 'O', 'ő': 'o', 'Œ': 'OE',\n  'œ': 'oe', 'Ŕ': 'R', 'ŕ': 'r', 'Ŗ': 'R', 'ŗ': 'r', 'Ř': 'R', 'ř': 'r',\n  'Ś': 'S', 'ś': 's', 'Ŝ': 'S', 'ŝ': 's', 'Ş': 'S', 'ş': 's', 'Š': 'S',\n  'š': 's', 'Ţ': 'T', 'ţ': 't', 'Ť': 'T', 'ť': 't', 'Ŧ': 'T', 'ŧ': 't',\n  'Ũ': 'U', 'ũ': 'u', 'Ū': 'U', 'ū': 'u', 'Ŭ': 'U', 'ŭ': 'u', 'Ů': 'U',\n  'ů': 'u', 'Ű': 'U', 'ű': 'u', 'Ų': 'U', 'ų': 'u', 'Ŵ': 'W', 'ŵ': 'w',\n  'Ŷ': 'Y', 'ŷ': 'y', 'Ÿ': 'Y', 'Ź': 'Z', 'ź': 'z', 'Ż': 'Z', 'ż': 'z',\n  'Ž': 'Z', 'ž': 'z',\n  'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'E',\n  'Ж': 'ZH', 'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M',\n  'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',\n  'Ф': 'F', 'Х': 'KH', 'Ц': 'C', 'Ч': 'CH', 'Ш': 'SH', 'Щ': 'SHCH',\n  'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'YU', 'Я': 'YA',\n  'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'e',\n  'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm',\n  'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',\n  'ф': 'f', 'х': 'kh', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch',\n  'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'\n};\n\nvar DEFAULT_REPLACEMENT_CHAR = \"?\";\n\nvar instances$1 = {};\n\nvar Transliterator = function () {\n  createClass(Transliterator, null, [{\n    key: 'getInstance',\n    value: function getInstance(locale) {\n      instances$1[locale] = instances$1[locale] || new Transliterator();\n      return instances$1[locale];\n    }\n  }]);\n\n  function Transliterator() {\n    classCallCheck(this, Transliterator);\n\n    this.approximations = {};\n\n    for (var char in DEFAULT_APPROXIMATIONS) {\n      this.approximate(char, DEFAULT_APPROXIMATIONS[char]);\n    }\n  }\n\n  createClass(Transliterator, [{\n    key: 'approximate',\n    value: function approximate(char, replacement) {\n      this.approximations[char] = replacement;\n    }\n  }, {\n    key: 'transliterate',\n    value: function transliterate(string, replacement) {\n      var _this = this;\n\n      return string.replace(/[^\\u0000-\\u007f]/g, function (c) {\n        return _this.approximations[c] || replacement || DEFAULT_REPLACEMENT_CHAR;\n      });\n    }\n  }]);\n  return Transliterator;\n}();\n\nfunction transliterations(locale, fn) {\n  if (isFunc(locale)) {\n    fn = locale;\n    locale = null;\n  }\n\n  locale = locale || \"en\";\n\n  if (fn) {\n    fn(Transliterator.getInstance(locale));\n  } else {\n    return Transliterator.getInstance(locale);\n  }\n}\n\nfunction transliterate(string) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var locale = options.locale || \"en\";\n  var replacement = options.replacement || \"?\";\n\n  return transliterations(locale).transliterate(string, replacement);\n}\n\nfunction parameterize(string) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (options.separator === undefined) {\n    options.separator = \"-\";\n  }\n\n  if (options.separator === null) {\n    options.separator = \"\";\n  }\n\n  // replace accented chars with their ascii equivalents\n  var result = transliterate(string, options);\n\n  result = result.replace(/[^a-z0-9\\-_]+/ig, options.separator);\n\n  if (options.separator.length) {\n    var separatorRegex = new RegExp(options.separator);\n\n    // no more than one of the separator in a row\n    result = result.replace(new RegExp(separatorRegex.source + \"{2,}\"), options.separator);\n\n    // remove leading/trailing separator\n    result = result.replace(new RegExp(\"^\" + separatorRegex.source + \"|\" + separatorRegex.source + \"$\", \"i\"), \"\");\n  }\n\n  if (options.preserveCase) {\n    return result;\n  }\n\n  return result.toLowerCase();\n}\n\nfunction constantify(word) {\n  return underscore(word).toUpperCase().replace(/\\s+/g, \"_\");\n}\n\nexport { pluralize, singularize, camelize, underscore, humanize, titleize, tableize, classify, dasherize, foreignKey, ordinal, ordinalize, transliterate, parameterize, capitalize, inflections, transliterations, constantify };\n", "if (typeof global !== \"undefined\" && typeof global.self === 'undefined') {\n  global.self = {};\n  global.__pretenderNodePolyfill = true;\n}\n", "const createObject = Object.create;\nexport function createMap<T>() {\n  const map: { [key: string]: T | undefined } = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n", "import { createMap } from \"./util\";\n\nexport interface Delegate {\n  contextEntered?(context: string, route: MatchDSL): void;\n  willAddRoute?(context: string | undefined, route: string): string;\n}\n\nexport type Opaque = {} | void | null | undefined;\n\nexport interface Route {\n  path: string;\n  handler: Opaque;\n  queryParams?: string[];\n}\n\nexport interface RouteRecognizer {\n  delegate: Delegate | undefined;\n  add(routes: Route[]): void;\n}\n\nexport interface MatchCallback {\n  (match: MatchDSL): void;\n}\n\nexport interface MatchDSL {\n  (path: string): ToDSL;\n  (path: string, callback: MatchCallback): void;\n}\n\nexport interface ToDSL {\n  to(name: string, callback?: MatchCallback): void;\n}\n\nclass Target implements ToDSL {\n  path: string;\n  matcher: Matcher;\n  delegate: Delegate | undefined;\n\n  constructor(path: string, matcher: Matcher, delegate: Delegate | undefined) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  to(target: string, callback: MatchCallback) {\n    let delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n  }\n}\n\nexport class Matcher {\n  routes: {\n    [path: string]: string | undefined;\n  };\n  children: {\n    [path: string]: Matcher | undefined;\n  };\n  target: string | undefined;\n\n  constructor(target?: string) {\n    this.routes = createMap<string>();\n    this.children = createMap<Matcher>();\n    this.target = target;\n  }\n\n  add(path: string, target: string) {\n    this.routes[path] = target;\n  }\n\n  addChild(path: string, target: string, callback: MatchCallback, delegate: Delegate | undefined) {\n    let matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    let match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath: string, matcher: Matcher, delegate: Delegate | undefined): MatchDSL {\n  function match(path: string): ToDSL;\n  function match(path: string, callback: MatchCallback): void;\n  function match(path: string, callback?: MatchCallback): ToDSL | void {\n    let fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  };\n  return match;\n}\n\nfunction addRoute(routeArray: Route[], path: string, handler: any) {\n  let len = 0;\n  for (let i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  let route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute<T>(baseRoute: Route[], matcher: Matcher, callback: (this: T, routes: Route[]) => void, binding: T) {\n  let routes = matcher.routes;\n  let paths = Object.keys(routes);\n  for (let i = 0; i < paths.length; i++) {\n    let path = paths[i];\n    let routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    let nested = matcher.children[path];\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nexport default function <T extends RouteRecognizer>(this: T, callback: MatchCallback, addRouteCallback?: (routeRecognizer: T, routes: Route[]) => void) {\n  let matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(routes: Route[]) {\n    if (addRouteCallback) { addRouteCallback(this, routes); }\n    else { this.add(routes); }\n  }, this);\n}\n", "// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path: string): string {\n  return path.split(\"/\")\n             .map(normalizeSegment)\n             .join(\"/\");\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nconst SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment: string) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) return segment;\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nconst PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nexport function encodePathSegment(str: string) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n", "import { createMap } from \"./route-recognizer/util\";\nimport map, { Delegate, Route, Opaque, MatchCallback } from \"./route-recognizer/dsl\";\nimport { normalizePath, normalizeSegment, encodePathSegment } from \"./route-recognizer/normalizer\";\nexport { Delegate, MatchCallback } from './route-recognizer/dsl';\n\nconst enum CHARS {\n  ANY = -1,\n  STAR = 42,\n  SLASH = 47,\n  COLON = 58\n}\n\nconst escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\n\nconst isArray = Array.isArray;\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params: Params | null | undefined, key: string): string {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\nconst enum SegmentType {\n  Static  = 0,\n  Dynamic = 1,\n  Star    = 2,\n  Epsilon = 4\n}\n\nconst enum SegmentFlags {\n  Static  = 2 << SegmentType.Static,\n  Dynamic = 2 << SegmentType.Dynamic,\n  Star    = 2 << SegmentType.Star,\n  Epsilon = 2 << SegmentType.Epsilon,\n  Named = Dynamic | Star,\n  Decoded = Dynamic,\n  Counted = Static | Dynamic | Star\n}\n\nconst eachChar: ((segment: Segment, currentState: State) => State)[] = [];\neachChar[SegmentType.Static] = function (segment: Segment, currentState: State) {\n  let state = currentState;\n  let value = segment.value;\n  for (let i = 0; i < value.length; i++) {\n    let ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n  return state;\n};\neachChar[SegmentType.Dynamic] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.SLASH, true, true);\n};\neachChar[SegmentType.Star] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.ANY, false, true);\n};\neachChar[SegmentType.Epsilon] = function (_: Segment, currentState: State) {\n  return currentState;\n};\n\nconst regex: ((segment: Segment) => string)[] = [];\nregex[SegmentType.Static] = function (segment: Segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[SegmentType.Dynamic] = function () {\n  return \"([^/]+)\";\n};\nregex[SegmentType.Star] = function () {\n  return \"(.+)\";\n};\nregex[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\nconst generate: ((segment: Segment, params?: Params | null) => string)[] = [];\ngenerate[SegmentType.Static] = function (segment: Segment) {\n  return segment.value;\n};\ngenerate[SegmentType.Dynamic] = function (segment: Segment, params?: Params) {\n  let value = getParam(params, segment.value);\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\ngenerate[SegmentType.Star] = function (segment: Segment, params?: Params) {\n  return getParam(params, segment.value);\n};\ngenerate[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\ninterface Segment {\n  type: SegmentType;\n  value: string;\n}\n\nexport interface Params {\n  [key: string]: Opaque;\n  [key: number]: Opaque;\n  queryParams?: QueryParams | null;\n}\n\ninterface PopulatedParsedHandlers {\n  names: string[];\n  shouldDecodes: any[];\n}\n\nconst EmptyObject = Object.freeze({});\ntype EmptyObject = Readonly<{}>\n\nconst EmptyArray = Object.freeze([]) as ReadonlyArray<any>;\ntype EmptyArray = ReadonlyArray<any>;\n\ninterface EmptyParsedHandlers {\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ntype ParsedHandler = PopulatedParsedHandlers | EmptyParsedHandlers;\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments: Segment[], route: string, types: [number, number, number]) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === CHARS.SLASH) { route = route.substr(1); }\n\n  let parts = route.split(\"/\");\n  let names: void | string[] = undefined;\n  let shouldDecodes: void | any[] = undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    let part = parts[i];\n    let flags: SegmentFlags = 0;\n    let type: SegmentType = 0;\n\n    if (part === \"\") {\n      type = SegmentType.Epsilon;\n    } else if (part.charCodeAt(0) === CHARS.COLON) {\n      type = SegmentType.Dynamic;\n    } else if (part.charCodeAt(0) === CHARS.STAR) {\n      type = SegmentType.Star;\n    }  else {\n      type = SegmentType.Static;\n    }\n\n    flags = 2 << type;\n\n    if (flags & SegmentFlags.Named) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & SegmentFlags.Decoded) !== 0);\n    }\n\n    if (flags & SegmentFlags.Counted) {\n      types[type]++;\n    }\n\n    segments.push({\n      type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray,\n  } as ParsedHandler;\n}\n\nfunction isEqualCharSpec(spec: CharSpec, char: number, negate: boolean) {\n  return spec.char === char && spec.negate === negate;\n}\n\ninterface EmptyHandler {\n  handler: Opaque;\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ninterface PopulatedHandler {\n  handler: Opaque;\n  names: string [];\n  shouldDecodes: boolean[];\n}\n\ntype Handler = EmptyHandler | PopulatedHandler;\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nclass State implements CharSpec {\n  states: State[];\n  id: number;\n  negate: boolean;\n  char: number;\n  nextStates: number[] | number | null;\n  pattern: string;\n  _regex: RegExp | undefined;\n  handlers: Handler[] | undefined;\n  types: [number, number, number] | undefined;\n\n  constructor(states: State[], id: number, char: number, negate: boolean, repeat: boolean) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n  }\n\n  regex(): RegExp {\n    if (!this._regex) {\n      this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n  }\n\n  get(char: number, negate: boolean): State | void {\n    let nextStates = this.nextStates;\n    if (nextStates === null) return;\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n        if (isEqualCharSpec(child, char, negate)) {\n          return child;\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  }\n\n  put(char: number, negate: boolean, repeat: boolean) {\n    let state: State | void;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) { return state; }\n\n    // Make a new state for the character spec\n    let states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n      this.nextStates = state.id;\n    } else if (isArray(this.nextStates)) {\n      this.nextStates.push(state.id);\n    } else {\n      this.nextStates = [this.nextStates, state.id];\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch: number): State[] {\n    let nextStates = this.nextStates;\n    if (!nextStates) return [];\n\n    let returned: State[] = [];\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n\n        if (isMatch(child, ch)) {\n          returned.push(child);\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n    return returned;\n  }\n}\n\nfunction isMatch(spec: CharSpec, char: number) {\n  return spec.negate ? spec.char !== char && spec.char !== CHARS.ANY : spec.char === char || spec.char === CHARS.ANY;\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states: State[]) {\n  return states.sort(function(a, b) {\n    let [ astatics, adynamics, astars ] = a.types || [0, 0, 0];\n    let [ bstatics, bdynamics, bstars ] = b.types || [0, 0, 0];\n    if (astars !== bstars) { return astars - bstars; }\n\n    if (astars) {\n      if (astatics !== bstatics) { return bstatics - astatics; }\n      if (adynamics !== bdynamics) { return bdynamics - adynamics; }\n    }\n\n    if (adynamics !== bdynamics) { return adynamics - bdynamics; }\n    if (astatics !== bstatics) { return bstatics - astatics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states: State[], ch: number) {\n  let nextStates: State[] = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\n\nexport interface QueryParams {\n  [param: string]: any[] | any | null | undefined;\n}\n\nexport interface Result {\n  handler: Opaque;\n  params: Params;\n  isDynamic: boolean;\n}\n\nexport interface Results extends ArrayLike<Result | undefined> {\n  queryParams: QueryParams;\n  slice(start?: number, end?: number): Result[];\n  splice(start: number, deleteCount: number, ...items: Result[]): Result[];\n  push(...results: Result[]): number;\n}\n\nclass RecognizeResults implements Results {\n  queryParams: QueryParams;\n  length = 0;\n  [index: number]: Result | undefined;\n  splice: (start: number, deleteCount: number, ...items: Result[]) => Result[];\n  slice: (start?: number, end?: number) => Result[];\n  push: (...results: Result[]) => number;\n\n  constructor(queryParams?: QueryParams) {\n    this.queryParams = queryParams || {};\n  }\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice =  Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state: State, originalPath: string, queryParams: QueryParams): Results {\n  let handlers = state.handlers;\n  let regex: RegExp = state.regex();\n  if (!regex || !handlers) throw new Error(\"state not initialized\");\n  let captures: RegExpMatchArray | null = originalPath.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (let i = 0; i < handlers.length; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let shouldDecodes = handler.shouldDecodes;\n    let params: EmptyObject | Params = EmptyObject;\n\n    let isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (let j = 0; j < names.length; j++) {\n        isDynamic = true;\n        let name = names[j];\n        let capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          (<Params>params)[name] = capture && decodeURIComponent(capture);\n        } else {\n          (<Params>params)[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params,\n      isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part: string): string {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  let result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {result = \"\"; }\n  return result;\n}\n\ninterface NamedRoute {\n  segments: Segment[];\n  handlers: Handler[];\n}\n\nclass RouteRecognizer {\n  private states: State[];\n  private rootState: State;\n  private names: {\n    [name: string]: NamedRoute | undefined;\n  } = createMap<NamedRoute>();\n  map: (context: MatchCallback, addCallback?: (router: this, routes: Route[]) => void) => void;\n  delegate: Delegate | undefined;\n\n  constructor() {\n    let states: State[] = [];\n    let state = new State(states, 0, CHARS.ANY, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n  }\n\n  static VERSION = \"0.3.4\";\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  add(routes: Route[], options?: { as: string }) {\n    let currentState = this.rootState;\n    let pattern = \"^\";\n    let types: [number, number, number] = [0, 0, 0];\n    let handlers: Handler[] = new Array(routes.length);\n    let allSegments: Segment[] = [];\n\n    let isEmpty = true;\n    let j = 0;\n    for (let i = 0; i < routes.length; i++) {\n      let route = routes[i];\n      let { names, shouldDecodes } = parse(allSegments, route.path, types);\n\n      // preserve j so it points to the start of newly added segments\n      for (; j < allSegments.length; j++) {\n        let segment = allSegments[j];\n\n        if (segment.type === SegmentType.Epsilon) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put(CHARS.SLASH, false, false);\n        pattern += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = eachChar[segment.type](segment, currentState);\n        pattern += regex[segment.type](segment);\n      }\n      handlers[i] = {\n        handler: route.handler,\n        names,\n        shouldDecodes\n      };\n    }\n\n    if (isEmpty) {\n        currentState = currentState.put(CHARS.SLASH, false, false);\n      pattern += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n\n    let name: string | undefined;\n    if (typeof options === \"object\" && options !== null && options.as) {\n      name = options.as;\n    }\n\n    if (name) {\n      // if (this.names[name]) {\n      //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n      // }\n\n      this.names[name] = {\n        segments: allSegments,\n        handlers\n      };\n    }\n  }\n\n  handlersFor(name: string) {\n    let route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let result = new Array(route.handlers.length);\n\n    for (let i = 0; i < route.handlers.length; i++) {\n      let handler = route.handlers[i];\n      result[i] = handler;\n    }\n\n    return result;\n  }\n\n  hasRoute(name: string) {\n    return !!this.names[name];\n  }\n\n  generate(name: string, params?: Params | null) {\n    let route = this.names[name];\n    let output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let segments: Segment[] = route.segments;\n\n    for (let i = 0; i < segments.length; i++) {\n      let segment: Segment = segments[i];\n\n      if (segment.type === SegmentType.Epsilon) {\n        continue;\n      }\n\n      output += \"/\";\n      output += generate[segment.type](segment, params);\n    }\n\n    if (output.charAt(0) !== \"/\") { output = \"/\" + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params: QueryParams) {\n    let pairs: string[] = [];\n    let keys: string[] = Object.keys(params);\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = params[key];\n      if (value == null) {\n        continue;\n      }\n      let pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (let j = 0; j < value.length; j++) {\n          let arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return \"\"; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString: string): QueryParams {\n    let pairs = queryString.split(\"&\");\n    let queryParams: QueryParams = {};\n    for (let i = 0; i < pairs.length; i++) {\n      let pair      = pairs[i].split(\"=\"),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = \"true\";\n      } else {\n        // Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n      }\n      if (isArray) {\n        (<string[]>queryParams[key]).push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path: string): Results | undefined {\n    let results: Results | undefined;\n    let states: State[] = [ this.rootState ];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    let queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n      let queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    let originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    let pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0; i < path.length; i++) {\n      states = recognizeChar(states, path.charCodeAt(i));\n      if (!states.length) { break; }\n    }\n\n    let solutions: State[] = [];\n    for (let i = 0; i < states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n        originalPath = originalPath + \"/\";\n      }\n      results = findHandler(state, originalPath, queryParams);\n    }\n\n    return results;\n  }\n}\n\nRouteRecognizer.prototype.map = map;\n\nexport default RouteRecognizer;\n\ninterface CharSpec {\n  negate: boolean;\n  char: number;\n}\n", "/**\n * Minimal Event interface implementation\n *\n * Original implementation by Sven Fuchs: https://gist.github.com/995028\n * Modifications and tests by Christian Johansen.\n *\n * @author Sven Fuchs (svenfuchs@artweb-design.de)\n * @author Christian Johansen (christian@cjohansen.no)\n * @license BSD\n *\n * Copyright (c) 2011 Sven Fuchs, Christian Johansen\n */\n\nvar _Event = function Event(type, bubbles, cancelable, target) {\n  this.type = type;\n  this.bubbles = bubbles;\n  this.cancelable = cancelable;\n  this.target = target;\n};\n\n_Event.prototype = {\n  stopPropagation: function () {},\n  preventDefault: function () {\n    this.defaultPrevented = true;\n  }\n};\n\n/*\n  Used to set the statusText property of an xhr object\n*/\nvar httpStatusCodes = {\n  100: \"Continue\",\n  101: \"Switching Protocols\",\n  200: \"OK\",\n  201: \"Created\",\n  202: \"Accepted\",\n  203: \"Non-Authoritative Information\",\n  204: \"No Content\",\n  205: \"Reset Content\",\n  206: \"Partial Content\",\n  300: \"Multiple Choice\",\n  301: \"Moved Permanently\",\n  302: \"Found\",\n  303: \"See Other\",\n  304: \"Not Modified\",\n  305: \"Use Proxy\",\n  307: \"Temporary Redirect\",\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  402: \"Payment Required\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  405: \"Method Not Allowed\",\n  406: \"Not Acceptable\",\n  407: \"Proxy Authentication Required\",\n  408: \"Request Timeout\",\n  409: \"Conflict\",\n  410: \"Gone\",\n  411: \"Length Required\",\n  412: \"Precondition Failed\",\n  413: \"Request Entity Too Large\",\n  414: \"Request-URI Too Long\",\n  415: \"Unsupported Media Type\",\n  416: \"Requested Range Not Satisfiable\",\n  417: \"Expectation Failed\",\n  422: \"Unprocessable Entity\",\n  500: \"Internal Server Error\",\n  501: \"Not Implemented\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n  504: \"Gateway Timeout\",\n  505: \"HTTP Version Not Supported\"\n};\n\n\n/*\n  Cross-browser XML parsing. Used to turn\n  XML responses into Document objects\n  Borrowed from JSpec\n*/\nfunction parseXML(text) {\n  var xmlDoc;\n\n  if (typeof DOMParser != \"undefined\") {\n    var parser = new DOMParser();\n    xmlDoc = parser.parseFromString(text, \"text/xml\");\n  } else {\n    xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n    xmlDoc.async = \"false\";\n    xmlDoc.loadXML(text);\n  }\n\n  return xmlDoc;\n}\n\n/*\n  Without mocking, the native XMLHttpRequest object will throw\n  an error when attempting to set these headers. We match this behavior.\n*/\nvar unsafeHeaders = {\n  \"Accept-Charset\": true,\n  \"Accept-Encoding\": true,\n  \"Connection\": true,\n  \"Content-Length\": true,\n  \"Cookie\": true,\n  \"Cookie2\": true,\n  \"Content-Transfer-Encoding\": true,\n  \"Date\": true,\n  \"Expect\": true,\n  \"Host\": true,\n  \"Keep-Alive\": true,\n  \"Referer\": true,\n  \"TE\": true,\n  \"Trailer\": true,\n  \"Transfer-Encoding\": true,\n  \"Upgrade\": true,\n  \"User-Agent\": true,\n  \"Via\": true\n};\n\n/*\n  Adds an \"event\" onto the fake xhr object\n  that just calls the same-named method. This is\n  in case a library adds callbacks for these events.\n*/\nfunction _addEventListener(eventName, xhr){\n  xhr.addEventListener(eventName, function (event) {\n    var listener = xhr[\"on\" + eventName];\n\n    if (listener && typeof listener == \"function\") {\n      listener.call(event.target, event);\n    }\n  });\n}\n\nfunction EventedObject() {\n  this._eventListeners = {};\n  var events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"loadend\"];\n  for (var i = events.length - 1; i >= 0; i--) {\n    _addEventListener(events[i], this);\n  }\n};\n\nEventedObject.prototype = {\n  /*\n    Duplicates the behavior of native XMLHttpRequest's addEventListener function\n  */\n  addEventListener: function addEventListener(event, listener) {\n    this._eventListeners[event] = this._eventListeners[event] || [];\n    this._eventListeners[event].push(listener);\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's removeEventListener function\n  */\n  removeEventListener: function removeEventListener(event, listener) {\n    var listeners = this._eventListeners[event] || [];\n\n    for (var i = 0, l = listeners.length; i < l; ++i) {\n      if (listeners[i] == listener) {\n        return listeners.splice(i, 1);\n      }\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's dispatchEvent function\n  */\n  dispatchEvent: function dispatchEvent(event) {\n    var type = event.type;\n    var listeners = this._eventListeners[type] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (typeof listeners[i] == \"function\") {\n        listeners[i].call(this, event);\n      } else {\n        listeners[i].handleEvent(event);\n      }\n    }\n\n    return !!event.defaultPrevented;\n  },\n\n  /*\n    Triggers an `onprogress` event with the given parameters.\n  */\n  _progress: function _progress(lengthComputable, loaded, total) {\n    var event = new _Event('progress');\n    event.target = this;\n    event.lengthComputable = lengthComputable;\n    event.loaded = loaded;\n    event.total = total;\n    this.dispatchEvent(event);\n  }\n}\n\n/*\n  Constructor for a fake window.XMLHttpRequest\n*/\nfunction FakeXMLHttpRequest() {\n  EventedObject.call(this);\n  this.readyState = FakeXMLHttpRequest.UNSENT;\n  this.requestHeaders = {};\n  this.requestBody = null;\n  this.status = 0;\n  this.statusText = \"\";\n  this.upload = new EventedObject();\n  this.onabort= null;\n  this.onerror= null;\n  this.onload= null;\n  this.onloadend= null;\n  this.onloadstart= null;\n  this.onprogress= null;\n  this.onreadystatechange= null;\n  this.ontimeout= null;\n}\n\nFakeXMLHttpRequest.prototype = new EventedObject();\n\n// These status codes are available on the native XMLHttpRequest\n// object, so we match that here in case a library is relying on them.\nFakeXMLHttpRequest.UNSENT = 0;\nFakeXMLHttpRequest.OPENED = 1;\nFakeXMLHttpRequest.HEADERS_RECEIVED = 2;\nFakeXMLHttpRequest.LOADING = 3;\nFakeXMLHttpRequest.DONE = 4;\n\nvar FakeXMLHttpRequestProto = {\n  UNSENT: 0,\n  OPENED: 1,\n  HEADERS_RECEIVED: 2,\n  LOADING: 3,\n  DONE: 4,\n  async: true,\n  withCredentials: false,\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's open function\n  */\n  open: function open(method, url, async, username, password) {\n    this.method = method;\n    this.url = url;\n    this.async = typeof async == \"boolean\" ? async : true;\n    this.username = username;\n    this.password = password;\n    this.responseText = null;\n    this.response = this.responseText;\n    this.responseXML = null;\n    this.responseURL = url;\n    this.requestHeaders = {};\n    this.sendFlag = false;\n    this._readyStateChange(FakeXMLHttpRequest.OPENED);\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's setRequestHeader function\n  */\n  setRequestHeader: function setRequestHeader(header, value) {\n    verifyState(this);\n\n    if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {\n      throw new Error(\"Refused to set unsafe header \\\"\" + header + \"\\\"\");\n    }\n\n    if (this.requestHeaders[header]) {\n      this.requestHeaders[header] += \",\" + value;\n    } else {\n      this.requestHeaders[header] = value;\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's send function\n  */\n  send: function send(data) {\n    verifyState(this);\n\n    if (!/^(get|head)$/i.test(this.method)) {\n      var hasContentTypeHeader = false\n\n      Object.keys(this.requestHeaders).forEach(function (key) {\n        if (key.toLowerCase() === 'content-type') {\n          hasContentTypeHeader = true;\n        }\n      });\n\n      if (!hasContentTypeHeader && !(data || '').toString().match('FormData')) {\n        this.requestHeaders[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n\n      this.requestBody = data;\n    }\n\n    this.errorFlag = false;\n    this.sendFlag = this.async;\n    this._readyStateChange(FakeXMLHttpRequest.OPENED);\n\n    if (typeof this.onSend == \"function\") {\n      this.onSend(this);\n    }\n\n    this.dispatchEvent(new _Event(\"loadstart\", false, false, this));\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's abort function\n  */\n  abort: function abort() {\n    this.aborted = true;\n    this.responseText = null;\n    this.response = this.responseText;\n    this.errorFlag = true;\n    this.requestHeaders = {};\n\n    this.dispatchEvent(new _Event(\"abort\", false, false, this));\n\n    if (this.readyState > FakeXMLHttpRequest.UNSENT && this.sendFlag) {\n      this._readyStateChange(FakeXMLHttpRequest.UNSENT);\n      this.sendFlag = false;\n    }\n\n    if (typeof this.onerror === \"function\") {\n      this.onerror();\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's getResponseHeader function\n  */\n  getResponseHeader: function getResponseHeader(header) {\n    if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {\n      return null;\n    }\n\n    if (/^Set-Cookie2?$/i.test(header)) {\n      return null;\n    }\n\n    header = header.toLowerCase();\n\n    for (var h in this.responseHeaders) {\n      if (h.toLowerCase() == header) {\n        return this.responseHeaders[h];\n      }\n    }\n\n    return null;\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's getAllResponseHeaders function\n  */\n  getAllResponseHeaders: function getAllResponseHeaders() {\n    if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {\n      return \"\";\n    }\n\n    var headers = \"\";\n\n    for (var header in this.responseHeaders) {\n      if (this.responseHeaders.hasOwnProperty(header) && !/^Set-Cookie2?$/i.test(header)) {\n        headers += header + \": \" + this.responseHeaders[header] + \"\\r\\n\";\n      }\n    }\n\n    return headers;\n  },\n\n  /*\n   Duplicates the behavior of native XMLHttpRequest's overrideMimeType function\n   */\n  overrideMimeType: function overrideMimeType(mimeType) {\n    if (typeof mimeType === \"string\") {\n      this.forceMimeType = mimeType.toLowerCase();\n    }\n  },\n\n\n  /*\n    Places a FakeXMLHttpRequest object into the passed\n    state.\n  */\n  _readyStateChange: function _readyStateChange(state) {\n    this.readyState = state;\n\n    if (typeof this.onreadystatechange == \"function\") {\n      this.onreadystatechange(new _Event(\"readystatechange\"));\n    }\n\n    this.dispatchEvent(new _Event(\"readystatechange\"));\n\n    if (this.readyState == FakeXMLHttpRequest.DONE) {\n      this.dispatchEvent(new _Event(\"load\", false, false, this));\n    }\n    if (this.readyState == FakeXMLHttpRequest.UNSENT || this.readyState == FakeXMLHttpRequest.DONE) {\n      this.dispatchEvent(new _Event(\"loadend\", false, false, this));\n    }\n  },\n\n\n  /*\n    Sets the FakeXMLHttpRequest object's response headers and\n    places the object into readyState 2\n  */\n  _setResponseHeaders: function _setResponseHeaders(headers) {\n    this.responseHeaders = {};\n\n    for (var header in headers) {\n      if (headers.hasOwnProperty(header)) {\n          this.responseHeaders[header] = headers[header];\n      }\n    }\n\n    if (this.forceMimeType) {\n      this.responseHeaders['Content-Type'] = this.forceMimeType;\n    }\n\n    if (this.async) {\n      this._readyStateChange(FakeXMLHttpRequest.HEADERS_RECEIVED);\n    } else {\n      this.readyState = FakeXMLHttpRequest.HEADERS_RECEIVED;\n    }\n  },\n\n  /*\n    Sets the FakeXMLHttpRequest object's response body and\n    if body text is XML, sets responseXML to parsed document\n    object\n  */\n  _setResponseBody: function _setResponseBody(body) {\n    verifyRequestSent(this);\n    verifyHeadersReceived(this);\n    verifyResponseBodyType(body);\n\n    var chunkSize = this.chunkSize || 10;\n    var index = 0;\n    this.responseText = \"\";\n    this.response = this.responseText;\n\n    do {\n      if (this.async) {\n        this._readyStateChange(FakeXMLHttpRequest.LOADING);\n      }\n\n      this.responseText += body.substring(index, index + chunkSize);\n      this.response = this.responseText;\n      index += chunkSize;\n    } while (index < body.length);\n\n    var type = this.getResponseHeader(\"Content-Type\");\n\n    if (this.responseText && (!type || /(text\\/xml)|(application\\/xml)|(\\+xml)/.test(type))) {\n      try {\n        this.responseXML = parseXML(this.responseText);\n      } catch (e) {\n        // Unable to parse XML - no biggie\n      }\n    }\n\n    if (this.async) {\n      this._readyStateChange(FakeXMLHttpRequest.DONE);\n    } else {\n      this.readyState = FakeXMLHttpRequest.DONE;\n    }\n  },\n\n  /*\n    Forces a response on to the FakeXMLHttpRequest object.\n\n    This is the public API for faking responses. This function\n    takes a number status, headers object, and string body:\n\n    ```\n    xhr.respond(404, {Content-Type: 'text/plain'}, \"Sorry. This object was not found.\")\n\n    ```\n  */\n  respond: function respond(status, headers, body) {\n    this._setResponseHeaders(headers || {});\n    this.status = typeof status == \"number\" ? status : 200;\n    this.statusText = httpStatusCodes[this.status];\n    this._setResponseBody(body || \"\");\n  }\n};\n\nfor (var property in FakeXMLHttpRequestProto) {\n  FakeXMLHttpRequest.prototype[property] = FakeXMLHttpRequestProto[property];\n}\n\nfunction verifyState(xhr) {\n  if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {\n    throw new Error(\"INVALID_STATE_ERR\");\n  }\n\n  if (xhr.sendFlag) {\n    throw new Error(\"INVALID_STATE_ERR\");\n  }\n}\n\n\nfunction verifyRequestSent(xhr) {\n    if (xhr.readyState == FakeXMLHttpRequest.DONE) {\n        throw new Error(\"Request done\");\n    }\n}\n\nfunction verifyHeadersReceived(xhr) {\n    if (xhr.async && xhr.readyState != FakeXMLHttpRequest.HEADERS_RECEIVED) {\n        throw new Error(\"No headers received\");\n    }\n}\n\nfunction verifyResponseBodyType(body) {\n    if (typeof body != \"string\") {\n        var error = new Error(\"Attempted to respond to fake XMLHttpRequest with \" +\n                             body + \", which is not a string.\");\n        error.name = \"InvalidBodyException\";\n        throw error;\n    }\n}\nexport default FakeXMLHttpRequest;\n", "import RouteRecognizer from 'route-recognizer';\nimport FakeXMLHttpRequest from 'fake-xml-http-request';\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nvar requiresPort = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encodeURIComponent(key);\n      value = encodeURIComponent(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nvar stringify = querystringify;\nvar parse = querystring;\n\nvar querystringify_1 = {\n\tstringify: stringify,\n\tparse: parse\n};\n\nvar slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/\n  , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'\n  , left = new RegExp('^'+ whitespace +'+');\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof commonjsGlobal !== 'undefined') globalVar = commonjsGlobal;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4];\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = querystringify_1.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!requiresPort(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || querystringify_1.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!requiresPort(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = querystringify_1.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = querystringify_1;\n\nvar urlParse = Url;\n\n/**\n * parseURL - decompose a URL into its parts\n * @param  {String} url a URL\n * @return {Object} parts of the URL, including the following\n *\n * 'https://www.yahoo.com:1234/mypage?test=yes#abc'\n *\n * {\n *   host: 'www.yahoo.com:1234',\n *   protocol: 'https:',\n *   search: '?test=yes',\n *   hash: '#abc',\n *   href: 'https://www.yahoo.com:1234/mypage?test=yes#abc',\n *   pathname: '/mypage',\n *   fullpath: '/mypage?test=yes'\n * }\n */\nfunction parseURL(url) {\n    var parsedUrl = new urlParse(url);\n    if (!parsedUrl.host) {\n        // eslint-disable-next-line no-self-assign\n        parsedUrl.href = parsedUrl.href; // IE: load the host and protocol\n    }\n    var pathname = parsedUrl.pathname;\n    if (pathname.charAt(0) !== '/') {\n        pathname = '/' + pathname; // IE: prepend leading slash\n    }\n    var host = parsedUrl.host;\n    if (parsedUrl.port === '80' || parsedUrl.port === '443') {\n        host = parsedUrl.hostname; // IE: remove default port\n    }\n    return {\n        host: host,\n        protocol: parsedUrl.protocol,\n        search: parsedUrl.query,\n        hash: parsedUrl.hash,\n        href: parsedUrl.href,\n        pathname: pathname,\n        fullpath: pathname + (parsedUrl.query || '') + (parsedUrl.hash || '')\n    };\n}\n\n/**\n * Registry\n *\n * A registry is a map of HTTP verbs to route recognizers.\n */\nvar Registry = /** @class */ (function () {\n    function Registry( /* host */) {\n        // Herein we keep track of RouteRecognizer instances\n        // keyed by HTTP method. Feel free to add more as needed.\n        this.verbs = {\n            GET: new RouteRecognizer(),\n            PUT: new RouteRecognizer(),\n            POST: new RouteRecognizer(),\n            DELETE: new RouteRecognizer(),\n            PATCH: new RouteRecognizer(),\n            HEAD: new RouteRecognizer(),\n            OPTIONS: new RouteRecognizer()\n        };\n    }\n    return Registry;\n}());\n\n/**\n * Hosts\n *\n * a map of hosts to Registries, ultimately allowing\n * a per-host-and-port, per HTTP verb lookup of RouteRecognizers\n */\nvar Hosts = /** @class */ (function () {\n    function Hosts() {\n        this.registries = {};\n    }\n    /**\n     * Hosts#forURL - retrieve a map of HTTP verbs to RouteRecognizers\n     *                for a given URL\n     *\n     * @param  {String} url a URL\n     * @return {Registry}   a map of HTTP verbs to RouteRecognizers\n     *                      corresponding to the provided URL's\n     *                      hostname and port\n     */\n    Hosts.prototype.forURL = function (url) {\n        var host = parseURL(url).host;\n        var registry = this.registries[host];\n        if (registry === undefined) {\n            registry = (this.registries[host] = new Registry( /*host*/));\n        }\n        return registry.verbs;\n    };\n    return Hosts;\n}());\n\nvar global$1 =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global$1 !== 'undefined' && global$1);\n\nvar support = {\n  searchParams: 'URLSearchParams' in global$1,\n  iterable: 'Symbol' in global$1 && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global$1 &&\n    'Blob' in global$1 &&\n    (function() {\n      try {\n        new Blob();\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global$1,\n  arrayBuffer: 'ArrayBuffer' in global$1\n};\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ];\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    };\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name);\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value);\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift();\n      return {done: value === undefined, value: value}\n    }\n  };\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    };\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {};\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value);\n    }, this);\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1]);\n    }, this);\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name]);\n    }, this);\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name);\n  value = normalizeValue(value);\n  var oldValue = this.map[name];\n  this.map[name] = oldValue ? oldValue + ', ' + value : value;\n};\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)];\n};\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name);\n  return this.has(name) ? this.map[name] : null\n};\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n};\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value);\n};\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this);\n    }\n  }\n};\n\nHeaders.prototype.keys = function() {\n  var items = [];\n  this.forEach(function(value, name) {\n    items.push(name);\n  });\n  return iteratorFor(items)\n};\n\nHeaders.prototype.values = function() {\n  var items = [];\n  this.forEach(function(value) {\n    items.push(value);\n  });\n  return iteratorFor(items)\n};\n\nHeaders.prototype.entries = function() {\n  var items = [];\n  this.forEach(function(value, name) {\n    items.push([name, value]);\n  });\n  return iteratorFor(items)\n};\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true;\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result);\n    };\n    reader.onerror = function() {\n      reject(reader.error);\n    };\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader();\n  var promise = fileReaderReady(reader);\n  reader.readAsArrayBuffer(blob);\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader();\n  var promise = fileReaderReady(reader);\n  reader.readAsText(blob);\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf);\n  var chars = new Array(view.length);\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i]);\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength);\n    view.set(new Uint8Array(buf));\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false;\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed;\n    this._bodyInit = body;\n    if (!body) {\n      this._bodyText = '';\n    } else if (typeof body === 'string') {\n      this._bodyText = body;\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body;\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body;\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString();\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer);\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer]);\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body);\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body);\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8');\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type);\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n      }\n    }\n  };\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    };\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this);\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    };\n  }\n\n  this.text = function() {\n    var rejected = consumed(this);\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  };\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode$1)\n    };\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  };\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase();\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {};\n  var body = options.body;\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url;\n    this.credentials = input.credentials;\n    if (!options.headers) {\n      this.headers = new Headers(input.headers);\n    }\n    this.method = input.method;\n    this.mode = input.mode;\n    this.signal = input.signal;\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit;\n      input.bodyUsed = true;\n    }\n  } else {\n    this.url = String(input);\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin';\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers);\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET');\n  this.mode = options.mode || this.mode || null;\n  this.signal = options.signal || this.signal;\n  this.referrer = null;\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body);\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/;\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/;\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n};\n\nfunction decode$1(body) {\n  var form = new FormData();\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=');\n        var name = split.shift().replace(/\\+/g, ' ');\n        var value = split.join('=').replace(/\\+/g, ' ');\n        form.append(decodeURIComponent(name), decodeURIComponent(value));\n      }\n    });\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers();\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n  return headers\n}\n\nBody.call(Request.prototype);\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {};\n  }\n\n  this.type = 'default';\n  this.status = options.status === undefined ? 200 : options.status;\n  this.ok = this.status >= 200 && this.status < 300;\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText;\n  this.headers = new Headers(options.headers);\n  this.url = options.url || '';\n  this._initBody(bodyInit);\n}\n\nBody.call(Response.prototype);\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n};\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''});\n  response.type = 'error';\n  return response\n};\n\nvar redirectStatuses = [301, 302, 303, 307, 308];\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n};\n\nvar DOMException = global$1.DOMException;\ntry {\n  new DOMException();\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message;\n    this.name = name;\n    var error = Error(message);\n    this.stack = error.stack;\n  };\n  DOMException.prototype = Object.create(Error.prototype);\n  DOMException.prototype.constructor = DOMException;\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init);\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest();\n\n    function abortXhr() {\n      xhr.abort();\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      };\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n      var body = 'response' in xhr ? xhr.response : xhr.responseText;\n      setTimeout(function() {\n        resolve(new Response(body, options));\n      }, 0);\n    };\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'));\n      }, 0);\n    };\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'));\n      }, 0);\n    };\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'));\n      }, 0);\n    };\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global$1.location.href ? global$1.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true);\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true;\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false;\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob';\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer';\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n      });\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr);\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr);\n        }\n      };\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n  })\n}\n\nfetch.polyfill = true;\n\nif (!global$1.fetch) {\n  global$1.fetch = fetch;\n  global$1.Headers = Headers;\n  global$1.Request = Request;\n  global$1.Response = Response;\n}\n\nvar FakeFetch = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tHeaders: Headers,\n\tRequest: Request,\n\tResponse: Response,\n\tget DOMException () { return DOMException; },\n\tfetch: fetch\n});\n\nfunction createPassthrough(fakeXHR, nativeXMLHttpRequest) {\n    // event types to handle on the xhr\n    var evts = ['error', 'timeout', 'abort', 'readystatechange'];\n    // event types to handle on the xhr.upload\n    var uploadEvents = [];\n    // properties to copy from the native xhr to fake xhr\n    var lifecycleProps = [\n        'readyState',\n        'responseText',\n        'response',\n        'responseXML',\n        'responseURL',\n        'status',\n        'statusText',\n    ];\n    var xhr = (fakeXHR._passthroughRequest = new nativeXMLHttpRequest());\n    xhr.open(fakeXHR.method, fakeXHR.url, fakeXHR.async, fakeXHR.username, fakeXHR.password);\n    if (fakeXHR.responseType === 'arraybuffer') {\n        lifecycleProps = ['readyState', 'response', 'status', 'statusText'];\n        xhr.responseType = fakeXHR.responseType;\n    }\n    // use onload if the browser supports it\n    if ('onload' in xhr) {\n        evts.push('load');\n    }\n    // add progress event for async calls\n    // avoid using progress events for sync calls, they will hang https://bugs.webkit.org/show_bug.cgi?id=40996.\n    if (fakeXHR.async && fakeXHR.responseType !== 'arraybuffer') {\n        evts.push('progress');\n        uploadEvents.push('progress');\n    }\n    // update `propertyNames` properties from `fromXHR` to `toXHR`\n    function copyLifecycleProperties(propertyNames, fromXHR, toXHR) {\n        for (var i = 0; i < propertyNames.length; i++) {\n            var prop = propertyNames[i];\n            if (prop in fromXHR) {\n                toXHR[prop] = fromXHR[prop];\n            }\n        }\n    }\n    // fire fake event on `eventable`\n    function dispatchEvent(eventable, eventType, event) {\n        eventable.dispatchEvent(event);\n        if (eventable['on' + eventType]) {\n            eventable['on' + eventType](event);\n        }\n    }\n    // set the on- handler on the native xhr for the given eventType\n    function createHandler(eventType) {\n        xhr['on' + eventType] = function (event) {\n            copyLifecycleProperties(lifecycleProps, xhr, fakeXHR);\n            dispatchEvent(fakeXHR, eventType, event);\n        };\n    }\n    // set the on- handler on the native xhr's `upload` property for\n    // the given eventType\n    function createUploadHandler(eventType) {\n        if (xhr.upload && fakeXHR.upload && fakeXHR.upload['on' + eventType]) {\n            xhr.upload['on' + eventType] = function (event) {\n                dispatchEvent(fakeXHR.upload, eventType, event);\n            };\n        }\n    }\n    var i;\n    for (i = 0; i < evts.length; i++) {\n        createHandler(evts[i]);\n    }\n    for (i = 0; i < uploadEvents.length; i++) {\n        createUploadHandler(uploadEvents[i]);\n    }\n    if (fakeXHR.async) {\n        xhr.timeout = fakeXHR.timeout;\n        xhr.withCredentials = fakeXHR.withCredentials;\n    }\n    // XMLHttpRequest.timeout default initializes to 0, and is not allowed to be used for\n    // synchronous XMLHttpRequests requests in a document environment. However, when a XHR\n    // polyfill does not sets the timeout value, it will throw in React Native environment.\n    // TODO:\n    // synchronous XHR is deprecated, make async the default as XMLHttpRequest.open(),\n    // and throw error if sync XHR has timeout not 0\n    if (!xhr.timeout && xhr.timeout !== 0) {\n        xhr.timeout = 0; // default XMLHttpRequest timeout\n    }\n    for (var h in fakeXHR.requestHeaders) {\n        xhr.setRequestHeader(h, fakeXHR.requestHeaders[h]);\n    }\n    return xhr;\n}\n\nfunction interceptor(ctx) {\n    function FakeRequest() {\n        // super()\n        FakeXMLHttpRequest.call(this);\n    }\n    FakeRequest.prototype = Object.create(FakeXMLHttpRequest.prototype);\n    FakeRequest.prototype.constructor = FakeRequest;\n    // extend\n    FakeRequest.prototype.send = function send() {\n        this.sendArguments = arguments;\n        if (!ctx.pretender.running) {\n            throw new Error('You shut down a Pretender instance while there was a pending request. ' +\n                'That request just tried to complete. Check to see if you accidentally shut down ' +\n                'a pretender earlier than you intended to');\n        }\n        FakeXMLHttpRequest.prototype.send.apply(this, arguments);\n        if (ctx.pretender.checkPassthrough(this)) {\n            this.passthrough();\n        }\n        else {\n            ctx.pretender.handleRequest(this);\n        }\n    };\n    FakeRequest.prototype.passthrough = function passthrough() {\n        if (!this.sendArguments) {\n            throw new Error('You attempted to passthrough a FakeRequest that was never sent. ' +\n                'Call `.send()` on the original request first');\n        }\n        var xhr = createPassthrough(this, ctx.pretender._nativeXMLHttpRequest);\n        xhr.send.apply(xhr, this.sendArguments);\n        return xhr;\n    };\n    FakeRequest.prototype._passthroughCheck = function (method, args) {\n        if (this._passthroughRequest) {\n            return this._passthroughRequest[method].apply(this._passthroughRequest, args);\n        }\n        return FakeXMLHttpRequest.prototype[method].apply(this, args);\n    };\n    FakeRequest.prototype.abort = function abort() {\n        return this._passthroughCheck('abort', arguments);\n    };\n    FakeRequest.prototype.getResponseHeader = function getResponseHeader() {\n        return this._passthroughCheck('getResponseHeader', arguments);\n    };\n    FakeRequest.prototype.getAllResponseHeaders = function getAllResponseHeaders() {\n        return this._passthroughCheck('getAllResponseHeaders', arguments);\n    };\n    if (ctx.pretender._nativeXMLHttpRequest.prototype._passthroughCheck) {\n        // eslint-disable-next-line no-console\n        console.warn('You created a second Pretender instance while there was already one running. ' +\n            'Running two Pretender servers at once will lead to unexpected results and will ' +\n            'be removed entirely in a future major version.' +\n            'Please call .shutdown() on your instances when you no longer need them to respond.');\n    }\n    return FakeRequest;\n}\n\nvar NoopArray = /** @class */ (function () {\n    function NoopArray() {\n        this.length = 0;\n    }\n    NoopArray.prototype.push = function () {\n        var _items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _items[_i] = arguments[_i];\n        }\n        return 0;\n    };\n    return NoopArray;\n}());\nfunction scheduleProgressEvent(request, startTime, totalTime) {\n    var totalSize = 0;\n    var body = request.requestBody;\n    if (body) {\n        if (body instanceof FormData) {\n            body.forEach(function (value) {\n                if (value instanceof File) {\n                    totalSize += value.size;\n                }\n                else {\n                    totalSize += value.length;\n                }\n            });\n        }\n        else {\n            // Support Blob, BufferSource, USVString, ArrayBufferView\n            totalSize = body.byteLength || body.size || body.length || 0;\n        }\n    }\n    setTimeout(function () {\n        if (!request.aborted && !request.status) {\n            var elapsedTime = new Date().getTime() - startTime.getTime();\n            var progressTransmitted = totalTime <= 0 ? 0 : (elapsedTime / totalTime) * totalSize;\n            // ProgressEvent expects loaded, total\n            // https://xhr.spec.whatwg.org/#interface-progressevent\n            request.upload._progress(true, progressTransmitted, totalSize);\n            request._progress(true, progressTransmitted, totalSize);\n            scheduleProgressEvent(request, startTime, totalTime);\n        }\n        else if (request.status) {\n            // we're done, send a final progress event with loaded === total\n            request.upload._progress(true, totalSize, totalSize);\n            request._progress(true, totalSize, totalSize);\n        }\n    }, 50);\n}\nfunction isArray(array) {\n    return Object.prototype.toString.call(array) === '[object Array]';\n}\nvar PASSTHROUGH = {};\nfunction verbify(verb) {\n    return function (path, handler, async) {\n        return this.register(verb, path, handler, async);\n    };\n}\nvar Pretender = /** @class */ (function () {\n    function Pretender() {\n        var _this = this;\n        this.hosts = new Hosts();\n        this.handlers = [];\n        this.get = verbify('GET');\n        this.post = verbify('POST');\n        this.put = verbify('PUT');\n        this.delete = verbify('DELETE');\n        this.patch = verbify('PATCH');\n        this.head = verbify('HEAD');\n        this.options = verbify('OPTIONS');\n        this.passthrough = PASSTHROUGH;\n        var lastArg = arguments[arguments.length - 1];\n        var options = typeof lastArg === 'object' ? lastArg : null;\n        var shouldNotTrack = options && options.trackRequests === false;\n        this.handledRequests = shouldNotTrack ? new NoopArray() : [];\n        this.passthroughRequests = shouldNotTrack ? new NoopArray() : [];\n        this.unhandledRequests = shouldNotTrack ? new NoopArray() : [];\n        this.requestReferences = [];\n        this.forcePassthrough = options && options.forcePassthrough === true;\n        this.disableUnhandled = options && options.disableUnhandled === true;\n        // reference the native XMLHttpRequest object so\n        // it can be restored later\n        this._nativeXMLHttpRequest = self.XMLHttpRequest;\n        this.running = false;\n        var ctx = { pretender: this };\n        this.ctx = ctx;\n        // capture xhr requests, channeling them into\n        // the route map.\n        self.XMLHttpRequest = interceptor(ctx);\n        // polyfill fetch when xhr is ready\n        this._fetchProps = FakeFetch\n            ? ['fetch', 'Headers', 'Request', 'Response']\n            : [];\n        this._fetchProps.forEach(function (name) {\n            _this['_native' + name] = self[name];\n            self[name] = FakeFetch[name];\n        }, this);\n        // 'start' the server\n        this.running = true;\n        // trigger the route map DSL.\n        var argLength = options ? arguments.length - 1 : arguments.length;\n        for (var i = 0; i < argLength; i++) {\n            this.map(arguments[i]);\n        }\n    }\n    Pretender.prototype.map = function (maps) {\n        maps.call(this);\n    };\n    Pretender.prototype.register = function (verb, url, handler, async) {\n        if (!handler) {\n            throw new Error('The function you tried passing to Pretender to handle ' +\n                verb +\n                ' ' +\n                url +\n                ' is undefined or missing.');\n        }\n        var handlerInstance = handler;\n        handlerInstance.numberOfCalls = 0;\n        handlerInstance.async = async;\n        this.handlers.push(handlerInstance);\n        var registry = this.hosts.forURL(url)[verb];\n        registry.add([\n            {\n                path: parseURL(url).fullpath,\n                handler: handlerInstance,\n            },\n        ]);\n        return handlerInstance;\n    };\n    Pretender.prototype.checkPassthrough = function (request) {\n        var verb = request.method.toUpperCase();\n        var path = parseURL(request.url).fullpath;\n        var recognized = this.hosts.forURL(request.url)[verb].recognize(path);\n        var match = recognized && recognized[0];\n        if ((match && match.handler === PASSTHROUGH) || this.forcePassthrough) {\n            this.passthroughRequests.push(request);\n            this.passthroughRequest(verb, path, request);\n            return true;\n        }\n        return false;\n    };\n    Pretender.prototype.handleRequest = function (request) {\n        var verb = request.method.toUpperCase();\n        var path = request.url;\n        var handler = this._handlerFor(verb, path, request);\n        if (handler) {\n            handler.handler.numberOfCalls++;\n            var async_1 = handler.handler.async;\n            this.handledRequests.push(request);\n            var pretender_1 = this;\n            var _handleRequest_1 = function (statusHeadersAndBody) {\n                if (!isArray(statusHeadersAndBody)) {\n                    var note = 'Remember to `return [status, headers, body];` in your route handler.';\n                    throw new Error('Nothing returned by handler for ' + path + '. ' + note);\n                }\n                var status = statusHeadersAndBody[0];\n                var headers = pretender_1.prepareHeaders(statusHeadersAndBody[1]);\n                var body = pretender_1.prepareBody(statusHeadersAndBody[2], headers);\n                pretender_1.handleResponse(request, async_1, function () {\n                    request.respond(status, headers, body);\n                    pretender_1.handledRequest(verb, path, request);\n                });\n            };\n            try {\n                var result = handler.handler(request);\n                if (result && typeof result.then === 'function') {\n                    // `result` is a promise, resolve it\n                    result.then(function (resolvedResult) {\n                        _handleRequest_1(resolvedResult);\n                    });\n                }\n                else {\n                    _handleRequest_1(result);\n                }\n            }\n            catch (error) {\n                this.erroredRequest(verb, path, request, error);\n                this.resolve(request);\n            }\n        }\n        else {\n            if (!this.disableUnhandled) {\n                this.unhandledRequests.push(request);\n                this.unhandledRequest(verb, path, request);\n            }\n        }\n    };\n    Pretender.prototype.handleResponse = function (request, strategy, callback) {\n        var delay = typeof strategy === 'function' ? strategy() : strategy;\n        delay = typeof delay === 'boolean' || typeof delay === 'number' ? delay : 0;\n        if (delay === false) {\n            callback();\n        }\n        else {\n            var pretender_2 = this;\n            pretender_2.requestReferences.push({\n                request: request,\n                callback: callback,\n            });\n            if (delay !== true) {\n                scheduleProgressEvent(request, new Date(), delay);\n                setTimeout(function () {\n                    pretender_2.resolve(request);\n                }, delay);\n            }\n        }\n    };\n    Pretender.prototype.resolve = function (request) {\n        for (var i = 0, len = this.requestReferences.length; i < len; i++) {\n            var res = this.requestReferences[i];\n            if (res.request === request) {\n                res.callback();\n                this.requestReferences.splice(i, 1);\n                break;\n            }\n        }\n    };\n    Pretender.prototype.requiresManualResolution = function (verb, path) {\n        var handler = this._handlerFor(verb.toUpperCase(), path, {});\n        if (!handler) {\n            return false;\n        }\n        var async = handler.handler.async;\n        return typeof async === 'function' ? async() === true : async === true;\n    };\n    Pretender.prototype.prepareBody = function (body, _headers) {\n        return body;\n    };\n    Pretender.prototype.prepareHeaders = function (headers) {\n        return headers;\n    };\n    Pretender.prototype.handledRequest = function (_verb, _path, _request) {\n        /* no-op */\n    };\n    Pretender.prototype.passthroughRequest = function (_verb, _path, _request) {\n        /* no-op */\n    };\n    Pretender.prototype.unhandledRequest = function (verb, path, _request) {\n        throw new Error('Pretender intercepted ' +\n            verb +\n            ' ' +\n            path +\n            ' but no handler was defined for this type of request');\n    };\n    Pretender.prototype.erroredRequest = function (verb, path, _request, error) {\n        error.message =\n            'Pretender intercepted ' +\n                verb +\n                ' ' +\n                path +\n                ' but encountered an error: ' +\n                error.message;\n        throw error;\n    };\n    Pretender.prototype.shutdown = function () {\n        var _this = this;\n        self.XMLHttpRequest = this._nativeXMLHttpRequest;\n        this._fetchProps.forEach(function (name) {\n            self[name] = _this['_native' + name];\n        }, this);\n        this.ctx.pretender = undefined;\n        // 'stop' the server\n        this.running = false;\n    };\n    Pretender.prototype._handlerFor = function (verb, url, request) {\n        var registry = this.hosts.forURL(url)[verb];\n        var matches = registry.recognize(parseURL(url).fullpath);\n        var match = matches ? matches[0] : null;\n        if (match) {\n            request.params = match.params;\n            request.queryParams = matches.queryParams;\n        }\n        return match;\n    };\n    Pretender.parseURL = parseURL;\n    Pretender.Hosts = Hosts;\n    Pretender.Registry = Registry;\n    return Pretender;\n}());\n\nPretender.parseURL = parseURL;\nPretender.Hosts = Hosts;\nPretender.Registry = Registry;\n\nexport default Pretender;\n", "if (typeof global !== \"undefined\" && global.__pretenderNodePolyfill) {\n  delete global.self\n  delete global.__pretenderNodePolyfill\n}\n", "// jscs:disable disallowVar, requireArrayDestructuring\nimport uniq from \"lodash/uniq\";\nimport flatten from \"lodash/flatten\";\n/**\n  @hide\n*/\nexport default function (edges) {\n  let nodes = uniq(flatten(edges));\n  let cursor = nodes.length;\n  let sorted = new Array(cursor);\n  let visited = {};\n  let i = cursor;\n\n  let visit = function (node, i, predecessors) {\n    if (predecessors.indexOf(node) >= 0) {\n      throw new Error(\n        `Cyclic dependency in properties ${JSON.stringify(predecessors)}`\n      );\n    }\n\n    if (visited[i]) {\n      return;\n    } else {\n      visited[i] = true;\n    }\n\n    let outgoing = edges.filter(function (edge) {\n      return edge && edge[0] === node;\n    });\n    i = outgoing.length;\n    if (i) {\n      let preds = predecessors.concat(node);\n      do {\n        let pair = outgoing[--i];\n        let child = pair[1];\n        if (child) {\n          visit(child, nodes.indexOf(child), preds);\n        }\n      } while (i);\n    }\n\n    sorted[--cursor] = node;\n  };\n\n  while (i--) {\n    if (!visited[i]) {\n      visit(nodes[i], i, []);\n    }\n  }\n\n  return sorted.reverse();\n}\n", "import isPlainObject from \"lodash/isPlainObject\";\nimport isFunction from \"lodash/isFunction\";\nimport mapValues from \"lodash/mapValues\";\nimport referenceSort from \"./utils/reference-sort\";\n\nlet Factory = function () {\n  this.build = function (sequence) {\n    let object = {};\n    let topLevelAttrs = Object.assign({}, this.attrs);\n    delete topLevelAttrs.afterCreate;\n    Object.keys(topLevelAttrs).forEach((attr) => {\n      if (Factory.isTrait.call(this, attr)) {\n        delete topLevelAttrs[attr];\n      }\n    });\n    let keys = sortAttrs(topLevelAttrs, sequence);\n\n    keys.forEach(function (key) {\n      let buildAttrs, buildSingleValue;\n\n      buildAttrs = function (attrs) {\n        return mapValues(attrs, buildSingleValue);\n      };\n\n      buildSingleValue = (value) => {\n        if (Array.isArray(value)) {\n          return value.map(buildSingleValue);\n        } else if (isPlainObject(value)) {\n          return buildAttrs(value);\n        } else if (isFunction(value)) {\n          return value.call(topLevelAttrs, sequence);\n        } else {\n          return value;\n        }\n      };\n\n      let value = topLevelAttrs[key];\n      if (isFunction(value)) {\n        object[key] = value.call(object, sequence);\n      } else {\n        object[key] = buildSingleValue(value);\n      }\n    });\n\n    return object;\n  };\n};\n\nFactory.extend = function (attrs) {\n  // Merge the new attributes with existing ones. If conflict, new ones win.\n  let newAttrs = Object.assign({}, this.attrs, attrs);\n\n  let Subclass = function () {\n    this.attrs = newAttrs;\n    Factory.call(this);\n  };\n\n  // Copy extend\n  Subclass.extend = Factory.extend;\n  Subclass.extractAfterCreateCallbacks = Factory.extractAfterCreateCallbacks;\n  Subclass.isTrait = Factory.isTrait;\n\n  // Store a reference on the class for future subclasses\n  Subclass.attrs = newAttrs;\n\n  return Subclass;\n};\n\nFactory.extractAfterCreateCallbacks = function ({ traits } = {}) {\n  let afterCreateCallbacks = [];\n  let attrs = this.attrs || {};\n  let traitCandidates;\n\n  if (attrs.afterCreate) {\n    afterCreateCallbacks.push(attrs.afterCreate);\n  }\n\n  if (Array.isArray(traits)) {\n    traitCandidates = traits;\n  } else {\n    traitCandidates = Object.keys(attrs);\n  }\n\n  traitCandidates\n    .filter((attr) => {\n      return this.isTrait(attr) && attrs[attr].extension.afterCreate;\n    })\n    .forEach((attr) => {\n      afterCreateCallbacks.push(attrs[attr].extension.afterCreate);\n    });\n\n  return afterCreateCallbacks;\n};\n\nFactory.isTrait = function (attrName) {\n  let { attrs } = this;\n  return isPlainObject(attrs[attrName]) && attrs[attrName].__isTrait__ === true;\n};\n\nfunction sortAttrs(attrs, sequence) {\n  let Temp = function () {};\n  let obj = new Temp();\n  let refs = [];\n  let property;\n\n  Object.keys(attrs).forEach(function (key) {\n    let value;\n    Object.defineProperty(obj.constructor.prototype, key, {\n      get() {\n        refs.push([property, key]);\n        return value;\n      },\n      set(newValue) {\n        value = newValue;\n      },\n      enumerable: false,\n      configurable: true,\n    });\n  });\n\n  Object.keys(attrs).forEach(function (key) {\n    let value = attrs[key];\n    if (typeof value !== \"function\") {\n      obj[key] = value;\n    }\n  });\n\n  Object.keys(attrs).forEach(function (key) {\n    let value = attrs[key];\n    property = key;\n\n    if (typeof value === \"function\") {\n      obj[key] = value.call(obj, sequence);\n    }\n\n    refs.push([key]);\n  });\n\n  return referenceSort(refs);\n}\n\n/**\n * @hide\n */\nexport default Factory;\n", "function isNumber(n) {\n  return (+n).toString() === n.toString();\n}\n\n/**\n  By default Mirage uses autoincrementing numbers starting with `1` as IDs for records. This can be customized by implementing one or more IdentityManagers for your application.\n\n  An IdentityManager is a class that's responsible for generating unique identifiers. You can define a custom identity manager for your entire application, as well as on a per-model basis.\n\n  A custom IdentityManager must implement these methods:\n\n  - `fetch`, which must return an identifier not yet used\n  - `set`, which is called with an `id` of a record being insert into Mirage's database\n  - `reset`, which should reset database to initial state\n\n  Check out the advanced guide on Mocking UUIDs to see a complete example of a custom IdentityManager.\n\n  @class IdentityManager\n  @constructor\n  @public\n*/\nclass IdentityManager {\n  constructor() {\n    this._nextId = 1;\n    this._ids = {};\n  }\n\n  /**\n    @method get\n    @hide\n    @private\n  */\n  get() {\n    return this._nextId;\n  }\n\n  /**\n    Registers `uniqueIdentifier` as used.\n\n    This method should throw is `uniqueIdentifier` has already been taken.\n\n    @method set\n    @param {String|Number} uniqueIdentifier\n    @public\n  */\n  set(uniqueIdentifier) {\n    if (this._ids[uniqueIdentifier]) {\n      throw new Error(\n        `Attempting to use the ID ${uniqueIdentifier}, but it's already been used`\n      );\n    }\n\n    if (isNumber(uniqueIdentifier) && +uniqueIdentifier >= this._nextId) {\n      this._nextId = +uniqueIdentifier + 1;\n    }\n\n    this._ids[uniqueIdentifier] = true;\n  }\n\n  /**\n    @method inc\n    @hide\n    @private\n  */\n  inc() {\n    let nextValue = this.get() + 1;\n\n    this._nextId = nextValue;\n\n    return nextValue;\n  }\n\n  /**\n    Returns the next unique identifier.\n\n    @method fetch\n    @return {String} Unique identifier\n    @public\n  */\n  fetch() {\n    let id = this.get();\n\n    this._ids[id] = true;\n\n    this.inc();\n\n    return id.toString();\n  }\n\n  /**\n    Resets the identity manager, marking all unique identifiers as available.\n\n    @method reset\n    @public\n  */\n  reset() {\n    this._nextId = 1;\n    this._ids = {};\n  }\n}\n\nexport default IdentityManager;\n", "/**\n  @hide\n*/\nlet association = function (...traitsAndOverrides) {\n  let __isAssociation__ = true;\n\n  return {\n    __isAssociation__,\n    traitsAndOverrides,\n  };\n};\n\nexport default association;\n", "let trait = function (extension) {\n  let __isTrait__ = true;\n  return {\n    extension,\n    __isTrait__,\n  };\n};\n\n/**\n  @hide\n*/\nexport default trait;\n", "const warn = console.warn; // eslint-disable-line no-console\n\n/**\n  You can use this class when you want more control over your route handlers response.\n\n  Pass the `code`, `headers` and `data` into the constructor and return an instance from any route handler.\n\n  ```js\n  import { Response } from 'miragejs';\n\n  this.get('/users', () => {\n    return new Response(400, { some: 'header' }, { errors: [ 'name cannot be blank'] });\n  });\n  ```\n*/\nexport default class Response {\n  constructor(code, headers = {}, data) {\n    this.code = code;\n    this.headers = headers;\n\n    // Default data for \"undefined 204\" responses to empty string (no content)\n    if (code === 204) {\n      if (data !== undefined && data !== \"\") {\n        warn(\n          `Mirage: One of your route handlers is returning a custom\n          204 Response that has data, but this is a violation of the HTTP spec\n          and could lead to unexpected behavior. 204 responses should have no\n          content (an empty string) as their body.`\n        );\n      } else {\n        this.data = \"\";\n      }\n\n      // Default data for \"empty untyped\" responses to empty JSON object\n    } else if (\n      (data === undefined || data === \"\") &&\n      !Object.prototype.hasOwnProperty.call(this.headers, \"Content-Type\")\n    ) {\n      this.data = {};\n    } else {\n      this.data = data;\n    }\n\n    // Default \"untyped\" responses to application/json\n    if (\n      code !== 204 &&\n      !Object.prototype.hasOwnProperty.call(this.headers, \"Content-Type\")\n    ) {\n      this.headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n\n  toRackResponse() {\n    return [this.code, this.headers, this.data];\n  }\n}\n", "import {\n  underscore as _underscore,\n  capitalize as _capitalize,\n  camelize as _camelize,\n  dasherize as _dasherize,\n} from \"inflected\";\nimport lowerFirst from \"lodash/lowerFirst\";\n\nconst camelizeCache = {};\nconst dasherizeCache = {};\nconst underscoreCache = {};\nconst capitalizeCache = {};\n\n/**\n * @param {String} word\n * @hide\n */\nexport function camelize(word) {\n  if (typeof camelizeCache[word] !== \"string\") {\n    let camelizedWord = _camelize(underscore(word), false);\n\n    /*\n     The `ember-inflector` package's version of camelize lower-cases the first\n     word after a slash, e.g.\n\n         camelize('my-things/nice-watch'); // 'myThings/niceWatch'\n\n     The `inflected` package doesn't, so we make that change here to not break\n     existing functionality. (This affects the name of the schema collections.)\n    */\n    const camelized = camelizedWord.split(\"/\").map(lowerFirst).join(\"/\");\n\n    camelizeCache[word] = camelized;\n  }\n\n  return camelizeCache[word];\n}\n\n/**\n * @param {String} word\n * @hide\n */\nexport function dasherize(word) {\n  if (typeof dasherizeCache[word] !== \"string\") {\n    const dasherized = _dasherize(underscore(word));\n\n    dasherizeCache[word] = dasherized;\n  }\n\n  return dasherizeCache[word];\n}\n\nexport function underscore(word) {\n  if (typeof underscoreCache[word] !== \"string\") {\n    const underscored = _underscore(word);\n\n    underscoreCache[word] = underscored;\n  }\n\n  return underscoreCache[word];\n}\n\nexport function capitalize(word) {\n  if (typeof capitalizeCache[word] !== \"string\") {\n    const capitalized = _capitalize(word);\n\n    capitalizeCache[word] = capitalized;\n  }\n\n  return capitalizeCache[word];\n}\n", "import isPlainObject from \"lodash/isPlainObject\";\n\n/**\n  @hide\n*/\nexport default function (object) {\n  return isPlainObject(object) && object.__isAssociation__ === true;\n}\n", "/* eslint no-console: 0 */\nlet errorProps = [\n  \"description\",\n  \"fileName\",\n  \"lineNumber\",\n  \"message\",\n  \"name\",\n  \"number\",\n  \"stack\",\n];\n/**\n  @hide\n*/\nexport default function assert(bool, text) {\n  if (typeof bool === \"string\" && !text) {\n    // console.error(`Mirage: ${bool}`);\n    throw new MirageError(bool);\n  }\n\n  if (!bool) {\n    // console.error(`Mirage: ${text}`);\n    throw new MirageError(text.replace(/^ +/gm, \"\") || \"Assertion failed\");\n  }\n}\n\n/**\n  @public\n  @hide\n  Copied from ember-metal/error\n*/\nexport function MirageError(message, stack) {\n  let tmp = Error(message);\n\n  if (stack) {\n    tmp.stack = stack;\n  }\n\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    let prop = errorProps[idx];\n\n    if ([\"description\", \"message\", \"stack\"].indexOf(prop) > -1) {\n      this[prop] = `Mirage: ${tmp[prop]}`;\n    } else {\n      this[prop] = tmp[prop];\n    }\n  }\n}\n\nMirageError.prototype = Object.create(Error.prototype);\n", "import { dasherize } from \"../../utils/inflector\";\n\n/**\n  Associations represent relationships between your Models.\n\n  The `hasMany` and `belongsTo` helpers are how you actually define relationships:\n  \n  ```js\n  import { createServer, Model, hasMany, belongsTo }\n\n  createServer({\n    models: {\n      user: Model.extend({\n        comments: hasMany()\n      }),\n      comments: Model.extend({\n        user: belongsTo()\n      })\n    }\n  })\n  ```\n\n  View [the Relationships](https://miragejs.com/docs/main-concepts/relationships/) guide to learn more about setting up relationships.\n\n  Each usage of the helper registers an Association (either a `HasMany` association or `BelongsTo` association) with your server's `Schema`. You can access these associations using either the `schema.associationsFor()` method, or the `associations` property on individual model instances.\n\n  You can then introspect the associations to do things like dynamically build up your JSON response in your serializers.\n\n  @class Association\n  @constructor\n  @public\n*/\nexport default class Association {\n  constructor(modelName, opts) {\n    /**\n      The modelName of the associated model.\n\n      For example, given this configuration\n      \n      ```js\n      createServer({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            user: belongsTo()\n          })\n        }\n      })\n      ```\n\n      the association's `modelName` would be `user`.\n\n      Note that an association's `modelName` and the `name` can be different. This is because Mirage supports multiple relationships of the same type:\n\n      ```js\n      createServer({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            author: belongsTo('user'),\n            reviewer: belongsTo('user')\n          })\n        }\n      })\n      ```\n\n      For both these relationships, the `modelName` is `user`, but the first association has a `name` of `author` while the second has a `name` of `reviewer`.\n\n      @property\n      @type {String}\n      @public\n    */\n    this.modelName = undefined; // hack to add ESDOC info. Any better way?\n\n    if (typeof modelName === \"object\") {\n      // Received opts only\n      this.modelName = undefined;\n      this.opts = modelName;\n    } else {\n      // The modelName of the association. (Might not be passed in - set later\n      // by schema).\n      this.modelName = modelName ? dasherize(modelName) : \"\";\n      this.opts = opts || {};\n    }\n\n    /**\n      The name of the association, which comes from the property name that was used to define it.\n\n      For example, given this server definition\n      \n      ```js\n      createServer({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            author: belongsTo('user')\n          })\n        }\n      })\n      ```\n\n      the association's `name` would be `author`.\n      \n      The name is used by Mirage to define foreign keys on the model (`comment.authorId` in this case), among other things.\n\n      @property\n      @type {String}\n      @public\n    */\n    this.name = \"\";\n\n    // The modelName that owns this association\n    this.ownerModelName = \"\";\n  }\n\n  /**\n     A setter for schema, since we don't have a reference at constuction time.\n\n     @method setSchema\n     @public\n     @hide\n  */\n  setSchema(schema) {\n    this.schema = schema;\n  }\n\n  /**\n     Returns a Boolean that's true if the association is self-referential, i.e. if a model has an association with itself.\n\n     For example, given\n\n     ```js\n     createServer({\n       models: {\n         user: Model.extend({\n           friends: hasMany('user')\n         })\n       }\n     })\n     ```\n\n     then\n\n     ```js\n     server.schema.associationsFor('user').friends.isReflexive // true\n     ```\n\n     @method isReflexive\n     @return {Boolean}\n     @public\n  */\n  isReflexive() {\n    let isExplicitReflexive = !!(\n      this.modelName === this.ownerModelName && this.opts.inverse\n    );\n    let isImplicitReflexive = !!(\n      this.opts.inverse === undefined && this.ownerModelName === this.modelName\n    );\n\n    return isExplicitReflexive || isImplicitReflexive;\n  }\n\n  /**\n     Returns a Boolean that's true if the association is polymorphic:\n\n     For example, given\n\n     ```js\n     createServer({\n       models: {\n         comment: Model.extend({\n           commentable: belongsTo({ polymorphic: true })\n         })\n       }\n     })\n     ```\n\n     then\n\n     ```js\n     server.schema.associationsFor('comment').commentable.isPolymorphic // true\n     ```\n\n     Check out [the guides on polymorphic associations](https://miragejs.com/docs/main-concepts/relationships/#polymorphic) to learn more.\n\n     @accessor isPolymorphic\n     @type {Boolean}\n     @public\n  */\n  get isPolymorphic() {\n    return this.opts.polymorphic;\n  }\n\n  /**\n    Returns either the string `\"hasMany\"` or `\"belongsTo\"`, based on the association type.\n  \n    @accessor\n    @type {String}\n    @public\n   */\n  get type() {\n    throw new Error(\n      \"Subclasses of Association must implement a getter for type\"\n    );\n  }\n\n  /**\n    Returns the name used for the association's foreign key.\n\n    ```js\n    let server = createServer({\n      models: {\n        user: Model,\n        post: Model.extend({\n          fineAuthor: belongsTo(\"user\"),\n          comments: hasMany()\n        }),\n        comment: Model\n      }\n    });\n\n    let associations = server.associationsFor('post')\n\n    associations.fineAuthor.foreignKey // fineAuthorId\n    associations.comments.foreignKey // commentIds\n    ```\n  \n    @accessor\n    @type {String}\n    @public\n   */\n  get foreignKey() {\n    return this.getForeignKey();\n  }\n\n  /**\n    @hide\n  */\n  get identifier() {\n    throw new Error(\n      \"Subclasses of Association must implement a getter for identifier\"\n    );\n  }\n}\n", "import Association from \"./association\";\nimport { capitalize, camelize } from \"../../utils/inflector\";\nimport assert from \"../../assert\";\n\nconst identifierCache = {};\n\n/**\n * The belongsTo association adds a fk to the owner of the association\n *\n * @class BelongsTo\n * @extends Association\n * @constructor\n * @public\n * @hide\n */\nexport default class BelongsTo extends Association {\n  get identifier() {\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const identifier = `${camelize(this.name)}Id`;\n\n      identifierCache[this.name] = identifier;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  get type() {\n    return \"belongsTo\";\n  }\n\n  /**\n   * @method getForeignKeyArray\n   * @return {Array} Array of camelized name of the model owning the association\n   * and foreign key for the association\n   * @public\n   */\n  getForeignKeyArray() {\n    return [camelize(this.ownerModelName), this.getForeignKey()];\n  }\n\n  /**\n   * @method getForeignKey\n   * @return {String} Foreign key for the association\n   * @public\n   */\n  getForeignKey() {\n    // we reuse identifierCache because it's the same logic as get identifier\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const foreignKey = `${camelize(this.name)}Id`;\n\n      identifierCache[this.name] = foreignKey;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  /**\n   * Registers belongs-to association defined by given key on given model,\n   * defines getters / setters for associated parent and associated parent's id,\n   * adds methods for creating unsaved parent record and creating a saved one\n   *\n   * @method addMethodsToModelClass\n   * @param {Function} ModelClass\n   * @param {String} key the named key for the association\n   * @public\n   */\n  addMethodsToModelClass(ModelClass, key) {\n    let modelPrototype = ModelClass.prototype;\n    let association = this;\n    let foreignKey = this.getForeignKey();\n    let associationHash = { [key]: this };\n\n    modelPrototype.belongsToAssociations = Object.assign(\n      modelPrototype.belongsToAssociations,\n      associationHash\n    );\n\n    // update belongsToAssociationFks\n    Object.keys(modelPrototype.belongsToAssociations).forEach((key) => {\n      const value = modelPrototype.belongsToAssociations[key];\n      modelPrototype.belongsToAssociationFks[value.getForeignKey()] = value;\n    });\n\n    // Add to target's dependent associations array\n    this.schema.addDependentAssociation(this, this.modelName);\n\n    // TODO: look how this is used. Are these necessary, seems like they could be gotten from the above?\n    // Or we could use a single data structure to store this information?\n    modelPrototype.associationKeys.add(key);\n    modelPrototype.associationIdKeys.add(foreignKey);\n\n    Object.defineProperty(modelPrototype, foreignKey, {\n      /*\n        object.parentId\n          - returns the associated parent's id\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n        let tempParent = this._tempAssociations[key];\n        let id;\n\n        if (tempParent === null) {\n          id = null;\n        } else {\n          if (association.isPolymorphic) {\n            if (tempParent) {\n              id = { id: tempParent.id, type: tempParent.modelName };\n            } else {\n              id = this.attrs[foreignKey];\n            }\n          } else {\n            if (tempParent) {\n              id = tempParent.id;\n            } else {\n              id = this.attrs[foreignKey];\n            }\n          }\n        }\n\n        return id;\n      },\n\n      /*\n        object.parentId = (parentId)\n          - sets the associated parent via id\n      */\n      set(id) {\n        let tempParent;\n\n        if (id === null) {\n          tempParent = null;\n        } else if (id !== undefined) {\n          if (association.isPolymorphic) {\n            assert(\n              typeof id === \"object\",\n              `You're setting an ID on the polymorphic association '${association.name}' but you didn't pass in an object. Polymorphic IDs need to be in the form { type, id }.`\n            );\n            tempParent = association.schema[\n              association.schema.toCollectionName(id.type)\n            ].find(id.id);\n          } else {\n            tempParent =\n              association.schema[\n                association.schema.toCollectionName(association.modelName)\n              ].find(id);\n            assert(\n              tempParent,\n              `Couldn't find ${association.modelName} with id = ${id}`\n            );\n          }\n        }\n\n        this[key] = tempParent;\n      },\n    });\n\n    Object.defineProperty(modelPrototype, key, {\n      /*\n        object.parent\n          - returns the associated parent\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n\n        let tempParent = this._tempAssociations[key];\n        let foreignKeyId = this[foreignKey];\n        let model = null;\n\n        if (tempParent) {\n          model = tempParent;\n        } else if (foreignKeyId !== null) {\n          if (association.isPolymorphic) {\n            model = association.schema[\n              association.schema.toCollectionName(foreignKeyId.type)\n            ].find(foreignKeyId.id);\n          } else {\n            model =\n              association.schema[\n                association.schema.toCollectionName(association.modelName)\n              ].find(foreignKeyId);\n          }\n        }\n\n        return model;\n      },\n\n      /*\n        object.parent = (parentModel)\n          - sets the associated parent via model\n\n        I want to jot some notes about hasInverseFor. There used to be an\n        association.inverse() check, but adding polymorphic associations\n        complicated this. `comment.commentable`, you can't easily check for an\n        inverse since `comments: hasMany()` could be on any model.\n\n        Instead of making it very complex and looking for an inverse on the\n        association in isoaltion, it was much simpler to ask the model being\n        passed in if it had an inverse for the setting model and with its\n        association.\n      */\n      set(model) {\n        this._tempAssociations = this._tempAssociations || {};\n        this._tempAssociations[key] = model;\n\n        if (model && model.hasInverseFor(association)) {\n          let inverse = model.inverseFor(association);\n\n          model.associate(this, inverse);\n        }\n      },\n    });\n\n    /*\n      object.newParent\n        - creates a new unsaved associated parent\n\n      TODO: document polymorphic\n    */\n    modelPrototype[`new${capitalize(key)}`] = function (...args) {\n      let modelName, attrs;\n\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let parent =\n        association.schema[association.schema.toCollectionName(modelName)].new(\n          attrs\n        );\n\n      this[key] = parent;\n\n      return parent;\n    };\n\n    /*\n      object.createParent\n        - creates a new saved associated parent, and immediately persists both models\n\n      TODO: document polymorphic\n    */\n    modelPrototype[`create${capitalize(key)}`] = function (...args) {\n      let modelName, attrs;\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let parent =\n        association.schema[\n          association.schema.toCollectionName(modelName)\n        ].create(attrs);\n\n      this[key] = parent;\n      this.save();\n\n      return parent.reload();\n    };\n  }\n\n  /**\n   *\n   *\n   * @public\n   */\n  disassociateAllDependentsFromTarget(model) {\n    let owner = this.ownerModelName;\n    let fk;\n\n    if (this.isPolymorphic) {\n      fk = { type: model.modelName, id: model.id };\n    } else {\n      fk = model.id;\n    }\n\n    let dependents = this.schema[this.schema.toCollectionName(owner)].where(\n      (potentialOwner) => {\n        let id = potentialOwner[this.getForeignKey()];\n\n        if (!id) {\n          return false;\n        }\n\n        if (typeof id === \"object\") {\n          return id.type === fk.type && id.id === fk.id;\n        } else {\n          return id === fk;\n        }\n      }\n    );\n\n    dependents.models.forEach((dependent) => {\n      dependent.disassociate(model, this);\n      dependent.save();\n    });\n  }\n}\n", "import isEqual from \"lodash/isEqual\";\nimport map from \"lodash/map\";\n\nfunction duplicate(data) {\n  if (Array.isArray(data)) {\n    return data.map(duplicate);\n  } else {\n    return Object.assign({}, data);\n  }\n}\n\n/**\n  Mirage's `Db` has many `DbCollections`, which are equivalent to tables from traditional databases. They store specific types of data, for example `users` and `posts`.\n\n  `DbCollections` have names, like `users`, which you use to access the collection from the `Db` object.\n\n  Suppose you had a `user` model defined, and the following data had been inserted into your database (either through factories or fixtures):\n\n  ```js\n  export default [\n    { id: 1, name: 'Zelda' },\n    { id: 2, name: 'Link' }\n  ];\n  ```\n\n  Then `db.contacts` would return this array.\n\n  @class DbCollection\n  @constructor\n  @public\n */\nclass DbCollection {\n  constructor(name, initialData, IdentityManager) {\n    this.name = name;\n    this._records = [];\n    this.identityManager = new IdentityManager();\n\n    if (initialData) {\n      this.insert(initialData);\n    }\n  }\n\n  /**\n   * Returns a copy of the data, to prevent inadvertent data manipulation.\n   * @method all\n   * @public\n   * @hide\n   */\n  all() {\n    return duplicate(this._records);\n  }\n\n  /**\n    Inserts `data` into the collection. `data` can be a single object\n    or an array of objects. Returns the inserted record.\n\n    ```js\n    // Insert a single record\n    let link = db.users.insert({ name: 'Link', age: 173 });\n\n    link;  // { id: 1, name: 'Link', age: 173 }\n\n    // Insert an array\n    let users = db.users.insert([\n      { name: 'Zelda', age: 142 },\n      { name: 'Epona', age: 58 },\n    ]);\n\n    users;  // [ { id: 2, name: 'Zelda', age: 142 }, { id: 3, name: 'Epona', age: 58 } ]\n    ```\n\n    @method insert\n    @param data\n    @public\n   */\n  insert(data) {\n    if (!Array.isArray(data)) {\n      return this._insertRecord(data);\n    } else {\n      return map(data, (attrs) => this._insertRecord(attrs));\n    }\n  }\n\n  /**\n    Returns a single record from the `collection` if `ids` is a single\n    id, or an array of records if `ids` is an array of ids. Note\n    each id can be an int or a string, but integer ids as strings\n    (e.g. the string “1”) will be treated as integers.\n\n    ```js\n    // Given users = [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]\n\n    db.users.find(1);      // {id: 1, name: 'Link'}\n    db.users.find([1, 2]); // [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]\n    ```\n\n    @method find\n    @param ids\n    @public\n   */\n  find(ids) {\n    if (Array.isArray(ids)) {\n      let records = this._findRecords(ids).filter(Boolean).map(duplicate); // Return a copy\n\n      return records;\n    } else {\n      let record = this._findRecord(ids);\n      if (!record) {\n        return null;\n      }\n\n      // Return a copy\n      return duplicate(record);\n    }\n  }\n\n  /**\n    Returns the first model from `collection` that matches the\n    key-value pairs in the `query` object. Note that a string\n    comparison is used. `query` is a POJO.\n\n    ```js\n    // Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]\n    db.users.findBy({ name: 'Link' }); // { id: 1, name: 'Link' }\n    ```\n\n    @method find\n    @param query\n    @public\n   */\n  findBy(query) {\n    let record = this._findRecordBy(query);\n    if (!record) {\n      return null;\n    }\n\n    // Return a copy\n    return duplicate(record);\n  }\n\n  /**\n    Returns an array of models from `collection` that match the\n    key-value pairs in the `query` object. Note that a string\n    comparison is used. `query` is a POJO.\n\n    ```js\n    // Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]\n\n    db.users.where({ name: 'Zelda' }); // [ { id: 2, name: 'Zelda' } ]\n    ```\n\n    @method where\n    @param query\n    @public\n   */\n  where(query) {\n    return this._findRecordsWhere(query).map(duplicate);\n  }\n\n  /**\n    Finds the first record matching the provided _query_ in\n    `collection`, or creates a new record using a merge of the\n    `query` and optional `attributesForCreate`.\n\n    Often times you may have a pattern like the following in your API stub:\n\n    ```js\n    // Given users = [\n    //   { id: 1, name: 'Link' },\n    //   { id: 2, name: 'Zelda' }\n    // ]\n\n    // Create Link if he doesn't yet exist\n    let records = db.users.where({ name: 'Link' });\n    let record;\n\n    if (records.length > 0) {\n      record = records[0];\n    } else {\n      record = db.users.insert({ name: 'Link' });\n    }\n    ```\n\n    You can now replace this with the following:\n\n    ```js\n    let record = db.users.firstOrCreate({ name: 'Link' });\n    ```\n\n    An extended example using *attributesForCreate*:\n\n    ```js\n    let record = db.users.firstOrCreate({ name: 'Link' }, { evil: false });\n    ```\n\n    @method firstOrCreate\n    @param query\n    @param attributesForCreate\n    @public\n   */\n  firstOrCreate(query, attributesForCreate = {}) {\n    let queryResult = this.where(query);\n    let [record] = queryResult;\n\n    if (record) {\n      return record;\n    } else {\n      let mergedAttributes = Object.assign(attributesForCreate, query);\n      let createdRecord = this.insert(mergedAttributes);\n\n      return createdRecord;\n    }\n  }\n\n  /**\n    Updates one or more records in the collection.\n\n    If *attrs* is the only arg present, updates all records in the collection according to the key-value pairs in *attrs*.\n\n    If *target* is present, restricts updates to those that match *target*. If *target* is a number or string, finds a single record whose id is *target* to update. If *target* is a POJO, queries *collection* for records that match the key-value pairs in *target*, and updates their *attrs*.\n\n    Returns the updated record or records.\n\n    ```js\n    // Given users = [\n    //   {id: 1, name: 'Link'},\n    //   {id: 2, name: 'Zelda'}\n    // ]\n\n    db.users.update({name: 'Ganon'}); // db.users = [{id: 1, name: 'Ganon'}, {id: 2, name: 'Ganon'}]\n    db.users.update(1, {name: 'Young Link'}); // db.users = [{id: 1, name: 'Young Link'}, {id: 2, name: 'Zelda'}]\n    db.users.update({name: 'Link'}, {name: 'Epona'}); // db.users = [{id: 1, name: 'Epona'}, {id: 2, name: 'Zelda'}]\n    ```\n\n    @method update\n    @param target\n    @param attrs\n    @public\n   */\n  update(target, attrs) {\n    let records;\n\n    if (typeof attrs === \"undefined\") {\n      attrs = target;\n      let changedRecords = [];\n\n      this._records.forEach((record) => {\n        let oldRecord = Object.assign({}, record);\n\n        this._updateRecord(record, attrs);\n\n        if (!isEqual(oldRecord, record)) {\n          changedRecords.push(record);\n        }\n      });\n\n      return changedRecords;\n    } else if (typeof target === \"number\" || typeof target === \"string\") {\n      let id = target;\n      let record = this._findRecord(id);\n\n      this._updateRecord(record, attrs);\n\n      return record;\n    } else if (Array.isArray(target)) {\n      let ids = target;\n      records = this._findRecords(ids);\n\n      records.forEach((record) => {\n        this._updateRecord(record, attrs);\n      });\n\n      return records;\n    } else if (typeof target === \"object\") {\n      let query = target;\n      records = this._findRecordsWhere(query);\n\n      records.forEach((record) => {\n        this._updateRecord(record, attrs);\n      });\n\n      return records;\n    }\n  }\n\n  /**\n    Removes one or more records in *collection*.\n\n    If *target* is undefined, removes all records. If *target* is a number or string, removes a single record using *target* as id. If *target* is a POJO, queries *collection* for records that match the key-value pairs in *target*, and removes them from the collection.\n\n    ```js\n    // Given users = [\n    //   {id: 1, name: 'Link'},\n    //   {id: 2, name: 'Zelda'}\n    // ]\n\n    db.users.remove(); // db.users = []\n    db.users.remove(1); // db.users = [{id: 2, name: 'Zelda'}]\n    db.users.remove({name: 'Zelda'}); // db.users = [{id: 1, name: 'Link'}]\n    ```\n\n    @method remove\n    @param target\n    @public\n   */\n  remove(target) {\n    let records;\n\n    if (typeof target === \"undefined\") {\n      this._records = [];\n      this.identityManager.reset();\n    } else if (typeof target === \"number\" || typeof target === \"string\") {\n      let record = this._findRecord(target);\n      let index = this._records.indexOf(record);\n      this._records.splice(index, 1);\n    } else if (Array.isArray(target)) {\n      records = this._findRecords(target);\n      records.forEach((record) => {\n        let index = this._records.indexOf(record);\n        this._records.splice(index, 1);\n      });\n    } else if (typeof target === \"object\") {\n      records = this._findRecordsWhere(target);\n      records.forEach((record) => {\n        let index = this._records.indexOf(record);\n        this._records.splice(index, 1);\n      });\n    }\n  }\n\n  /*\n    Private methods.\n\n    These return the actual db objects, whereas the public\n    API query methods return copies.\n  */\n\n  /**\n    @method _findRecord\n    @param id\n    @private\n    @hide\n   */\n  _findRecord(id) {\n    id = id.toString();\n\n    return this._records.find((obj) => obj.id === id);\n  }\n\n  /**\n    @method _findRecordBy\n    @param query\n    @private\n    @hide\n   */\n  _findRecordBy(query) {\n    return this._findRecordsWhere(query)[0];\n  }\n\n  /**\n    @method _findRecords\n    @param ids\n    @private\n    @hide\n   */\n  _findRecords(ids) {\n    return ids.map(this._findRecord, this);\n  }\n\n  /**\n    @method _findRecordsWhere\n    @param query\n    @private\n    @hide\n   */\n  _findRecordsWhere(query) {\n    let records = this._records;\n\n    function defaultQueryFunction(record) {\n      let keys = Object.keys(query);\n\n      return keys.every(function (key) {\n        return String(record[key]) === String(query[key]);\n      });\n    }\n\n    let queryFunction =\n      typeof query === \"object\" ? defaultQueryFunction : query;\n\n    return records.filter(queryFunction);\n  }\n\n  /**\n    @method _insertRecord\n    @param data\n    @private\n    @hide\n   */\n  _insertRecord(data) {\n    let attrs = duplicate(data);\n\n    if (attrs && (attrs.id === undefined || attrs.id === null)) {\n      attrs.id = this.identityManager.fetch(attrs);\n    } else {\n      attrs.id = attrs.id.toString();\n\n      this.identityManager.set(attrs.id);\n    }\n\n    this._records.push(attrs);\n\n    return duplicate(attrs);\n  }\n\n  /**\n    @method _updateRecord\n    @param record\n    @param attrs\n    @private\n    @hide\n   */\n  _updateRecord(record, attrs) {\n    let targetId =\n      attrs && Object.prototype.hasOwnProperty.call(attrs, \"id\")\n        ? attrs.id.toString()\n        : null;\n    let currentId = record.id;\n\n    if (targetId && currentId !== targetId) {\n      throw new Error(\"Updating the ID of a record is not permitted\");\n    }\n\n    for (let attr in attrs) {\n      if (attr === \"id\") {\n        continue;\n      }\n\n      record[attr] = attrs[attr];\n    }\n  }\n}\n\nexport default DbCollection;\n", "import DbCollection from \"./db-collection\";\nimport IdentityManager from \"./identity-manager\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\n/**\n  Your Mirage server has a database which you can interact with in your route handlers. You’ll typically use models to interact with your database data, but you can always reach into the db directly in the event you want more control.\n\n  Access the db from your route handlers via `schema.db`.\n\n  You can access individual DbCollections by using `schema.db.name`:\n\n  ```js\n  schema.db.users  // would return, e.g., [ { id: 1, name: 'Yehuda' }, { id: 2, name: 'Tom '} ]\n  ```\n\n  @class Db\n  @constructor\n  @public\n */\nclass Db {\n  constructor(initialData, identityManagers) {\n    this._collections = [];\n\n    this.registerIdentityManagers(identityManagers);\n\n    if (initialData) {\n      this.loadData(initialData);\n    }\n  }\n\n  /**\n    Loads an object of data into Mirage's database.\n\n    The keys of the object correspond to the DbCollections, and the values are arrays of records.\n\n    ```js\n    server.db.loadData({\n      users: [\n        { name: 'Yehuda' },\n        { name: 'Tom' }\n      ]\n    });\n    ```\n\n    As with `db.collection.insert`, IDs will automatically be created for records that don't have them.\n\n    @method loadData\n    @param {Object} data - Data to load\n    @public\n   */\n  loadData(data) {\n    for (let key in data) {\n      this.createCollection(key, cloneDeep(data[key]));\n    }\n  }\n\n  /**\n   Logs out the contents of the Db.\n\n   ```js\n   server.db.dump() // { users: [ name: 'Yehuda', ...\n   ```\n\n   @method dump\n   @public\n   */\n  dump() {\n    return this._collections.reduce((data, collection) => {\n      data[collection.name] = collection.all();\n\n      return data;\n    }, {});\n  }\n\n  /**\n    Add an empty collection named _name_ to your database. Typically you won’t need to do this yourself, since collections are automatically created for any models you have defined.\n\n    @method createCollection\n    @param name\n    @param initialData (optional)\n    @public\n   */\n  createCollection(name, initialData) {\n    if (!this[name]) {\n      let IdentityManager = this.identityManagerFor(name);\n      let newCollection = new DbCollection(name, initialData, IdentityManager);\n\n      // Public API has a convenient array interface. It comes at the cost of\n      // returning a copy of all records to avoid accidental mutations.\n      Object.defineProperty(this, name, {\n        get() {\n          let recordsCopy = newCollection.all();\n\n          [\n            \"insert\",\n            \"find\",\n            \"findBy\",\n            \"where\",\n            \"update\",\n            \"remove\",\n            \"firstOrCreate\",\n          ].forEach(function (method) {\n            recordsCopy[method] = function () {\n              return newCollection[method](...arguments);\n            };\n          });\n\n          return recordsCopy;\n        },\n      });\n\n      // Private API does not have the array interface. This means internally, only\n      // db-collection methods can be used. This is so records aren't copied redundantly\n      // internally, which leads to accidental O(n^2) operations (e.g., createList).\n      Object.defineProperty(this, `_${name}`, {\n        get() {\n          let recordsCopy = [];\n\n          [\n            \"insert\",\n            \"find\",\n            \"findBy\",\n            \"where\",\n            \"update\",\n            \"remove\",\n            \"firstOrCreate\",\n          ].forEach(function (method) {\n            recordsCopy[method] = function () {\n              return newCollection[method](...arguments);\n            };\n          });\n\n          return recordsCopy;\n        },\n      });\n\n      this._collections.push(newCollection);\n    } else if (initialData) {\n      this[name].insert(initialData);\n    }\n\n    return this;\n  }\n\n  /**\n    @method createCollections\n    @param ...collections\n    @public\n    @hide\n   */\n  createCollections(...collections) {\n    collections.forEach((c) => this.createCollection(c));\n  }\n\n  /**\n    Removes all data from Mirage's database.\n\n    @method emptyData\n    @public\n   */\n  emptyData() {\n    this._collections.forEach((c) => c.remove());\n  }\n\n  /**\n    @method identityManagerFor\n    @param name\n    @public\n    @hide\n   */\n  identityManagerFor(name) {\n    return (\n      this._identityManagers[this._container.inflector.singularize(name)] ||\n      this._identityManagers.application ||\n      IdentityManager\n    );\n  }\n\n  /**\n    @method registerIdentityManagers\n    @public\n    @hide\n   */\n  registerIdentityManagers(identityManagers) {\n    this._identityManagers = identityManagers || {};\n  }\n}\n\nexport default Db;\n", "import assert from \"../assert\";\nimport invokeMap from \"lodash/invokeMap\";\n\n/**\n  Collections represent arrays of models. They are returned by a hasMany association, or by one of the ModelClass query methods:\n\n  ```js\n  let posts = user.blogPosts;\n  let posts = schema.blogPosts.all();\n  let posts = schema.blogPosts.find([1, 2, 4]);\n  let posts = schema.blogPosts.where({ published: true });\n  ```\n\n  Note that there is also a `PolymorphicCollection` class that is identical to `Collection`, except it can contain a heterogeneous array of models. Thus, it has no `modelName` property. This lets serializers and other parts of the system interact with it differently.\n\n  @class Collection\n  @constructor\n  @public\n*/\nexport default class Collection {\n  constructor(modelName, models = []) {\n    assert(\n      modelName && typeof modelName === \"string\",\n      \"You must pass a `modelName` into a Collection\"\n    );\n\n    /**\n      The dasherized model name this Collection represents.\n\n      ```js\n      let posts = user.blogPosts;\n\n      posts.modelName; // \"blog-post\"\n      ```\n\n      The model name is separate from the actual models, since Collections can be empty.\n\n      @property modelName\n      @type {String}\n      @public\n    */\n    this.modelName = modelName;\n\n    /**\n      The underlying plain JavaScript array of Models in this Collection.\n\n      ```js\n      posts.models // [ post:1, post:2, ... ]\n      ```\n\n      While Collections have many array-ish methods like `filter` and `sort`, it\n      can be useful to work with the plain array if you want to work with methods\n      like `map`, or use the `[]` accessor.\n\n      For example, in testing you might want to assert against a model from the\n      collection:\n\n      ```js\n      let newPost = user.posts.models[0].title;\n\n      assert.equal(newPost, \"My first post\");\n      ```\n\n      @property models\n      @type {Array}\n      @public\n    */\n    this.models = models;\n  }\n\n  /**\n    The number of models in the collection.\n\n    ```js\n    user.posts.length; // 2\n    ```\n\n    @property length\n    @type {Integer}\n    @public\n  */\n  get length() {\n    return this.models.length;\n  }\n\n  /**\n     Updates each model in the collection, and immediately persists all changes to the db.\n\n     ```js\n     let posts = user.blogPosts;\n\n     posts.update('published', true); // the db was updated for all posts\n     ```\n\n     @method update\n     @param key\n     @param val\n     @return this\n     @public\n   */\n  update(...args) {\n    invokeMap(this.models, \"update\", ...args);\n\n    return this;\n  }\n\n  /**\n     Saves all models in the collection.\n\n     ```js\n     let posts = user.blogPosts;\n\n     posts.models[0].published = true;\n\n     posts.save(); // all posts saved to db\n     ```\n\n     @method save\n     @return this\n     @public\n   */\n  save() {\n    invokeMap(this.models, \"save\");\n\n    return this;\n  }\n\n  /**\n    Reloads each model in the collection.\n\n    ```js\n    let posts = author.blogPosts;\n\n    // ...\n\n    posts.reload(); // reloads data for each post from the db\n    ```\n\n    @method reload\n    @return this\n    @public\n  */\n  reload() {\n    invokeMap(this.models, \"reload\");\n\n    return this;\n  }\n\n  /**\n    Destroys the db record for all models in the collection.\n\n    ```js\n    let posts = user.blogPosts;\n\n    posts.destroy(); // all posts removed from db\n    ```\n\n    @method destroy\n    @return this\n    @public\n  */\n  destroy() {\n    invokeMap(this.models, \"destroy\");\n\n    return this;\n  }\n\n  /**\n    Adds a model to this collection.\n\n    ```js\n    posts.length; // 1\n\n    posts.add(newPost);\n\n    posts.length; // 2\n    ```\n\n    @method add\n    @param {Model} model\n    @return this\n    @public\n  */\n  add(model) {\n    this.models.push(model);\n\n    return this;\n  }\n\n  /**\n    Removes a model from this collection.\n\n    ```js\n    posts.length; // 5\n\n    let firstPost = posts.models[0];\n    posts.remove(firstPost);\n    posts.save();\n\n    posts.length; // 4\n    ```\n\n    @method remove\n    @param {Model} model\n    @return this\n    @public\n  */\n  remove(model) {\n    let match = this.models.find((m) => m.toString() === model.toString());\n    if (match) {\n      let i = this.models.indexOf(match);\n      this.models.splice(i, 1);\n    }\n\n    return this;\n  }\n\n  /**\n    Checks if the Collection includes the given model.\n\n    ```js\n    posts.includes(newPost);\n    ```\n\n    Works by checking if the given model name and id exists in the Collection,\n    making it a bit more flexible than strict object equality.\n\n    ```js\n    let post = server.create('post');\n    let programming = server.create('tag', { text: 'Programming' });\n\n    visit(`/posts/${post.id}`);\n    click('.tag-selector');\n    click('.tag:contains(Programming)');\n\n    post.reload();\n    assert.ok(post.tags.includes(programming));\n    ```\n\n    @method includes\n    @return {Boolean}\n    @public\n  */\n  includes(model) {\n    return this.models.some((m) => m.toString() === model.toString());\n  }\n\n  /**\n    Returns a new Collection with its models filtered according to the provided [callback function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\n    ```js\n    let publishedPosts = user.posts.filter(post => post.isPublished);\n    ```\n    @method filter\n    @param {Function} f\n    @return {Collection}\n    @public\n  */\n  filter(f) {\n    let filteredModels = this.models.filter(f);\n\n    return new Collection(this.modelName, filteredModels);\n  }\n\n  /**\n     Returns a new Collection with its models sorted according to the provided [compare function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n\n     ```js\n     let postsByTitleAsc = user.posts.sort((a, b) => a.title > b.title ? 1 : -1 );\n     ```\n\n     @method sort\n     @param {Function} f\n     @return {Collection}\n     @public\n   */\n  sort(f) {\n    let sortedModels = this.models.concat().sort(f);\n\n    return new Collection(this.modelName, sortedModels);\n  }\n\n  /**\n    Returns a new Collection with a subset of its models selected from `begin` to `end`.\n\n    ```js\n    let firstThreePosts = user.posts.slice(0, 3);\n    ```\n\n    @method slice\n    @param {Integer} begin\n    @param {Integer} end\n    @return {Collection}\n    @public\n  */\n  slice(...args) {\n    let slicedModels = this.models.slice(...args);\n\n    return new Collection(this.modelName, slicedModels);\n  }\n\n  /**\n    Modifies the Collection by merging the models from another collection.\n\n    ```js\n    user.posts.mergeCollection(newPosts);\n    user.posts.save();\n    ```\n\n    @method mergeCollection\n    @param {Collection} collection\n    @return this\n    @public\n   */\n  mergeCollection(collection) {\n    this.models = this.models.concat(collection.models);\n\n    return this;\n  }\n\n  /**\n     Simple string representation of the collection and id.\n\n     ```js\n     user.posts.toString(); // collection:post(post:1,post:4)\n     ```\n\n     @method toString\n     @return {String}\n     @public\n   */\n  toString() {\n    return `collection:${this.modelName}(${this.models\n      .map((m) => m.id)\n      .join(\",\")})`;\n  }\n}\n", "import invokeMap from \"lodash/invokeMap\";\nimport isEqual from \"lodash/isEqual\";\n\n/**\n * An array of models, returned from one of the schema query\n * methods (all, find, where). Knows how to update and destroy its models.\n *\n * Identical to Collection except it can contain a heterogeneous array of\n * models. Thus, it has no `modelName` property. This lets serializers and\n * other parts of the system interact with it differently.\n *\n * @class PolymorphicCollection\n * @constructor\n * @public\n * @hide\n */\nexport default class PolymorphicCollection {\n  constructor(models = []) {\n    this.models = models;\n  }\n\n  /**\n   * Number of models in the collection.\n   *\n   * @property length\n   * @type Number\n   * @public\n   */\n  get length() {\n    return this.models.length;\n  }\n\n  /**\n   * Updates each model in the collection (persisting immediately to the db).\n   * @method update\n   * @param key\n   * @param val\n   * @return this\n   * @public\n   */\n  update(...args) {\n    invokeMap(this.models, \"update\", ...args);\n\n    return this;\n  }\n\n  /**\n   * Destroys the db record for all models in the collection.\n   * @method destroy\n   * @return this\n   * @public\n   */\n  destroy() {\n    invokeMap(this.models, \"destroy\");\n\n    return this;\n  }\n\n  /**\n   * Saves all models in the collection.\n   * @method save\n   * @return this\n   * @public\n   */\n  save() {\n    invokeMap(this.models, \"save\");\n\n    return this;\n  }\n\n  /**\n   * Reloads each model in the collection.\n   * @method reload\n   * @return this\n   * @public\n   */\n  reload() {\n    invokeMap(this.models, \"reload\");\n\n    return this;\n  }\n\n  /**\n   * Adds a model to this collection\n   *\n   * @method add\n   * @return this\n   * @public\n   */\n  add(model) {\n    this.models.push(model);\n\n    return this;\n  }\n\n  /**\n   * Removes a model to this collection\n   *\n   * @method remove\n   * @return this\n   * @public\n   */\n  remove(model) {\n    let match = this.models.find((m) => isEqual(m.attrs, model.attrs));\n    if (match) {\n      let i = this.models.indexOf(match);\n      this.models.splice(i, 1);\n    }\n\n    return this;\n  }\n\n  /**\n   * Checks if the collection includes the model\n   *\n   * @method includes\n   * @return boolean\n   * @public\n   */\n  includes(model) {\n    return this.models.some((m) => isEqual(m.attrs, model.attrs));\n  }\n\n  /**\n   * @method filter\n   * @param f\n   * @return {Collection}\n   * @public\n   */\n  filter(f) {\n    let filteredModels = this.models.filter(f);\n\n    return new PolymorphicCollection(filteredModels);\n  }\n\n  /**\n   * @method sort\n   * @param f\n   * @return {Collection}\n   * @public\n   */\n  sort(f) {\n    let sortedModels = this.models.concat().sort(f);\n\n    return new PolymorphicCollection(sortedModels);\n  }\n\n  /**\n   * @method slice\n   * @param {Integer} begin\n   * @param {Integer} end\n   * @return {Collection}\n   * @public\n   */\n  slice(...args) {\n    let slicedModels = this.models.slice(...args);\n\n    return new PolymorphicCollection(slicedModels);\n  }\n\n  /**\n   * @method mergeCollection\n   * @param collection\n   * @return this\n   * @public\n   */\n  mergeCollection(collection) {\n    this.models = this.models.concat(collection.models);\n\n    return this;\n  }\n\n  /**\n   * Simple string representation of the collection and id.\n   * @method toString\n   * @return {String}\n   * @public\n   */\n  toString() {\n    return `collection:${this.modelName}(${this.models\n      .map((m) => m.id)\n      .join(\",\")})`;\n  }\n}\n", "import Association from \"./association\";\nimport Collection from \"../collection\";\nimport PolymorphicCollection from \"../polymorphic-collection\";\nimport compact from \"lodash/compact\";\nimport { capitalize, camelize } from \"../../utils/inflector\";\nimport assert from \"@lib/assert\";\n\nconst identifierCache = {};\n\n/**\n * @class HasMany\n * @extends Association\n * @constructor\n * @public\n * @hide\n */\nexport default class HasMany extends Association {\n  get identifier() {\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const identifier = `${camelize(\n        this._container.inflector.singularize(this.name)\n      )}Ids`;\n\n      identifierCache[this.name] = identifier;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  get type() {\n    return \"hasMany\";\n  }\n\n  /**\n   * @method getForeignKeyArray\n   * @return {Array} Array of camelized model name of associated objects\n   * and foreign key for the object owning the association\n   * @public\n   */\n  getForeignKeyArray() {\n    return [camelize(this.ownerModelName), this.getForeignKey()];\n  }\n\n  /**\n   * @method getForeignKey\n   * @return {String} Foreign key for the object owning the association\n   * @public\n   */\n  getForeignKey() {\n    // we reuse identifierCache because it's the same logic as get identifier\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const foreignKey = `${this._container.inflector.singularize(\n        camelize(this.name)\n      )}Ids`;\n\n      identifierCache[this.name] = foreignKey;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  /**\n   * Registers has-many association defined by given key on given model,\n   * defines getters / setters for associated records and associated records' ids,\n   * adds methods for creating unsaved child records and creating saved ones\n   *\n   * @method addMethodsToModelClass\n   * @param {Function} ModelClass\n   * @param {String} key\n   * @public\n   */\n  addMethodsToModelClass(ModelClass, key) {\n    let modelPrototype = ModelClass.prototype;\n    let association = this;\n    let foreignKey = this.getForeignKey();\n    let associationHash = { [key]: this };\n\n    modelPrototype.hasManyAssociations = Object.assign(\n      modelPrototype.hasManyAssociations,\n      associationHash\n    );\n\n    // update hasManyAssociationFks\n    Object.keys(modelPrototype.hasManyAssociations).forEach((key) => {\n      const value = modelPrototype.hasManyAssociations[key];\n      modelPrototype.hasManyAssociationFks[value.getForeignKey()] = value;\n    });\n\n    // Add to target's dependent associations array\n    this.schema.addDependentAssociation(this, this.modelName);\n\n    // TODO: look how this is used. Are these necessary, seems like they could be gotten from the above?\n    // Or we could use a single data structure to store this information?\n    modelPrototype.associationKeys.add(key);\n    modelPrototype.associationIdKeys.add(foreignKey);\n\n    Object.defineProperty(modelPrototype, foreignKey, {\n      /*\n        object.childrenIds\n          - returns an array of the associated children's ids\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n        let tempChildren = this._tempAssociations[key];\n        let ids = [];\n\n        if (tempChildren) {\n          if (association.isPolymorphic) {\n            ids = tempChildren.models.map((model) => ({\n              type: model.modelName,\n              id: model.id,\n            }));\n          } else {\n            ids = tempChildren.models.map((model) => model.id);\n          }\n        } else {\n          ids = this.attrs[foreignKey] || [];\n        }\n\n        return ids;\n      },\n\n      /*\n        object.childrenIds = ([childrenIds...])\n          - sets the associated children (via id)\n      */\n      set(ids) {\n        let tempChildren;\n\n        if (ids === null) {\n          tempChildren = [];\n        } else if (ids !== undefined) {\n          assert(\n            Array.isArray(ids),\n            `You must pass an array in when setting ${foreignKey} on ${this}`\n          );\n\n          if (association.isPolymorphic) {\n            assert(\n              ids.every((el) => {\n                return (\n                  typeof el === \"object\" &&\n                  typeof el.type !== undefined &&\n                  typeof el.id !== undefined\n                );\n              }),\n              `You must pass in an array of polymorphic identifiers (objects of shape { type, id }) when setting ${foreignKey} on ${this}`\n            );\n\n            let models = ids.map(({ type, id }) => {\n              return association.schema[\n                association.schema.toCollectionName(type)\n              ].find(id);\n            });\n            tempChildren = new PolymorphicCollection(models);\n          } else {\n            tempChildren =\n              association.schema[\n                association.schema.toCollectionName(association.modelName)\n              ].find(ids);\n          }\n        }\n\n        this[key] = tempChildren;\n      },\n    });\n\n    Object.defineProperty(modelPrototype, key, {\n      /*\n        object.children\n          - returns an array of associated children\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n        let collection = null;\n\n        if (this._tempAssociations[key]) {\n          collection = this._tempAssociations[key];\n        } else {\n          if (association.isPolymorphic) {\n            if (this[foreignKey]) {\n              let polymorphicIds = this[foreignKey];\n              let models = polymorphicIds.map(({ type, id }) => {\n                return association.schema[\n                  association.schema.toCollectionName(type)\n                ].find(id);\n              });\n\n              collection = new PolymorphicCollection(models);\n            } else {\n              collection = new PolymorphicCollection(association.modelName);\n            }\n          } else {\n            if (this[foreignKey]) {\n              collection = association.schema[\n                association.schema.toCollectionName(association.modelName)\n              ].find(this[foreignKey]);\n            } else {\n              collection = new Collection(association.modelName);\n            }\n          }\n\n          this._tempAssociations[key] = collection;\n        }\n\n        return collection;\n      },\n\n      /*\n        object.children = [model1, model2, ...]\n          - sets the associated children (via array of models or Collection)\n      */\n      set(models) {\n        if (\n          models instanceof Collection ||\n          models instanceof PolymorphicCollection\n        ) {\n          models = models.models;\n        }\n\n        models = models ? compact(models) : [];\n        this._tempAssociations = this._tempAssociations || {};\n\n        let collection;\n        if (association.isPolymorphic) {\n          collection = new PolymorphicCollection(models);\n        } else {\n          collection = new Collection(association.modelName, models);\n        }\n        this._tempAssociations[key] = collection;\n\n        models.forEach((model) => {\n          if (model.hasInverseFor(association)) {\n            let inverse = model.inverseFor(association);\n\n            model.associate(this, inverse);\n          }\n        });\n      },\n    });\n\n    /*\n      object.newChild\n        - creates a new unsaved associated child\n    */\n    modelPrototype[\n      `new${capitalize(\n        camelize(this._container.inflector.singularize(association.name))\n      )}`\n    ] = function (...args) {\n      let modelName, attrs;\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let child =\n        association.schema[association.schema.toCollectionName(modelName)].new(\n          attrs\n        );\n      let children = this[key].models;\n\n      children.push(child);\n      this[key] = children;\n\n      return child;\n    };\n\n    /*\n      object.createChild\n        - creates a new saved associated child, and immediately persists both models\n\n      TODO: forgot why this[key].add(child) doesn't work, most likely\n      because these external APIs trigger saving cascades. Should probably\n      have an internal method like this[key]._add.\n    */\n    modelPrototype[\n      `create${capitalize(\n        camelize(this._container.inflector.singularize(association.name))\n      )}`\n    ] = function (...args) {\n      let modelName, attrs;\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let child =\n        association.schema[\n          association.schema.toCollectionName(modelName)\n        ].create(attrs);\n      let children = this[key].models;\n\n      children.push(child);\n      this[key] = children;\n\n      this.save();\n\n      return child.reload();\n    };\n  }\n\n  /**\n   *\n   *\n   * @public\n   */\n  disassociateAllDependentsFromTarget(model) {\n    let owner = this.ownerModelName;\n    let fk;\n\n    if (this.isPolymorphic) {\n      fk = { type: model.modelName, id: model.id };\n    } else {\n      fk = model.id;\n    }\n\n    let dependents = this.schema[this.schema.toCollectionName(owner)].where(\n      (potentialOwner) => {\n        let currentIds = potentialOwner[this.getForeignKey()];\n\n        // Need this check because currentIds could be null\n        return (\n          currentIds &&\n          currentIds.find((id) => {\n            if (typeof id === \"object\") {\n              return id.type === fk.type && id.id === fk.id;\n            } else {\n              return id === fk;\n            }\n          })\n        );\n      }\n    );\n\n    dependents.models.forEach((dependent) => {\n      dependent.disassociate(model, this);\n      dependent.save();\n    });\n  }\n}\n", "import assert from \"../assert\";\nimport { camelize, dasherize } from \"../utils/inflector\";\nimport HasMany from \"../orm/associations/has-many\";\n\nconst pathModelClassCache = {};\n\n/**\n  @hide\n*/\nexport default class BaseRouteHandler {\n  getModelClassFromPath(fullPath) {\n    if (!fullPath) {\n      return;\n    }\n\n    if (typeof pathModelClassCache[fullPath] !== \"string\") {\n      let path = fullPath.split(\"/\");\n      let lastPath;\n\n      for (let i = path.length - 1; i >= 0; i--) {\n        const segment = path[i];\n        if (segment.length && segment[0] !== \":\") {\n          lastPath = segment;\n          break;\n        }\n      }\n\n      pathModelClassCache[fullPath] = dasherize(\n        camelize(this._container.inflector.singularize(lastPath))\n      );\n    }\n\n    return pathModelClassCache[fullPath];\n  }\n\n  _getIdForRequest(request, jsonApiDoc) {\n    let id;\n    if (request && request.params && request.params.id) {\n      id = request.params.id;\n    } else if (jsonApiDoc && jsonApiDoc.data && jsonApiDoc.data.id) {\n      id = jsonApiDoc.data.id;\n    }\n    return id;\n  }\n\n  _getJsonApiDocForRequest(request, modelName) {\n    let body;\n    if (request && request.requestBody) {\n      body = JSON.parse(request.requestBody);\n    }\n    return this.serializerOrRegistry.normalize(body, modelName);\n  }\n\n  _getAttrsForRequest(request, modelName) {\n    let json = this._getJsonApiDocForRequest(request, modelName);\n    let id = this._getIdForRequest(request, json);\n    let attrs = {};\n\n    assert(\n      json.data &&\n        (json.data.attributes || json.data.type || json.data.relationships),\n      `You're using a shorthand or #normalizedRequestAttrs, but your serializer's normalize function did not return a valid JSON:API document. Consult the docs for the normalize hook on the Serializer class.`\n    );\n\n    if (json.data.attributes) {\n      attrs = Object.keys(json.data.attributes).reduce((sum, key) => {\n        sum[camelize(key)] = json.data.attributes[key];\n        return sum;\n      }, {});\n    }\n\n    if (json.data.relationships) {\n      Object.keys(json.data.relationships).forEach((relationshipName) => {\n        let relationship = json.data.relationships[relationshipName];\n        let modelClass = this.schema.modelClassFor(modelName);\n        let association = modelClass.associationFor(camelize(relationshipName));\n        let valueForRelationship;\n\n        assert(\n          association,\n          `You're passing the relationship '${relationshipName}' to the '${modelName}' model via a ${request.method} to '${request.url}', but you did not define the '${relationshipName}' association on the '${modelName}' model.`\n        );\n\n        if (association.isPolymorphic) {\n          valueForRelationship = relationship.data;\n        } else if (association instanceof HasMany) {\n          valueForRelationship =\n            relationship.data && relationship.data.map((rel) => rel.id);\n        } else {\n          valueForRelationship = relationship.data && relationship.data.id;\n        }\n\n        attrs[association.identifier] = valueForRelationship;\n      }, {});\n    }\n\n    if (id) {\n      attrs.id = id;\n    }\n\n    return attrs;\n  }\n\n  _getAttrsForFormRequest({ requestBody }) {\n    let attrs;\n    let urlEncodedParts = [];\n\n    assert(\n      requestBody && typeof requestBody === \"string\",\n      `You're using the helper method #normalizedFormData, but the request body is empty or not a valid url encoded string.`\n    );\n\n    urlEncodedParts = requestBody.split(\"&\");\n\n    attrs = urlEncodedParts.reduce((a, urlEncodedPart) => {\n      let [key, value] = urlEncodedPart.split(\"=\");\n      a[key] = decodeURIComponent(value.replace(/\\+/g, \" \"));\n      return a;\n    }, {});\n\n    return attrs;\n  }\n}\n", "import BaseRouteHandler from \"./base\";\nimport assert from \"../assert\";\nimport { dasherize } from \"../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class FunctionRouteHandler extends BaseRouteHandler {\n  constructor(schema, serializerOrRegistry, userFunction, path, server) {\n    super(server);\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.userFunction = userFunction;\n    this.path = path;\n  }\n\n  handle(request) {\n    return this.userFunction(this.schema, request);\n  }\n\n  setRequest(request) {\n    this.request = request;\n  }\n\n  serialize(response, serializerType) {\n    let serializer;\n\n    if (serializerType) {\n      serializer = this.serializerOrRegistry.serializerFor(serializerType, {\n        explicit: true,\n      });\n    } else {\n      serializer = this.serializerOrRegistry;\n    }\n\n    return serializer.serialize(response, this.request);\n  }\n\n  normalizedRequestAttrs(modelName = null) {\n    let {\n      path,\n      request,\n      request: { requestHeaders },\n    } = this;\n    let attrs;\n\n    let lowerCaseHeaders = {};\n    for (let header in requestHeaders) {\n      lowerCaseHeaders[header.toLowerCase()] = requestHeaders[header];\n    }\n    if (/x-www-form-urlencoded/.test(lowerCaseHeaders[\"content-type\"])) {\n      attrs = this._getAttrsForFormRequest(request);\n    } else {\n      if (modelName) {\n        assert(\n          dasherize(modelName) === modelName,\n          `You called normalizedRequestAttrs('${modelName}'), but normalizedRequestAttrs was intended to be used with the dasherized version of the model type. Please change this to normalizedRequestAttrs('${dasherize(\n            modelName\n          )}').`\n        );\n      } else {\n        modelName = this.getModelClassFromPath(path);\n      }\n\n      assert(\n        this.schema.hasModelForModelName(modelName),\n        `You're using a shorthand or the #normalizedRequestAttrs helper but the detected model of '${modelName}' does not exist. You might need to pass in the correct modelName as the first argument to #normalizedRequestAttrs.`\n      );\n\n      attrs = this._getAttrsForRequest(request, modelName);\n    }\n\n    return attrs;\n  }\n}\n", "/**\n * @hide\n */\nexport default class ObjectRouteHandler {\n  constructor(schema, serializerOrRegistry, object) {\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.object = object;\n  }\n\n  handle(/* request */) {\n    return this.object;\n  }\n}\n", "import BaseRouteHandler from \"../base\";\n\n/**\n  @hide\n*/\nexport default class BaseShorthandRouteHandler extends BaseRouteHandler {\n  constructor(schema, serializerOrRegistry, shorthand, path, options = {}) {\n    super();\n    shorthand = shorthand || this.getModelClassFromPath(path);\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.shorthand = shorthand;\n    this.options = options;\n\n    let type = Array.isArray(shorthand) ? \"array\" : typeof shorthand;\n    if (type === \"string\") {\n      let modelClass = this.schema[this.schema.toCollectionName(shorthand)];\n      this.handle = (request) => {\n        return this.handleStringShorthand(request, modelClass);\n      };\n    } else if (type === \"array\") {\n      let modelClasses = shorthand.map(\n        (modelName) => this.schema[this.schema.toCollectionName(modelName)]\n      );\n      this.handle = (request) => {\n        return this.handleArrayShorthand(request, modelClasses);\n      };\n    }\n  }\n\n  // handleStringShorthand() {\n  //\n  // }\n  //\n  // handleArrayShorthand() {\n  //\n  // }\n}\n", "import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport Response from \"../../response\";\nimport { camelize } from \"../../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class GetShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Retrieve a model/collection from the db.\n\n    Examples:\n      this.get('/contacts', 'contact');\n      this.get('/contacts/:id', 'contact');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n    if (id) {\n      let model = modelClass.find(id);\n      if (!model) {\n        return new Response(404);\n      } else {\n        return model;\n      }\n    } else if (this.options.coalesce) {\n      let ids = this.serializerOrRegistry.getCoalescedIds(\n        request,\n        camelizedModelName\n      );\n      if (ids) {\n        return modelClass.find(ids);\n      }\n    }\n    return modelClass.all();\n  }\n\n  /*\n    Retrieve an array of collections from the db.\n\n    Ex: this.get('/home', ['contacts', 'pictures']);\n  */\n  handleArrayShorthand(request, modelClasses) {\n    let keys = this.shorthand;\n    let id = this._getIdForRequest(request);\n\n    /*\n    If the first key is singular and we have an id param in\n    the request, we're dealing with the version of the shorthand\n    that has a parent model and several has-many relationships.\n    We throw an error, because the serializer is the appropriate\n    place for this now.\n    */\n    assert(\n      !id || this._container.inflector.singularize(keys[0]) !== keys[0],\n      `It looks like you're using the \"Single record with\n      related records\" version of the array shorthand, in addition to opting\n      in to the model layer. This shorthand was made when there was no\n      serializer layer. Now that you're using models, please ensure your\n      relationships are defined, and create a serializer for the parent\n      model, adding the relationships there.`\n    );\n\n    return modelClasses.map((modelClass) => modelClass.all());\n  }\n}\n", "import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport { camelize } from \"../../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class PostShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Push a new model of type *camelizedModelName* to the db.\n\n    For example, this will push a 'user':\n      this.post('/contacts', 'user');\n  */\n\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let attrs = this._getAttrsForRequest(\n      request,\n      modelClass.camelizedModelName\n    );\n    return modelClass.create(attrs);\n  }\n}\n", "import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport { camelize } from \"../../utils/inflector\";\nimport Response from \"../../response\";\n\n/**\n * @hide\n */\nexport default class PutShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Update an object from the db, specifying the type.\n\n      this.put('/contacts/:id', 'user');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n\n    let model = modelClass.find(id);\n    if (!model) {\n      return new Response(404);\n    }\n\n    let attrs = this._getAttrsForRequest(\n      request,\n      modelClass.camelizedModelName\n    );\n\n    return model.update(attrs);\n  }\n}\n", "import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport { camelize } from \"../../utils/inflector\";\nimport Response from \"../../response\";\n\n/**\n * @hide\n */\nexport default class DeleteShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Remove the model from the db of type *camelizedModelName*.\n\n    This would remove the user with id :id:\n      Ex: this.del('/contacts/:id', 'user');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n    let model = modelClass.find(id);\n    if (!model) {\n      return new Response(404);\n    }\n\n    model.destroy();\n  }\n\n  /*\n    Remove the model and child related models from the db.\n\n    This would remove the contact with id `:id`, as well\n    as this contact's addresses and phone numbers.\n      Ex: this.del('/contacts/:id', ['contact', 'addresses', 'numbers');\n  */\n  handleArrayShorthand(request, modelClasses) {\n    let id = this._getIdForRequest(request);\n\n    let parent = modelClasses[0].find(id);\n    let childTypes = modelClasses\n      .slice(1)\n      .map((modelClass) =>\n        this._container.inflector.pluralize(modelClass.camelizedModelName)\n      );\n\n    // Delete related children\n    childTypes.forEach((type) => parent[type].destroy());\n    parent.destroy();\n  }\n}\n", "import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport Response from \"../../response\";\nimport { camelize } from \"../../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class HeadShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Retrieve a model/collection from the db.\n\n    Examples:\n      this.head('/contacts', 'contact');\n      this.head('/contacts/:id', 'contact');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n    if (id) {\n      let model = modelClass.find(id);\n      if (!model) {\n        return new Response(404);\n      } else {\n        return new Response(204);\n      }\n    } else if (\n      this.options.coalesce &&\n      request.queryParams &&\n      request.queryParams.ids\n    ) {\n      let model = modelClass.find(request.queryParams.ids);\n\n      if (!model) {\n        return new Response(404);\n      } else {\n        return new Response(204);\n      }\n    } else {\n      return new Response(204);\n    }\n  }\n}\n", "import { MirageError } from \"./assert\";\nimport Response from \"./response\";\nimport FunctionHandler from \"./route-handlers/function\";\nimport ObjectHandler from \"./route-handlers/object\";\nimport GetShorthandHandler from \"./route-handlers/shorthands/get\";\nimport PostShorthandHandler from \"./route-handlers/shorthands/post\";\nimport PutShorthandHandler from \"./route-handlers/shorthands/put\";\nimport DeleteShorthandHandler from \"./route-handlers/shorthands/delete\";\nimport HeadShorthandHandler from \"./route-handlers/shorthands/head\";\n\nconst DEFAULT_CODES = { get: 200, put: 204, post: 201, delete: 204 };\n\nfunction createHandler({\n  verb,\n  schema,\n  serializerOrRegistry,\n  path,\n  rawHandler,\n  options,\n  middleware,\n}) {\n  let handler;\n  let args = [\n    schema,\n    serializerOrRegistry,\n    rawHandler,\n    path,\n    options,\n    middleware,\n  ];\n  let type = typeof rawHandler;\n\n  if (type === \"function\") {\n    handler = new FunctionHandler(...args);\n  } else if (type === \"object\" && rawHandler) {\n    handler = new ObjectHandler(...args);\n  } else if (verb === \"get\") {\n    handler = new GetShorthandHandler(...args);\n  } else if (verb === \"post\") {\n    handler = new PostShorthandHandler(...args);\n  } else if (verb === \"put\" || verb === \"patch\") {\n    handler = new PutShorthandHandler(...args);\n  } else if (verb === \"delete\") {\n    handler = new DeleteShorthandHandler(...args);\n  } else if (verb === \"head\") {\n    handler = new HeadShorthandHandler(...args);\n  }\n  return handler;\n}\n\n/**\n * @hide\n */\nexport default class RouteHandler {\n  constructor({\n    schema,\n    verb,\n    rawHandler,\n    customizedCode,\n    options,\n    path,\n    serializerOrRegistry,\n    middleware,\n  }) {\n    this.verb = verb;\n    this.customizedCode = customizedCode;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.middleware = middleware || [];\n    this.handler = createHandler({\n      verb,\n      schema,\n      path,\n      serializerOrRegistry,\n      rawHandler,\n      options,\n    });\n  }\n\n  handle(request) {\n    return this._getMirageResponseForRequest(request, this.middleware)\n      .then((mirageResponse) => this.serialize(mirageResponse, request))\n      .then((serializedMirageResponse) => {\n        return serializedMirageResponse.toRackResponse();\n      });\n  }\n\n  _getMirageResponseForRequest(request, middleware = []) {\n    let result;\n    try {\n      /*\n       We need to do this for the #serialize convenience method. Probably is\n       a better way.\n     */\n      if (this.handler instanceof FunctionHandler) {\n        this.handler.setRequest(request);\n      }\n\n      result = this.handleWithMiddleware(request, [\n        ...middleware,\n        (_, req) => this.handler.handle(req),\n      ]);\n    } catch (e) {\n      if (e instanceof MirageError) {\n        result = new Response(500, {}, e);\n      } else {\n        let message = e.message || e;\n\n        result = new Response(\n          500,\n          {},\n          {\n            message,\n            stack: `Mirage: Your ${request.method} handler for the url ${\n              request.url\n            } threw an error:\\n\\n${e.stack || e}`,\n          }\n        );\n      }\n    }\n\n    return this._toMirageResponse(result);\n  }\n\n  handleWithMiddleware(request, middleware) {\n    const [current, ...remaining] = middleware;\n    return current(this.schema, request, (req = request) => {\n      return this.handleWithMiddleware(req, remaining);\n    });\n  }\n\n  _toMirageResponse(result) {\n    let mirageResponse;\n\n    return new Promise((resolve, reject) => {\n      Promise.resolve(result)\n        .then((response) => {\n          if (response instanceof Response) {\n            mirageResponse = result;\n          } else {\n            let code = this._getCodeForResponse(response);\n            mirageResponse = new Response(code, {}, response);\n          }\n          resolve(mirageResponse);\n        })\n        .catch(reject);\n    });\n  }\n\n  _getCodeForResponse(response) {\n    let code;\n    if (this.customizedCode) {\n      code = this.customizedCode;\n    } else {\n      code = DEFAULT_CODES[this.verb];\n      // Returning any data for a 204 is invalid\n      if (code === 204 && response !== undefined && response !== \"\") {\n        code = 200;\n      }\n    }\n    return code;\n  }\n\n  serialize(mirageResponse, request) {\n    mirageResponse.data = this.serializerOrRegistry.serialize(\n      mirageResponse.data,\n      request\n    );\n\n    return mirageResponse;\n  }\n}\n", "import has from \"lodash/has\";\n\n/**\n  @hide\n*/\nexport default function extend(protoProps, staticProps) {\n  class Child extends this {\n    constructor(...args) {\n      super(...args);\n      // The constructor function for the new subclass is optionally defined by you\n      // in your `extend` definition\n      if (protoProps && has(protoProps, \"constructor\")) {\n        protoProps.constructor.call(this, ...args);\n      }\n    }\n  }\n\n  // Add static properties to the constructor function, if supplied.\n\n  Object.assign(Child, this, staticProps);\n\n  // Add prototype properties (instance properties) to the subclass,\n  // if supplied.\n  if (protoProps) {\n    Object.assign(Child.prototype, protoProps);\n  }\n\n  return Child;\n}\n", "import BelongsTo from \"./associations/belongs-to\";\nimport HasMany from \"./associations/has-many\";\nimport extend from \"../utils/extend\";\nimport assert from \"../assert\";\nimport Collection from \"./collection\";\nimport PolymorphicCollection from \"./polymorphic-collection\";\nimport values from \"lodash/values\";\nimport compact from \"lodash/compact\";\n\n/**\n  Models wrap your database, and allow you to define relationships.\n\n  **Class vs. instance methods**\n\n  The methods documented below apply to _instances_ of models, but you'll typically use the `Schema` to access the model _class_, which can be used to find or create instances.\n\n  You can find the Class methods documented under the `Schema` API docs.\n\n  **Accessing properties and relationships**\n\n  You can access properites (fields) and relationships directly off of models.\n\n  ```js\n  user.name;    // 'Sam'\n  user.team;    // Team model\n  user.teamId;  // Team id (foreign key)\n  ```\n\n  Mirage Models are schemaless in their attributes, but their relationship schema is known.\n\n  For example,\n\n  ```js\n  let user = schema.users.create();\n  user.attrs  // { }\n  user.name   // undefined\n\n  let user = schema.users.create({ name: 'Sam' });\n  user.attrs  // { name: 'Sam' }\n  user.name   // 'Sam'\n  ```\n\n  However, if a `user` has a `posts` relationships defined,\n\n  ```js\n  let user = schema.users.create();\n  user.posts  // returns an empty Posts Collection\n  ```\n\n  @class Model\n  @constructor\n  @public\n */\nclass Model {\n  // TODO: schema and modelName now set statically at registration, need to remove\n  /*\n    Notes:\n\n  - We need to pass in modelName, because models are created with\n    .extend and anonymous functions, so you cannot use\n    reflection to find the name of the constructor.\n  */\n  constructor(schema, modelName, attrs, fks) {\n    assert(schema, \"A model requires a schema\");\n    assert(modelName, \"A model requires a modelName\");\n\n    this._schema = schema;\n    this.modelName = modelName;\n    this.fks = fks || [];\n\n    /**\n      Returns the attributes of your model.\n\n      ```js\n      let post = schema.blogPosts.find(1);\n      post.attrs; // {id: 1, title: 'Lorem Ipsum', publishedAt: '2012-01-01 10:00:00'}\n      ```\n\n      Note that you can also access individual attributes directly off a model, e.g. `post.title`.\n\n      @property attrs\n      @public\n    */\n    this.attrs = {};\n\n    attrs = attrs || {};\n\n    // Ensure fks are there\n    this.fks.forEach((fk) => {\n      this.attrs[fk] = attrs[fk] !== undefined ? attrs[fk] : null;\n    });\n\n    Object.keys(attrs).forEach((name) => {\n      const value = attrs[name];\n\n      this._validateAttr(name, value);\n      this._setupAttr(name, value);\n      this._setupRelationship(name, value);\n    });\n\n    return this;\n  }\n\n  /**\n    Create or saves the model.\n\n    ```js\n    let post = blogPosts.new({ title: 'Lorem ipsum' });\n    post.id; // null\n\n    post.save();\n    post.id; // 1\n\n    post.title = 'Hipster ipsum'; // db has not been updated\n    post.save();                  // ...now the db is updated\n    ```\n\n    @method save\n    @return this\n    @public\n   */\n  save() {\n    let collection = this._schema.toInternalCollectionName(this.modelName);\n\n    if (this.isNew()) {\n      // Update the attrs with the db response\n      this.attrs = this._schema.db[collection].insert(this.attrs);\n\n      // Ensure the id getter/setter is set\n      this._definePlainAttribute(\"id\");\n    } else {\n      this._schema.isSaving[this.toString()] = true;\n      this._schema.db[collection].update(this.attrs.id, this.attrs);\n    }\n\n    this._saveAssociations();\n\n    this._schema.isSaving[this.toString()] = false;\n    return this;\n  }\n\n  /**\n    Updates the record in the db.\n\n    ```js\n    let author = authors.find(1);\n    let followers = users.find([1, 2]);\n    let post = blogPosts.find(1);\n    post.update('title', 'Hipster ipsum'); // the db was updated\n    post.update({\n      title: 'Lorem ipsum',\n      created_at: 'before it was cool'\n    });\n    post.update({ author });\n    post.update({ followers });\n    ```\n\n    @method update\n    @param {String} key\n    @param {any} val\n    @return this\n    @public\n   */\n  update(key, val) {\n    let attrs;\n    if (key == null) {\n      return this;\n    }\n\n    if (typeof key === \"object\") {\n      attrs = key;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    Object.keys(attrs).forEach(function (attr) {\n      if (\n        !this.associationKeys.has(attr) &&\n        !this.associationIdKeys.has(attr)\n      ) {\n        this._definePlainAttribute(attr);\n      }\n      this[attr] = attrs[attr];\n    }, this);\n\n    this.save();\n\n    return this;\n  }\n\n  /**\n    Destroys the db record.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.destroy(); // removed from the db\n    ```\n\n    @method destroy\n    @public\n   */\n  destroy() {\n    if (this.isSaved()) {\n      this._disassociateFromDependents();\n\n      let collection = this._schema.toInternalCollectionName(this.modelName);\n      this._schema.db[collection].remove(this.attrs.id);\n    }\n  }\n\n  /**\n    Boolean, true if the model has not been persisted yet to the db.\n\n    ```js\n    let post = blogPosts.new({title: 'Lorem ipsum'});\n    post.isNew(); // true\n    post.id;      // null\n\n    post.save();  // true\n    post.isNew(); // false\n    post.id;      // 1\n    ```\n\n    @method isNew\n    @return {Boolean}\n    @public\n   */\n  isNew() {\n    let hasDbRecord = false;\n    let hasId = this.attrs.id !== undefined && this.attrs.id !== null;\n\n    if (hasId) {\n      let collectionName = this._schema.toInternalCollectionName(\n        this.modelName\n      );\n      let record = this._schema.db[collectionName].find(this.attrs.id);\n\n      if (record) {\n        hasDbRecord = true;\n      }\n    }\n\n    return !hasDbRecord;\n  }\n\n  /**\n    Boolean, opposite of `isNew`\n\n    @method isSaved\n    @return {Boolean}\n    @public\n   */\n  isSaved() {\n    return !this.isNew();\n  }\n\n  /**\n    Reload a model's data from the database.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.attrs;     // {id: 1, title: 'Lorem ipsum'}\n\n    post.title = 'Hipster ipsum';\n    post.title;     // 'Hipster ipsum';\n\n    post.reload();  // true\n    post.title;     // 'Lorem ipsum'\n    ```\n\n    @method reload\n    @return this\n    @public\n   */\n  reload() {\n    if (this.id) {\n      let collection = this._schema.toInternalCollectionName(this.modelName);\n      let attrs = this._schema.db[collection].find(this.id);\n\n      Object.keys(attrs)\n        .filter(function (attr) {\n          return attr !== \"id\";\n        })\n        .forEach(function (attr) {\n          this.attrs[attr] = attrs[attr];\n        }, this);\n    }\n\n    // Clear temp associations\n    this._tempAssociations = {};\n\n    return this;\n  }\n\n  toJSON() {\n    return { ...this.attrs };\n  }\n\n  /**\n    Returns a hash of this model's associations.\n\n    ```js\n    let server = createServer({\n      models: {\n        user: Model,\n        post: Model.extend({\n          user: belongsTo(),\n          comments: hasMany()\n        }),\n        comment: Model\n      },\n\n      seeds(server) {\n        let peter = server.create(\"user\", { name: \"Peter\" });\n        server.create(\"post\", { user: peter });\n      }\n    });\n\n    let post = server.schema.posts.find(1)\n    post.associations\n\n    // {\n    //   user: BelongsToAssociation,\n    //   comments: HasManyAssociation\n    // }\n    ```\n\n    Check out the docs on the Association class to see what fields are available for each association.\n\n    @method associations\n    @type {Object}\n    @public\n   */\n  get associations() {\n    return this._schema.associationsFor(this.modelName);\n  }\n\n  /**\n    Returns the association for the given key\n\n    @method associationFor\n    @param key\n    @public\n    @hide\n   */\n  associationFor(key) {\n    return this.associations[key];\n  }\n\n  /**\n    Returns this model's inverse association for the given\n    model-type-association pair, if it exists.\n\n    Example:\n\n         post: Model.extend({\n           comments: hasMany()\n         }),\n         comments: Model.extend({\n           post: belongsTo()\n         })\n\n     post.inversefor(commentsPostAssociation) would return the\n     `post.comments` association object.\n\n     Originally we had association.inverse() but that became impossible with\n     the addition of polymorphic models. Consider the following:\n\n         post: Model.extend({\n           comments: hasMany()\n         }),\n         picture: Model.extend({\n           comments: hasMany()\n         }),\n         comments: Model.extend({\n           commentable: belongsTo({ polymorphic: true })\n         })\n\n     `commentable.inverse()` is ambiguous - does it return\n     `post.comments` or `picture.comments`? Instead we need to ask each model\n     if it has an inverse for a given association. post.inverseFor(commentable)\n     is no longer ambiguous.\n\n    @method hasInverseFor\n    @param {String} modelName The model name of the class we're scanning\n    @param {ORM/Association} association\n    @return {ORM/Association}\n    @public\n    @hide\n   */\n  inverseFor(association) {\n    return (\n      this._explicitInverseFor(association) ||\n      this._implicitInverseFor(association)\n    );\n  }\n\n  /**\n    Finds the inverse for an association that explicity defines it's inverse\n\n    @private\n    @hide\n  */\n  _explicitInverseFor(association) {\n    this._checkForMultipleExplicitInverses(association);\n\n    let associations = this._schema.associationsFor(this.modelName);\n    let inverse = association.opts.inverse;\n    let candidate = inverse ? associations[inverse] : null;\n    let matchingPolymorphic = candidate && candidate.isPolymorphic;\n    let matchingInverse =\n      candidate && candidate.modelName === association.ownerModelName;\n    let candidateInverse = candidate && candidate.opts.inverse;\n\n    if (candidateInverse && candidate.opts.inverse !== association.name) {\n      assert(\n        false,\n        `You specified an inverse of ${inverse} for ${association.name}, but it does not match ${candidate.modelName} ${candidate.name}'s inverse`\n      );\n    }\n\n    return matchingPolymorphic || matchingInverse ? candidate : null;\n  }\n\n  /**\n    Ensures multiple explicit inverses don't exist on the current model\n    for the given association.\n\n    TODO: move this to compile-time check\n\n    @private\n    @hide\n  */\n  _checkForMultipleExplicitInverses(association) {\n    let associations = this._schema.associationsFor(this.modelName);\n    let matchingExplicitInverses = Object.keys(associations).filter((key) => {\n      let candidate = associations[key];\n      let modelMatches = association.ownerModelName === candidate.modelName;\n      let inverseKeyMatches = association.name === candidate.opts.inverse;\n\n      return modelMatches && inverseKeyMatches;\n    });\n    assert(\n      matchingExplicitInverses.length <= 1,\n      `The ${this.modelName} model has defined multiple explicit inverse associations for the ${association.ownerModelName}.${association.name} association.`\n    );\n  }\n\n  /**\n    Finds if there is an inverse for an association that does not\n    explicitly define one.\n\n    @private\n    @hide\n  */\n  _implicitInverseFor(association) {\n    let associations = this._schema.associationsFor(this.modelName);\n    let modelName = association.ownerModelName;\n\n    return values(associations)\n      .filter((candidate) => candidate.modelName === modelName)\n      .reduce((inverse, candidate) => {\n        let candidateInverse = candidate.opts.inverse;\n        let candidateIsImplicitInverse = candidateInverse === undefined;\n        let candidateIsExplicitInverse = candidateInverse === association.name;\n\n        let candidateMatches =\n          candidateIsImplicitInverse || candidateIsExplicitInverse;\n\n        if (candidateMatches) {\n          // Need to move this check to compile-time init\n          assert(\n            !inverse,\n            `The ${this.modelName} model has multiple possible inverse associations for the ${association.ownerModelName}.${association.name} association.`\n          );\n          inverse = candidate;\n        }\n\n        return inverse;\n      }, null);\n  }\n\n  /**\n    Returns whether this model has an inverse association for the given\n    model-type-association pair.\n\n    @method hasInverseFor\n    @param {String} modelName\n    @param {ORM/Association} association\n    @return {Boolean}\n    @public\n    @hide\n   */\n  hasInverseFor(association) {\n    return !!this.inverseFor(association);\n  }\n\n  /**\n    Used to check if models match each other. If models are saved, we check model type\n    and id, since they could have other non-persisted properties that are different.\n\n    @public\n    @hide\n  */\n  alreadyAssociatedWith(model, association) {\n    let associatedModelOrCollection = this[association.name];\n\n    if (associatedModelOrCollection && model) {\n      if (associatedModelOrCollection instanceof Model) {\n        if (associatedModelOrCollection.isSaved() && model.isSaved()) {\n          return associatedModelOrCollection.toString() === model.toString();\n        } else {\n          return associatedModelOrCollection === model;\n        }\n      } else {\n        return associatedModelOrCollection.includes(model);\n      }\n    }\n  }\n\n  associate(model, association) {\n    if (this.alreadyAssociatedWith(model, association)) {\n      return;\n    }\n\n    let { name } = association;\n\n    if (association instanceof HasMany) {\n      if (!this[name].includes(model)) {\n        this[name].add(model);\n      }\n    } else {\n      this[name] = model;\n    }\n  }\n\n  disassociate(model, association) {\n    let fk = association.getForeignKey();\n\n    if (association instanceof HasMany) {\n      let i;\n      if (association.isPolymorphic) {\n        let found = this[fk].find(\n          ({ type, id }) => type === model.modelName && id === model.id\n        );\n        i = found && this[fk].indexOf(found);\n      } else {\n        i = this[fk].map((key) => key.toString()).indexOf(model.id.toString());\n      }\n\n      if (i > -1) {\n        this.attrs[fk].splice(i, 1);\n      }\n    } else {\n      this.attrs[fk] = null;\n    }\n  }\n\n  /**\n    @hide\n  */\n  get isSaving() {\n    return this._schema.isSaving[this.toString()];\n  }\n\n  // Private\n  /**\n    model.attrs represents the persistable attributes, i.e. your db\n    table fields.\n    @method _setupAttr\n    @param attr\n    @param value\n    @private\n    @hide\n   */\n  _setupAttr(attr, value) {\n    const isAssociation =\n      this.associationKeys.has(attr) || this.associationIdKeys.has(attr);\n\n    if (!isAssociation) {\n      this.attrs[attr] = value;\n      // define plain getter/setters for non-association keys\n      this._definePlainAttribute(attr);\n    }\n  }\n\n  /**\n    Define getter/setter for a plain attribute\n    @method _definePlainAttribute\n    @param attr\n    @private\n    @hide\n   */\n  _definePlainAttribute(attr) {\n    // Ensure the property hasn't already been defined\n    let existingProperty = Object.getOwnPropertyDescriptor(this, attr);\n    if (existingProperty && existingProperty.get) {\n      return;\n    }\n\n    // Ensure the attribute is on the attrs hash\n    if (!Object.prototype.hasOwnProperty.call(this.attrs, attr)) {\n      this.attrs[attr] = null;\n    }\n\n    // Define the getter/setter\n    Object.defineProperty(this, attr, {\n      get() {\n        return this.attrs[attr];\n      },\n      set(val) {\n        this.attrs[attr] = val;\n      },\n    });\n  }\n\n  /**\n    Foreign keys get set on attrs directly (to avoid potential recursion), but\n    model references use the setter.\n   *\n    We validate foreign keys during instantiation.\n   *\n    @method _setupRelationship\n    @param attr\n    @param value\n    @private\n    @hide\n   */\n  _setupRelationship(attr, value) {\n    const isFk = this.associationIdKeys.has(attr) || this.fks.includes(attr);\n    const isAssociation = this.associationKeys.has(attr);\n\n    if (isFk) {\n      if (value !== undefined && value !== null) {\n        this._validateForeignKeyExistsInDatabase(attr, value);\n      }\n      this.attrs[attr] = value;\n    }\n    if (isAssociation) {\n      this[attr] = value;\n    }\n  }\n\n  /**\n    @method _validateAttr\n    @private\n    @hide\n   */\n  _validateAttr(key, value) {\n    // Verify attr passed in for associations is actually an association\n    {\n      if (this.associationKeys.has(key)) {\n        let association = this.associationFor(key);\n        let isNull = value === null;\n\n        if (association instanceof HasMany) {\n          let isCollection =\n            value instanceof Collection ||\n            value instanceof PolymorphicCollection;\n          let isArrayOfModels =\n            Array.isArray(value) &&\n            value.every((item) => item instanceof Model);\n\n          assert(\n            isCollection || isArrayOfModels || isNull,\n            `You're trying to create a ${this.modelName} model and you passed in \"${value}\" under the ${key} key, but that key is a HasMany relationship. You must pass in a Collection, PolymorphicCollection, array of Models, or null.`\n          );\n        } else if (association instanceof BelongsTo) {\n          assert(\n            value instanceof Model || isNull,\n            `You're trying to create a ${this.modelName} model and you passed in \"${value}\" under the ${key} key, but that key is a BelongsTo relationship. You must pass in a Model or null.`\n          );\n        }\n      }\n    }\n\n    // Verify attrs passed in for association foreign keys are actually fks\n    {\n      if (this.associationIdKeys.has(key)) {\n        if (key.endsWith(\"Ids\")) {\n          let isArray = Array.isArray(value);\n          let isNull = value === null;\n          assert(\n            isArray || isNull,\n            `You're trying to create a ${this.modelName} model and you passed in \"${value}\" under the ${key} key, but that key is a foreign key for a HasMany relationship. You must pass in an array of ids or null.`\n          );\n        }\n      }\n    }\n\n    // Verify no undefined associations are passed in\n    {\n      let isModelOrCollection =\n        value instanceof Model ||\n        value instanceof Collection ||\n        value instanceof PolymorphicCollection;\n      let isArrayOfModels =\n        Array.isArray(value) &&\n        value.length &&\n        value.every((item) => item instanceof Model);\n\n      if (isModelOrCollection || isArrayOfModels) {\n        let modelOrCollection = value;\n\n        assert(\n          this.associationKeys.has(key),\n          `You're trying to create a ${\n            this.modelName\n          } model and you passed in a ${modelOrCollection.toString()} under the ${key} key, but you haven't defined that key as an association on your model.`\n        );\n      }\n    }\n  }\n\n  /**\n    Originally we validated this via association.setId method, but it triggered\n    recursion. That method is designed for updating an existing model's ID so\n    this method is needed during instantiation.\n   *\n    @method _validateForeignKeyExistsInDatabase\n    @private\n    @hide\n   */\n  _validateForeignKeyExistsInDatabase(foreignKeyName, foreignKeys) {\n    if (Array.isArray(foreignKeys)) {\n      let association = this.hasManyAssociationFks[foreignKeyName];\n\n      let found;\n      if (association.isPolymorphic) {\n        found = foreignKeys.map(({ type, id }) => {\n          return this._schema.db[\n            this._schema.toInternalCollectionName(type)\n          ].find(id);\n        });\n        found = compact(found);\n      } else {\n        found =\n          this._schema.db[\n            this._schema.toInternalCollectionName(association.modelName)\n          ].find(foreignKeys);\n      }\n\n      let foreignKeyLabel = association.isPolymorphic\n        ? foreignKeys.map((fk) => `${fk.type}:${fk.id}`).join(\",\")\n        : foreignKeys;\n      assert(\n        found.length === foreignKeys.length,\n        `You're instantiating a ${this.modelName} that has a ${foreignKeyName} of ${foreignKeyLabel}, but some of those records don't exist in the database.`\n      );\n    } else {\n      let association = this.belongsToAssociationFks[foreignKeyName];\n\n      let found;\n      if (association.isPolymorphic) {\n        found = this._schema.db[\n          this._schema.toInternalCollectionName(foreignKeys.type)\n        ].find(foreignKeys.id);\n      } else {\n        found =\n          this._schema.db[\n            this._schema.toInternalCollectionName(association.modelName)\n          ].find(foreignKeys);\n      }\n\n      let foreignKeyLabel = association.isPolymorphic\n        ? `${foreignKeys.type}:${foreignKeys.id}`\n        : foreignKeys;\n      assert(\n        found,\n        `You're instantiating a ${this.modelName} that has a ${foreignKeyName} of ${foreignKeyLabel}, but that record doesn't exist in the database.`\n      );\n    }\n  }\n\n  /**\n    Update associated children when saving a collection\n   *\n    @method _saveAssociations\n    @private\n    @hide\n   */\n  _saveAssociations() {\n    this._saveBelongsToAssociations();\n    this._saveHasManyAssociations();\n  }\n\n  _saveBelongsToAssociations() {\n    values(this.belongsToAssociations).forEach((association) => {\n      this._disassociateFromOldInverses(association);\n      this._saveNewAssociates(association);\n      this._associateWithNewInverses(association);\n    });\n  }\n\n  _saveHasManyAssociations() {\n    values(this.hasManyAssociations).forEach((association) => {\n      this._disassociateFromOldInverses(association);\n      this._saveNewAssociates(association);\n      this._associateWithNewInverses(association);\n    });\n  }\n\n  _disassociateFromOldInverses(association) {\n    if (association instanceof HasMany) {\n      this._disassociateFromHasManyInverses(association);\n    } else if (association instanceof BelongsTo) {\n      this._disassociateFromBelongsToInverse(association);\n    }\n  }\n\n  // Disassociate currently persisted models that are no longer associated\n  _disassociateFromHasManyInverses(association) {\n    let fk = association.getForeignKey();\n    let tempAssociation =\n      this._tempAssociations && this._tempAssociations[association.name];\n    let associateIds = this.attrs[fk];\n\n    if (tempAssociation && associateIds) {\n      let models;\n      if (association.isPolymorphic) {\n        models = associateIds.map(({ type, id }) => {\n          return this._schema[this._schema.toCollectionName(type)].find(id);\n        });\n      } else {\n        // TODO: prob should initialize hasMany fks with []\n        models = this._schema[\n          this._schema.toCollectionName(association.modelName)\n        ].find(associateIds || []).models;\n      }\n\n      models\n        .filter(\n          (associate) =>\n            // filter out models that are already being saved\n            !associate.isSaving &&\n            // filter out models that will still be associated\n            !tempAssociation.includes(associate) &&\n            associate.hasInverseFor(association)\n        )\n        .forEach((associate) => {\n          let inverse = associate.inverseFor(association);\n\n          associate.disassociate(this, inverse);\n          associate.save();\n        });\n    }\n  }\n\n  /*\n    Disassociate currently persisted models that are no longer associated.\n\n    Example:\n\n      post: Model.extend({\n        comments: hasMany()\n      }),\n\n      comment: Model.extend({\n        post: belongsTo()\n      })\n\n    Assume `this` is comment:1. When saving, if comment:1 is no longer\n    associated with post:1, we need to remove comment:1 from post:1.comments.\n    In this example `association` would be `comment.post`.\n  */\n  _disassociateFromBelongsToInverse(association) {\n    let fk = association.getForeignKey();\n    let tempAssociation =\n      this._tempAssociations && this._tempAssociations[association.name];\n    let associateId = this.attrs[fk];\n\n    if (tempAssociation !== undefined && associateId) {\n      let associate;\n      if (association.isPolymorphic) {\n        associate = this._schema[\n          this._schema.toCollectionName(associateId.type)\n        ].find(associateId.id);\n      } else {\n        associate =\n          this._schema[\n            this._schema.toCollectionName(association.modelName)\n          ].find(associateId);\n      }\n\n      if (associate.hasInverseFor(association)) {\n        let inverse = associate.inverseFor(association);\n\n        associate.disassociate(this, inverse);\n        associate._updateInDb(associate.attrs);\n      }\n    }\n  }\n\n  // Find all other models that depend on me and update their foreign keys\n  _disassociateFromDependents() {\n    this._schema\n      .dependentAssociationsFor(this.modelName)\n      .forEach((association) => {\n        association.disassociateAllDependentsFromTarget(this);\n      });\n  }\n\n  _saveNewAssociates(association) {\n    let fk = association.getForeignKey();\n    let tempAssociate =\n      this._tempAssociations && this._tempAssociations[association.name];\n\n    if (tempAssociate !== undefined) {\n      this.__isSavingNewChildren = true;\n      delete this._tempAssociations[association.name];\n\n      if (tempAssociate instanceof Collection) {\n        tempAssociate.models\n          .filter((model) => !model.isSaving)\n          .forEach((child) => {\n            child.save();\n          });\n\n        this._updateInDb({\n          [fk]: tempAssociate.models.map((child) => child.id),\n        });\n      } else if (tempAssociate instanceof PolymorphicCollection) {\n        tempAssociate.models\n          .filter((model) => !model.isSaving)\n          .forEach((child) => {\n            child.save();\n          });\n\n        this._updateInDb({\n          [fk]: tempAssociate.models.map((child) => {\n            return { type: child.modelName, id: child.id };\n          }),\n        });\n      } else {\n        // Clearing the association\n        if (tempAssociate === null) {\n          this._updateInDb({ [fk]: null });\n\n          // Self-referential\n        } else if (this.equals(tempAssociate)) {\n          this._updateInDb({ [fk]: this.id });\n\n          // Non-self-referential\n        } else if (!tempAssociate.isSaving) {\n          // Save the tempAssociate and update the local reference\n          tempAssociate.save();\n          this._syncTempAssociations(tempAssociate);\n\n          let fkValue;\n          if (association.isPolymorphic) {\n            fkValue = { id: tempAssociate.id, type: tempAssociate.modelName };\n          } else {\n            fkValue = tempAssociate.id;\n          }\n\n          this._updateInDb({ [fk]: fkValue });\n        }\n      }\n\n      this.__isSavingNewChildren = false;\n    }\n  }\n\n  /*\n    Step 3 in saving associations.\n\n    Example:\n\n      // initial state\n      post.author = steinbeck;\n\n      // new state\n      post.author = twain;\n\n       1. Disassociate from old inverse (remove post from steinbeck.posts)\n       2. Save new associates (if twain.isNew, save twain)\n    -> 3. Associate with new inverse (add post to twain.posts)\n  */\n  _associateWithNewInverses(association) {\n    if (!this.__isSavingNewChildren) {\n      let modelOrCollection = this[association.name];\n\n      if (modelOrCollection instanceof Model) {\n        this._associateModelWithInverse(modelOrCollection, association);\n      } else if (\n        modelOrCollection instanceof Collection ||\n        modelOrCollection instanceof PolymorphicCollection\n      ) {\n        modelOrCollection.models.forEach((model) => {\n          this._associateModelWithInverse(model, association);\n        });\n      }\n\n      delete this._tempAssociations[association.name];\n    }\n  }\n\n  _associateModelWithInverse(model, association) {\n    if (model.hasInverseFor(association)) {\n      let inverse = model.inverseFor(association);\n      let inverseFk = inverse.getForeignKey();\n\n      let ownerId = this.id;\n      if (inverse instanceof BelongsTo) {\n        let newId;\n        if (inverse.isPolymorphic) {\n          newId = { type: this.modelName, id: ownerId };\n        } else {\n          newId = ownerId;\n        }\n        this._schema.db[\n          this._schema.toInternalCollectionName(model.modelName)\n        ].update(model.id, { [inverseFk]: newId });\n      } else {\n        let inverseCollection =\n          this._schema.db[\n            this._schema.toInternalCollectionName(model.modelName)\n          ];\n        let currentIdsForInverse =\n          inverseCollection.find(model.id)[inverse.getForeignKey()] || [];\n        let newIdsForInverse = Object.assign([], currentIdsForInverse);\n        let newId, alreadyAssociatedWith;\n\n        if (inverse.isPolymorphic) {\n          newId = { type: this.modelName, id: ownerId };\n          alreadyAssociatedWith = newIdsForInverse.some(\n            (key) => key.type == this.modelName && key.id == ownerId\n          );\n        } else {\n          newId = ownerId;\n          alreadyAssociatedWith = newIdsForInverse.includes(ownerId);\n        }\n\n        if (!alreadyAssociatedWith) {\n          newIdsForInverse.push(newId);\n        }\n\n        inverseCollection.update(model.id, { [inverseFk]: newIdsForInverse });\n      }\n    }\n  }\n\n  // Used to update data directly, since #save and #update can retrigger saves,\n  // which can cause cycles with associations.\n  _updateInDb(attrs) {\n    this.attrs = this._schema.db[\n      this._schema.toInternalCollectionName(this.modelName)\n    ].update(this.attrs.id, attrs);\n  }\n\n  /*\n  Super gnarly: after we save this tempAssociate, we we need to through\n  all other tempAssociates for a reference to this same model, and\n  update it. Otherwise those other references are stale, which could\n  cause a bug when they are subsequently saved.\n\n  This only works for belongsTo right now, should add hasMany logic to it.\n\n  See issue #1613: https://github.com/samselikoff/ember-cli-mirage/pull/1613\n  */\n  _syncTempAssociations(tempAssociate) {\n    Object.keys(this._tempAssociations).forEach((key) => {\n      if (\n        this._tempAssociations[key] &&\n        this._tempAssociations[key].toString() === tempAssociate.toString()\n      ) {\n        this._tempAssociations[key] = tempAssociate;\n      }\n    });\n  }\n\n  /**\n    Simple string representation of the model and id.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.toString(); // \"model:blogPost:1\"\n    ```\n\n    @method toString\n    @return {String}\n    @public\n  */\n  toString() {\n    let idLabel = this.id ? `(${this.id})` : \"\";\n\n    return `model:${this.modelName}${idLabel}`;\n  }\n\n  /**\n    Checks the equality of this model and the passed-in model\n   *\n    @method equals\n    @return boolean\n    @public\n    @hide\n   */\n  equals(model) {\n    return this.toString() === model.toString();\n  }\n}\n\nModel.extend = extend;\nModel.findBelongsToAssociation = function (associationType) {\n  return this.prototype.belongsToAssociations[associationType];\n};\n\nexport default Model;\n", "import Model from \"./orm/model\";\nimport Collection from \"./orm/collection\";\nimport PolymorphicCollection from \"./orm/polymorphic-collection\";\nimport extend from \"./utils/extend\";\nimport { camelize } from \"./utils/inflector\";\nimport assert from \"./assert\";\nimport isFunction from \"lodash/isFunction\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport flatten from \"lodash/flatten\";\nimport compact from \"lodash/compact\";\nimport uniqBy from \"lodash/uniqBy\";\n\n/**\n  Serializers are responsible for formatting your route handler's response.\n\n  The application serializer will apply to every response. To make specific customizations, define per-model serializers.\n\n  ```js\n  import { createServer, RestSerializer } from 'miragejs';\n\n  createServer({\n    serializers: {\n      application: RestSerializer,\n      user: RestSerializer.extend({\n        // user-specific customizations\n      })\n    }\n  })\n  ```\n\n  Any Model or Collection returned from a route handler will pass through the serializer layer. Highest priority will be given to a model-specific serializer, then the application serializer, then the default serializer.\n\n  Mirage ships with three named serializers:\n\n  - **JSONAPISerializer**, to simulate JSON:API compliant API servers:\n\n    ```js\n    import { createServer, JSONAPISerializer } from 'miragejs';\n\n    createServer({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  - **ActiveModelSerializer**, to mock Rails APIs that use AMS-style responses:\n\n    ```js\n    import { createServer, ActiveModelSerializer } from 'miragejs';\n\n    createServer({\n      serializers: {\n        application: ActiveModelSerializer\n      }\n    })\n    ```\n\n  - **RestSerializer**, a good starting point for many generic REST APIs:\n\n    ```js\n    import { createServer, RestSerializer } from 'miragejs';\n\n    createServer({\n      serializers: {\n        application: RestSerializer\n      }\n    })\n    ```\n\n  Additionally, Mirage has a basic Serializer class which you can customize using the hooks documented below:\n\n  ```js\n  import { createServer, Serializer } from 'miragejs';\n\n  createServer({\n    serializers: {\n      application: Serializer\n    }\n  })\n  ```\n\n  When writing model-specific serializers, remember to extend from your application serializer so shared logic is used by your model-specific classes:\n\n  ```js\n  import { createServer, Serializer } from 'miragejs';\n\n  const ApplicationSerializer = Serializer.extend()\n\n  createServer({\n    serializers: {\n      application: ApplicationSerializer,\n      blogPost: ApplicationSerializer.extend({\n        include: ['comments']\n      })\n    }\n  })\n  ```\n\n  @class Serializer\n  @constructor\n  @public\n*/\nclass Serializer {\n  constructor(registry, type, request = {}) {\n    this.registry = registry;\n    this.type = type;\n    this.request = request;\n\n    /**\n      Use this property on a model serializer to whitelist attributes that will be used in your JSON payload.\n\n      For example, if you had a `blog-post` model in your database that looked like\n\n      ```\n      {\n        id: 1,\n        title: 'Lorem ipsum',\n        createdAt: '2014-01-01 10:00:00',\n        updatedAt: '2014-01-03 11:42:12'\n      }\n      ```\n\n      and you just wanted `id` and `title`, you could write\n\n      ```js\n      Serializer.extend({\n        attrs: ['id', 'title']\n      });\n      ```\n\n      and the payload would look like\n\n      ```\n      {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n      ```\n\n      @property attrs\n      @public\n    */\n    this.attrs = this.attrs || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Use this property on a model serializer to specify related models you'd like to include in your JSON payload. (These can be considered default server-side includes.)\n\n      For example, if you had an `author` with many `blog-post`s and you wanted to sideload these, specify so in the `include` key:\n\n      ```js\n      createServer({\n        models: {\n          author: Model.extend({\n            blogPosts: hasMany()\n          })\n        },\n        serializers: {\n          author: Serializer.extend({\n            include: ['blogPosts']\n          });\n        }\n      })\n      ```\n\n      Now a response to a request for an author would look like this:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPostIds: [1, 2]\n        },\n        blogPosts: [\n          {id: 1, authorId: 1, title: 'Lorem'},\n          {id: 2, authorId: 1, title: 'Ipsum'}\n        ]\n      }\n      ```\n\n      You can also define `include` as a function so it can be determined dynamically.\n      \n      For example, you could conditionally include a relationship based on an `include` query parameter:\n\n      ```js\n      // Include blog posts for a GET to /authors/1?include=blogPosts\n      \n      Serializer.extend({\n        include: function(request) {\n          if (request.queryParams.include === \"blogPosts\") {\n            return ['blogPosts'];\n          } else {\n            return [];\n          }\n        }\n      });\n      ```\n\n      **Query param includes for JSONAPISerializer**\n\n      The JSONAPISerializer supports the use of `include` query parameter to return compound documents out of the box.\n\n      For example, if your app makes the following request\n\n      ```\n      GET /api/authors?include=blogPosts\n      ```\n\n      the `JSONAPISerializer` will inspect the query params of the request, see that the blogPosts relationship is present, and then proceed as if this relationship was specified directly in the include: [] array on the serializer itself.\n\n      Note that, in accordance with the spec, Mirage gives precedence to an ?include query param over a default include: [] array that you might have specified directly on the serializer. Default includes will still be in effect, however, if a request does not have an ?include query param.\n\n      Also note that default includes specified with the `include: []` array can only take a single model; they cannot take dot-separated paths to nested relationships.\n\n      If you'd like to set a default dot-separated (nested) include path for a resource, you have to do it at the route level by setting a default value for `request.queryParams`:\n\n      ```js\n      this.get('/users', function(schema, request) => {\n        request.queryParams = request.queryParams || {};\n        if (!request.queryParams.include) {\n          request.queryParams.include = 'blog-posts.comments';\n        }\n\n        // rest of route handler logic\n      });\n      ```\n\n      @property include\n      @public\n    */\n    this.include = this.include || []; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Set whether your JSON response should have a root key in it.\n\n      *Doesn't apply to JSONAPISerializer.*\n\n      Defaults to true, so a request for an author looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link'\n        }\n      }\n      ```\n\n      Setting `root` to false disables this:\n\n      ```js\n      Serializer.extend({\n        root: false\n      });\n      ```\n\n      Now the response looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        id: 1,\n        name: 'Link'\n      }\n      ```\n\n      @property root\n      @public\n    */\n    this.root = this.root || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Set whether related models should be embedded or sideloaded.\n\n      *Doesn't apply to JSONAPISerializer.*\n\n      By default this false, so relationships are sideloaded:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPostIds: [1, 2]\n        },\n        blogPosts: [\n          { id: 1, authorId: 1, title: 'Lorem' },\n          { id: 2, authorId: 1, title: 'Ipsum' }\n        ]\n      }\n      ```\n\n      Setting `embed` to true will embed all related records:\n\n      ```js\n      Serializer.extend({\n        embed: true\n      });\n      ```\n\n      Now the response looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPosts: [\n            { id: 1, authorId: 1, title: 'Lorem' },\n            { id: 2, authorId: 1, title: 'Ipsum' }\n          ]\n        }\n      }\n      ```\n\n      You can also define `embed` as a function so it can be determined dynamically.\n    */\n    this.embed = this.embed || undefined; // this is just here so I can add the doc comment. Better way?\n    this._embedFn = isFunction(this.embed) ? this.embed : () => !!this.embed;\n\n    /**\n      Use this to define how your serializer handles serializing relationship keys. It can take one of three values:\n\n      - `included`, which is the default, will serialize the ids of a relationship if that relationship is included (sideloaded) along with the model or collection in the response\n      - `always` will always serialize the ids of all relationships for the model or collection in the response\n      - `never` will never serialize the ids of relationships for the model or collection in the response\n\n      @property serializeIds\n      @public\n    */\n    this.serializeIds = this.serializeIds || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Primary Key name of the model\n\n      Defaults to 'id', so a request for an author looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link'\n        }\n      }\n      ```\n\n      Setting `primaryKey` to 'authorId changes this:\n\n      ```js\n      Serializer.extend({\n        primaryKey: 'authorId'\n      });\n      ```\n\n      Now the response looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          authorId: 1,\n          name: 'Link'\n        }\n      }\n      ```\n\n      @property primaryKey\n      @public\n    */\n    this.primaryKey = this.primaryKey || undefined; // this is just here so I can add the doc comment. Better way?\n  }\n\n  /**\n    Override this method to implement your own custom serialize function. *response* is whatever was returned from your route handler, and *request* is the Pretender request object.\n\n    Returns a plain JavaScript object or array, which Mirage uses as the response data to your app's XHR request.\n\n    You can also override this method, call super, and manipulate the data before Mirage responds with it. This is a great place to add metadata, or for one-off operations that don't fit neatly into any of Mirage's other abstractions:\n\n    ```js\n    serialize(object, request) {\n      // This is how to call super, as Mirage borrows [Backbone's implementation of extend](http://backbonejs.org/#Model-extend)\n      let json = Serializer.prototype.serialize.apply(this, arguments);\n\n      // Add metadata, sort parts of the response, etc.\n\n      return json;\n    }\n    ```\n\n    @param primaryResource\n    @param request\n    @return { Object } the json response\n   */\n  serialize(primaryResource /* , request */) {\n    this.primaryResource = primaryResource;\n\n    return this.buildPayload(primaryResource);\n  }\n\n  /**\n    This method is used by the POST and PUT shorthands. These shorthands expect a valid JSON:API document as part of the request, so that they know how to create or update the appropriate resouce. The *normalize* method allows you to transform your request body into a JSON:API document, which lets you take advantage of the shorthands when you otherwise may not be able to.\n\n    Note that this method is a noop if you're using JSON:API already, since request payloads sent along with POST and PUT requests will already be in the correct format.\n\n    Take a look at the included `ActiveModelSerializer`'s normalize method for an example.\n\n    @method normalize\n    @param json\n    @public\n   */\n  normalize(json) {\n    return json;\n  }\n\n  buildPayload(primaryResource, toInclude, didSerialize, json) {\n    if (!primaryResource && isEmpty(toInclude)) {\n      return json;\n    } else if (primaryResource) {\n      let [resourceHash, newIncludes] =\n        this.getHashForPrimaryResource(primaryResource);\n      let newDidSerialize = this.isCollection(primaryResource)\n        ? primaryResource.models\n        : [primaryResource];\n\n      return this.buildPayload(\n        undefined,\n        newIncludes,\n        newDidSerialize,\n        resourceHash\n      );\n    } else {\n      let nextIncludedResource = toInclude.shift();\n      let [resourceHash, newIncludes] =\n        this.getHashForIncludedResource(nextIncludedResource);\n\n      let newToInclude = newIncludes\n        .filter((resource) => {\n          return !didSerialize\n            .map((m) => m.toString())\n            .includes(resource.toString());\n        })\n        .concat(toInclude);\n      let newDidSerialize = (\n        this.isCollection(nextIncludedResource)\n          ? nextIncludedResource.models\n          : [nextIncludedResource]\n      ).concat(didSerialize);\n      let newJson = this.mergePayloads(json, resourceHash);\n\n      return this.buildPayload(\n        undefined,\n        newToInclude,\n        newDidSerialize,\n        newJson\n      );\n    }\n  }\n\n  getHashForPrimaryResource(resource) {\n    let [hash, addToIncludes] = this.getHashForResource(resource);\n    let hashWithRoot;\n\n    if (this.root) {\n      assert(\n        !(resource instanceof PolymorphicCollection),\n        `The base Serializer class cannot serialize a top-level PolymorphicCollection when root is true, since PolymorphicCollections have no type.`\n      );\n\n      let serializer = this.serializerFor(resource.modelName);\n      let rootKey = serializer.keyForResource(resource);\n      hashWithRoot = { [rootKey]: hash };\n    } else {\n      hashWithRoot = hash;\n    }\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForIncludedResource(resource) {\n    let hashWithRoot, addToIncludes;\n\n    if (resource instanceof PolymorphicCollection) {\n      hashWithRoot = {};\n      addToIncludes = resource.models;\n    } else {\n      let serializer = this.serializerFor(resource.modelName);\n      let [hash, newModels] = serializer.getHashForResource(resource);\n\n      // Included resources always have a root, and are always pushed to an array.\n      let rootKey = serializer.keyForRelationship(resource.modelName);\n      hashWithRoot = Array.isArray(hash)\n        ? { [rootKey]: hash }\n        : { [rootKey]: [hash] };\n      addToIncludes = newModels;\n    }\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForResource(\n    resource,\n    removeForeignKeys = false,\n    didSerialize = {},\n    lookupSerializer = false\n  ) {\n    let serializer = this;\n    let hash;\n\n    // PolymorphicCollection lacks a modelName, but is dealt with in the map\n    // by looking up the serializer on a per-model basis\n    if (lookupSerializer && resource.modelName) {\n      serializer = this.serializerFor(resource.modelName);\n    }\n\n    if (this.isModel(resource)) {\n      hash = serializer._hashForModel(\n        resource,\n        removeForeignKeys,\n        didSerialize\n      );\n    } else {\n      hash = resource.models.map((m) => {\n        let modelSerializer = serializer;\n\n        if (!modelSerializer) {\n          // Can't get here if lookupSerializer is false, so look it up\n          modelSerializer = this.serializerFor(m.modelName);\n        }\n\n        return modelSerializer._hashForModel(\n          m,\n          removeForeignKeys,\n          didSerialize\n        );\n      });\n    }\n\n    let addToIncludes = uniqBy(\n      compact(\n        flatten(\n          serializer.getKeysForIncluded().map((key) => {\n            if (this.isCollection(resource)) {\n              return resource.models.map((m) => m[key]);\n            } else {\n              return resource[key];\n            }\n          })\n        )\n      ),\n      (m) => m.toString()\n    );\n\n    return [hash, addToIncludes];\n  }\n\n  /*\n    Merges new resource hash into json. If json already has root key,\n    pushes value of resourceHash onto that key.\n\n    For example,\n\n        json = {\n          post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },\n          comments: [\n            { id: 1, text: 'foo' }\n          ]\n        };\n\n        resourceHash = {\n          comments: [\n            { id: 2, text: 'bar' }\n          ]\n        };\n\n    would yield\n\n        {\n          post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },\n          comments: [\n            { id: 1, text: 'foo' },\n            { id: 2, text: 'bar' }\n          ]\n        };\n\n  */\n  mergePayloads(json, resourceHash) {\n    let newJson;\n    let [resourceHashKey] = Object.keys(resourceHash);\n\n    if (json[resourceHashKey]) {\n      newJson = json;\n      newJson[resourceHashKey] = json[resourceHashKey].concat(\n        resourceHash[resourceHashKey]\n      );\n    } else {\n      newJson = Object.assign(json, resourceHash);\n    }\n\n    return newJson;\n  }\n\n  keyForResource(resource) {\n    let { modelName } = resource;\n    return this.isModel(resource)\n      ? this.keyForModel(modelName)\n      : this.keyForCollection(modelName);\n  }\n\n  /**\n    Used to define a custom key when serializing a primary model of modelName *modelName*. For example, the default Serializer will return something like the following:\n\n    ```\n    GET /blogPosts/1\n\n    {\n      blogPost: {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n    }\n    ```\n\n    If your API uses hyphenated keys, you could overwrite `keyForModel`:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForModel(modelName) {\n        return hyphenate(modelName);\n      }\n    });\n    ```\n\n    Now the response will look like\n\n    ```\n    {\n      'blog-post': {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n    }\n    ```\n\n    @method keyForModel\n    @param modelName\n    @public\n   */\n  keyForModel(modelName) {\n    return camelize(modelName);\n  }\n\n  /**\n    Used to customize the key when serializing a primary collection. By default this pluralizes the return value of `keyForModel`.\n\n    For example, by default the following request may look like:\n\n    ```\n    GET /blogPosts\n\n    {\n      blogPosts: [\n        {\n          id: 1,\n          title: 'Lorem ipsum'\n        },\n        ...\n      ]\n    }\n    ```\n\n    If your API hyphenates keys, you could overwrite `keyForCollection`:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForCollection(modelName) {\n        return this._container.inflector.pluralize(dasherize(modelName));\n      }\n    });\n    ```\n\n    Now the response would look like:\n\n    ```\n    {\n      'blog-posts': [\n        {\n          id: 1,\n          title: 'Lorem ipsum'\n        },\n        ...\n      ]\n    }\n    ```\n\n    @method keyForCollection\n    @param modelName\n    @public\n   */\n  keyForCollection(modelName) {\n    return this._container.inflector.pluralize(this.keyForModel(modelName));\n  }\n\n  _hashForModel(model, removeForeignKeys, didSerialize = {}) {\n    let attrs = this._attrsForModel(model);\n\n    if (removeForeignKeys) {\n      model.fks.forEach((fk) => {\n        delete attrs[fk];\n      });\n    }\n\n    if (this.embed) {\n      let newDidSerialize = Object.assign({}, didSerialize);\n      newDidSerialize[model.modelName] = newDidSerialize[model.modelName] || {};\n      newDidSerialize[model.modelName][model.id] = true;\n\n      this.getKeysForEmbedded().forEach((key) => {\n        let associatedResource = model[key];\n        if (\n          associatedResource &&\n          !get(\n            newDidSerialize,\n            `${associatedResource.modelName}.${associatedResource.id}`\n          )\n        ) {\n          let [associatedResourceHash] = this.getHashForResource(\n            associatedResource,\n            true,\n            newDidSerialize,\n            true\n          );\n          let formattedKey = this.keyForEmbeddedRelationship(key);\n          attrs[formattedKey] = associatedResourceHash;\n\n          if (this.isModel(associatedResource)) {\n            let fk = `${camelize(key)}Id`;\n            delete attrs[fk];\n          }\n        }\n      });\n    }\n\n    return this._maybeAddAssociationIds(model, attrs);\n  }\n\n  /**\n    @method _attrsForModel\n    @param model\n    @private\n    @hide\n   */\n  _attrsForModel(model) {\n    let attrs = {};\n\n    if (this.attrs) {\n      attrs = this.attrs.reduce((memo, attr) => {\n        memo[attr] = model[attr];\n        return memo;\n      }, {});\n    } else {\n      attrs = Object.assign(attrs, model.attrs);\n    }\n\n    // Remove fks\n    model.fks.forEach((key) => delete attrs[key]);\n\n    return this._formatAttributeKeys(attrs);\n  }\n\n  /**\n    @method _maybeAddAssociationIds\n    @param model\n    @param attrs\n    @private\n    @hide\n   */\n  _maybeAddAssociationIds(model, attrs) {\n    let newHash = Object.assign({}, attrs);\n\n    if (this.serializeIds === \"always\") {\n      [...model.associationKeys]\n        .filter((key) => !this._embedFn(key))\n        .forEach((key) => {\n          let resource = model[key];\n          let association = model.associationFor(key);\n\n          if (this.isCollection(resource)) {\n            let formattedKey = this.keyForRelationshipIds(key);\n            newHash[formattedKey] =\n              model[`${this._container.inflector.singularize(key)}Ids`];\n          } else if (this.isModel(resource) && association.isPolymorphic) {\n            let formattedTypeKey = this.keyForPolymorphicForeignKeyType(key);\n            let formattedIdKey = this.keyForPolymorphicForeignKeyId(key);\n\n            newHash[formattedTypeKey] = model[`${key}Id`].type;\n            newHash[formattedIdKey] = model[`${key}Id`].id;\n          } else if (resource) {\n            let formattedKey = this.keyForForeignKey(key);\n            newHash[formattedKey] = model[`${key}Id`];\n          }\n        });\n    } else if (this.serializeIds === \"included\") {\n      this.getKeysForIncluded().forEach((key) => {\n        let resource = model[key];\n        let association = model.associationFor(key);\n\n        if (this.isCollection(resource)) {\n          let formattedKey = this.keyForRelationshipIds(key);\n\n          newHash[formattedKey] =\n            model[`${this._container.inflector.singularize(key)}Ids`];\n        } else if (this.isModel(resource) && association.isPolymorphic) {\n          let formattedTypeKey = this.keyForPolymorphicForeignKeyType(key);\n          let formattedIdKey = this.keyForPolymorphicForeignKeyId(key);\n\n          newHash[formattedTypeKey] = model[`${key}Id`].type;\n          newHash[formattedIdKey] = model[`${key}Id`].id;\n        } else if (this.isModel(resource)) {\n          let formattedKey = this.keyForForeignKey(key);\n\n          newHash[formattedKey] = model[`${key}Id`];\n        }\n      });\n    }\n\n    return newHash;\n  }\n\n  /**\n    Used to customize how a model's attribute is formatted in your JSON payload.\n\n    By default, model attributes are camelCase:\n\n    ```\n    GET /authors/1\n\n    {\n      author: {\n        firstName: 'Link',\n        lastName: 'The WoodElf'\n      }\n    }\n    ```\n\n    If your API expects snake case, you could write the following:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForAttribute(attr) {\n        return underscore(attr);\n      }\n    });\n    ```\n\n    Now the response would look like:\n\n    ```\n    {\n      author: {\n        first_name: 'Link',\n        last_name: 'The WoodElf'\n      }\n    }\n    ```\n\n    @method keyForAttribute\n    @param attr\n    @public\n   */\n  keyForAttribute(attr) {\n    if (attr === \"id\") {\n      return this.keyForId();\n    }\n\n    return attr;\n  }\n\n  /**\n    Use this hook to format the key for collections related to this model. *modelName* is the named parameter for the relationship.\n\n    For example, if you're serializing an `author` that\n    sideloads many `blogPosts`, the default response will look like:\n\n    ```\n    {\n      author: {...},\n      blogPosts: [...]\n    }\n    ```\n\n    Overwrite `keyForRelationship` to format this key:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForRelationship(modelName) {\n        return underscore(modelName);\n      }\n    });\n    ```\n\n    Now the response will look like this:\n\n    ```\n    {\n      author: {...},\n      blog_posts: [...]\n    }\n    ```\n\n    @method keyForRelationship\n    @param modelName\n    @public\n   */\n  keyForRelationship(modelName) {\n    return camelize(this._container.inflector.pluralize(modelName));\n  }\n\n  /**\n    Like `keyForRelationship`, but for embedded relationships.\n\n    @method keyForEmbeddedRelationship\n    @param attributeName\n    @public\n   */\n  keyForEmbeddedRelationship(attributeName) {\n    return camelize(attributeName);\n  }\n\n  /**\n    Use this hook to format the key for the IDS of a `hasMany` relationship\n    in this model's JSON representation.\n\n    For example, if you're serializing an `author` that\n    sideloads many `blogPosts`, by default your `author` JSON would include a `blogPostIds` key:\n\n    ```\n    {\n      author: {\n        id: 1,\n        blogPostIds: [1, 2, 3]\n      },\n      blogPosts: [...]\n    }\n    ```\n\n    Overwrite `keyForRelationshipIds` to format this key:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForRelationshipIds(relationship) {\n        return underscore(relationship) + '_ids';\n      }\n    });\n    ```\n\n    Now the response will look like:\n\n    ```\n    {\n      author: {\n        id: 1,\n        blog_post_ids: [1, 2, 3]\n      },\n      blogPosts: [...]\n    }\n    ```\n\n    @method keyForRelationshipIds\n    @param modelName\n    @public\n   */\n  keyForRelationshipIds(relationshipName) {\n    return `${this._container.inflector.singularize(\n      camelize(relationshipName)\n    )}Ids`;\n  }\n\n  /**\n    Like `keyForRelationshipIds`, but for `belongsTo` relationships.\n\n    For example, if you're serializing a `blogPost` that sideloads one `author`,\n    your `blogPost` JSON would include a `authorId` key:\n\n    ```\n    {\n      blogPost: {\n        id: 1,\n        authorId: 1\n      },\n      author: ...\n    }\n    ```\n\n    Overwrite `keyForForeignKey` to format this key:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForForeignKey(relationshipName) {\n        return underscore(relationshipName) + '_id';\n      }\n    });\n    ```\n\n    Now the response will look like:\n\n    ```js\n    {\n      blogPost: {\n        id: 1,\n        author_id: 1\n      },\n      author: ...\n    }\n    ```\n\n    @method keyForForeignKey\n    @param relationshipName\n    @public\n   */\n  keyForForeignKey(relationshipName) {\n    return `${camelize(relationshipName)}Id`;\n  }\n\n  /**\n    Polymorphic relationships are represented with type-id pairs.\n\n    Given the following model\n\n    ```js\n    Model.extend({\n      commentable: belongsTo({ polymorphic: true })\n    });\n    ```\n\n    the default Serializer would produce\n\n    ```js\n    {\n      comment: {\n        id: 1,\n        commentableType: 'post',\n        commentableId: '1'\n      }\n    }\n    ```\n\n    This hook controls how the `id` field (`commentableId` in the above example)\n    is serialized. By default it camelizes the relationship and adds `Id` as a suffix.\n\n    @method keyForPolymorphicForeignKeyId\n    @param {String} relationshipName\n    @return {String}\n    @public\n  */\n  keyForPolymorphicForeignKeyId(relationshipName) {\n    return `${camelize(relationshipName)}Id`;\n  }\n\n  /**\n    Polymorphic relationships are represented with type-id pairs.\n\n    Given the following model\n\n    ```js\n    Model.extend({\n      commentable: belongsTo({ polymorphic: true })\n    });\n    ```\n\n    the default Serializer would produce\n\n    ```js\n    {\n      comment: {\n        id: 1,\n        commentableType: 'post',\n        commentableId: '1'\n      }\n    }\n    ```\n\n    This hook controls how the `type` field (`commentableType` in the above example)\n    is serialized. By default it camelizes the relationship and adds `Type` as a suffix.\n\n    @method keyForPolymorphicForeignKeyType\n    @param {String} relationshipName\n    @return {String}\n    @public\n  */\n  keyForPolymorphicForeignKeyType(relationshipName) {\n    return `${camelize(relationshipName)}Type`;\n  }\n\n  /**\n    @method isModel\n    @param object\n    @return {Boolean}\n    @public\n    @hide\n   */\n  isModel(object) {\n    return object instanceof Model;\n  }\n\n  /**\n    @method isCollection\n    @param object\n    @return {Boolean}\n    @public\n    @hide\n   */\n  isCollection(object) {\n    return (\n      object instanceof Collection || object instanceof PolymorphicCollection\n    );\n  }\n\n  /**\n    @method isModelOrCollection\n    @param object\n    @return {Boolean}\n    @public\n    @hide\n   */\n  isModelOrCollection(object) {\n    return this.isModel(object) || this.isCollection(object);\n  }\n\n  /**\n    @method serializerFor\n    @param type\n    @public\n    @hide\n   */\n  serializerFor(type) {\n    return this.registry.serializerFor(type);\n  }\n\n  getAssociationKeys() {\n    return isFunction(this.include)\n      ? this.include(this.request, this.primaryResource)\n      : this.include;\n  }\n\n  getKeysForEmbedded() {\n    return this.getAssociationKeys().filter((k) => this._embedFn(k));\n  }\n\n  getKeysForIncluded() {\n    return this.getAssociationKeys().filter((k) => !this._embedFn(k));\n  }\n\n  /**\n    A reference to the schema instance.\n\n    Useful to reference registered schema information, for example in a Serializer's include hook to include all a resource's associations:\n\n    ```js\n    Serializer.extend({\n      include(request, resource) {\n        return Object.keys(this.schema.associationsFor(resource.modelName));\n      }\n    })\n    ```\n\n    @property\n    @type {Object}\n    @public\n  */\n  get schema() {\n    return this.registry.schema;\n  }\n\n  /**\n    Used to customize how a model's primary key is formatted in your JSON payload.\n\n    By default, this is 'id'\n\n    ```\n    GET /authors/1\n\n    {\n      author: {\n        id: '1',\n        firstName: 'Link',\n        lastName: 'The WoodElf'\n      }\n    }\n    ```\n\n    If your API expects a different primary key, you could write the following:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForId() {\n        return 'authorId';\n      }\n    });\n    ```\n\n    Now the response would look like:\n\n    ```\n    {\n      author: {\n        authorId: '1',\n        firstName: 'Link',\n        lastName: 'The WoodElf'\n      }\n    }\n    ```\n\n    See the property `primaryKey` for a shorthand way of doing this on a model serializer\n\n    @method keyForId\n    @public\n   */\n  keyForId() {\n    return this.primaryKey;\n  }\n\n  /**\n    Used to customize how a model's primary key value is formatted in your JSON payload.\n\n    By default, the primary key is a string\n\n    ```\n    GET /authors/1\n\n    {\n      author: {\n        id: '1',\n        firstName: 'Link',\n        lastName: 'The WoodElf'\n      }\n    }\n    ```\n\n    If your API expects a integers, you could write the following:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      valueForId(value) {\n        return parseInt(value);\n      }\n    });\n    ```\n\n    Now the response would look like:\n\n    ```\n    {\n      author: {\n        authorId: 1,\n        firstName: 'Link',\n        lastName: 'The WoodElf'\n      }\n    }\n    ```\n\n    @method valueForId\n    @param value\n    @public\n   */\n  valueForId(value) {\n    return value;\n  }\n\n  /**\n    @method _formatAttributeKeys\n    @param attrs\n    @private\n    @hide\n   */\n  _formatAttributeKeys(attrs) {\n    let formattedAttrs = {};\n\n    for (let key in attrs) {\n      let formattedValue = attrs[key];\n      if (key === \"id\") {\n        formattedValue = this.valueForId(formattedValue);\n      }\n\n      let formattedKey = this.keyForAttribute(key);\n      formattedAttrs[formattedKey] = formattedValue;\n    }\n\n    return formattedAttrs;\n  }\n\n  getCoalescedIds(/* request */) {}\n}\n\n// Defaults\nSerializer.prototype.include = [];\nSerializer.prototype.root = true;\nSerializer.prototype.embed = false;\nSerializer.prototype.primaryKey = \"id\";\nSerializer.prototype.serializeIds = \"included\"; // can be 'included', 'always', or 'never'\n\nSerializer.extend = extend;\n\nexport default Serializer;\n", "import Serializer from \"../serializer\";\nimport { dasherize, camelize } from \"../utils/inflector\";\nimport assert from \"../assert\";\nimport get from \"lodash/get\";\nimport flatten from \"lodash/flatten\";\nimport compact from \"lodash/compact\";\nimport uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\n/**\n  The JSONAPISerializer. Subclass of Serializer.\n\n  @class JSONAPISerializer\n  @constructor\n  @public\n */\nclass JSONAPISerializer extends Serializer {\n  constructor() {\n    super(...arguments);\n\n    /**\n      By default, JSON:API's linkage data is only added for relationships that are being included in the current request.\n\n      That means given an `author` model with a `posts` relationship, a GET request to /authors/1 would return a JSON:API document with an empty `relationships` hash:\n\n      ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... }\n        }\n      }\n      ```\n\n      but a request to GET /authors/1?include=posts would have linkage data added (in addition to the included resources):\n\n      ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... },\n          relationships: {\n            data: [\n              { type: 'posts', id: '1' },\n              { type: 'posts', id: '2' },\n              { type: 'posts', id: '3' }\n            ]\n          }\n        },\n        included: [ ... ]\n      }\n      ```\n\n      To add the linkage data for all relationships, you could set `alwaysIncludeLinkageData` to `true`:\n\n      ```js\n      JSONAPISerializer.extend({\n        alwaysIncludeLinkageData: true\n      });\n      ```\n\n      Then, a GET to /authors/1 would respond with\n\n      ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... },\n          relationships: {\n            posts: {\n              data: [\n                { type: 'posts', id: '1' },\n                { type: 'posts', id: '2' },\n                { type: 'posts', id: '3' }\n              ]\n            }\n          }\n        }\n      }\n      ```\n\n      even though the related `posts` are not included in the same document.\n\n      You can also use the `links` method (on the Serializer base class) to add relationship links (which will always be added regardless of the relationship is being included document), or you could use `shouldIncludeLinkageData` for more granular control.\n\n      For more background on the behavior of this API, see [this blog post](http://www.ember-cli-mirage.com/blog/changing-mirages-default-linkage-data-behavior-1475).\n\n      @property alwaysIncludeLinkageData\n      @type {Boolean}\n      @public\n    */\n    this.alwaysIncludeLinkageData = this.alwaysIncludeLinkageData || undefined; // this is just here so I can add the doc comment. Better way?\n  }\n\n  // Don't think this is used?\n  keyForModel(modelName) {\n    return dasherize(modelName);\n  }\n\n  // Don't think this is used?\n  keyForCollection(modelName) {\n    return dasherize(modelName);\n  }\n\n  /**\n    Used to customize the key for an attribute. By default, compound attribute names are dasherized.\n\n    For example, the JSON:API document for a `post` model with a `commentCount` attribute would be:\n\n    ```js\n    {\n      data: {\n        id: 1,\n        type: 'posts',\n        attributes: {\n          'comment-count': 28\n        }\n      }\n    }\n    ```\n\n    @method keyForAttribute\n    @param {String} attr\n    @return {String}\n    @public\n  */\n  keyForAttribute(attr) {\n    return dasherize(attr);\n  }\n\n  /**\n    Used to customize the key for a relationships. By default, compound relationship names are dasherized.\n\n    For example, the JSON:API document for an `author` model with a `blogPosts` relationship would be:\n\n    ```js\n    {\n      data: {\n        id: 1,\n        type: 'author',\n        attributes: {\n          ...\n        },\n        relationships: {\n          'blog-posts': {\n            ...\n          }\n        }\n      }\n    }\n    ```\n\n    @method keyForRelationship\n    @param {String} key\n    @return {String}\n    @public\n  */\n  keyForRelationship(key) {\n    return dasherize(key);\n  }\n\n  /**\n    Use this hook to add top-level `links` data to JSON:API resource objects. The argument is the model being serialized.\n\n    ```js\n    // serializers/author.js\n    import { JSONAPISerializer } from 'miragejs';\n\n    export default JSONAPISerializer.extend({\n\n      links(author) {\n        return {\n          'posts': {\n            related: `/api/authors/${author.id}/posts`\n          }\n        };\n      }\n\n    });\n    ```\n\n    @method links\n    @param model\n  */\n  links() {}\n\n  getHashForPrimaryResource(resource) {\n    this._createRequestedIncludesGraph(resource);\n\n    let resourceHash = this.getHashForResource(resource);\n    let hashWithRoot = { data: resourceHash };\n    let addToIncludes = this.getAddToIncludesForResource(resource);\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForIncludedResource(resource) {\n    let serializer = this.serializerFor(resource.modelName);\n    let hash = serializer.getHashForResource(resource);\n    let hashWithRoot = { included: this.isModel(resource) ? [hash] : hash };\n    let addToIncludes = [];\n\n    if (!this.hasQueryParamIncludes()) {\n      addToIncludes = this.getAddToIncludesForResource(resource);\n    }\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForResource(resource) {\n    let hash;\n\n    if (this.isModel(resource)) {\n      hash = this.getResourceObjectForModel(resource);\n    } else {\n      hash = resource.models.map((m) => this.getResourceObjectForModel(m));\n    }\n\n    return hash;\n  }\n\n  /*\n    Returns a flat unique list of resources that need to be added to includes\n  */\n  getAddToIncludesForResource(resource) {\n    let relationshipPaths;\n\n    if (this.hasQueryParamIncludes()) {\n      relationshipPaths = this.getQueryParamIncludes();\n    } else {\n      let serializer = this.serializerFor(resource.modelName);\n      relationshipPaths = serializer.getKeysForIncluded();\n    }\n\n    return this.getAddToIncludesForResourceAndPaths(\n      resource,\n      relationshipPaths\n    );\n  }\n\n  getAddToIncludesForResourceAndPaths(resource, relationshipPaths) {\n    let includes = [];\n\n    relationshipPaths.forEach((path) => {\n      let relationshipNames = path.split(\".\");\n\n      let newIncludes = this.getIncludesForResourceAndPath(\n        resource,\n        ...relationshipNames\n      );\n      includes.push(newIncludes);\n    });\n\n    return uniqBy(compact(flatten(includes)), (m) => m.toString());\n  }\n\n  getIncludesForResourceAndPath(resource, ...names) {\n    let nameForCurrentResource = camelize(names.shift());\n    let includes = [];\n    let modelsToAdd = [];\n\n    if (this.isModel(resource)) {\n      let relationship = resource[nameForCurrentResource];\n\n      if (this.isModel(relationship)) {\n        modelsToAdd = [relationship];\n      } else if (this.isCollection(relationship)) {\n        modelsToAdd = relationship.models;\n      }\n    } else {\n      resource.models.forEach((model) => {\n        let relationship = model[nameForCurrentResource];\n\n        if (this.isModel(relationship)) {\n          modelsToAdd.push(relationship);\n        } else if (this.isCollection(relationship)) {\n          modelsToAdd = modelsToAdd.concat(relationship.models);\n        }\n      });\n    }\n\n    includes = includes.concat(modelsToAdd);\n\n    if (names.length) {\n      modelsToAdd.forEach((model) => {\n        includes = includes.concat(\n          this.getIncludesForResourceAndPath(model, ...names)\n        );\n      });\n    }\n\n    return includes;\n  }\n\n  getResourceObjectForModel(model) {\n    let attrs = this._attrsForModel(model, true);\n    delete attrs.id;\n\n    let hash = {\n      type: this.typeKeyForModel(model),\n      id: model.id,\n      attributes: attrs,\n    };\n\n    return this._maybeAddRelationshipsToResourceObjectForModel(hash, model);\n  }\n\n  _maybeAddRelationshipsToResourceObjectForModel(hash, model) {\n    const relationships = {};\n\n    model.associationKeys.forEach((key) => {\n      let relationship = model[key];\n      let relationshipKey = this.keyForRelationship(key);\n      let relationshipHash = {};\n\n      if (this.hasLinksForRelationship(model, key)) {\n        let serializer = this.serializerFor(model.modelName);\n        let links = serializer.links(model);\n        relationshipHash.links = links[key];\n      }\n\n      if (\n        this.alwaysIncludeLinkageData ||\n        this.shouldIncludeLinkageData(key, model) ||\n        this._relationshipIsIncludedForModel(key, model)\n      ) {\n        let data = null;\n        if (this.isModel(relationship)) {\n          data = {\n            type: this.typeKeyForModel(relationship),\n            id: relationship.id,\n          };\n        } else if (this.isCollection(relationship)) {\n          data = relationship.models.map((model) => {\n            return {\n              type: this.typeKeyForModel(model),\n              id: model.id,\n            };\n          });\n        }\n        relationshipHash.data = data;\n      }\n\n      if (!isEmpty(relationshipHash)) {\n        relationships[relationshipKey] = relationshipHash;\n      }\n    });\n\n    if (!isEmpty(relationships)) {\n      hash.relationships = relationships;\n    }\n\n    return hash;\n  }\n\n  hasLinksForRelationship(model, relationshipKey) {\n    let serializer = this.serializerFor(model.modelName);\n    let links = serializer.links && serializer.links(model);\n\n    return links && links[relationshipKey] != null;\n  }\n\n  /*\n    This code (and a lot of this serializer) need to be re-worked according to\n    the graph logic...\n  */\n  _relationshipIsIncludedForModel(relationshipKey, model) {\n    if (this.hasQueryParamIncludes()) {\n      let graph = this.request._includesGraph;\n      let graphKey = this._graphKeyForModel(model);\n\n      // Find the resource in the graph\n      let graphResource;\n\n      // Check primary data\n      if (graph.data[graphKey]) {\n        graphResource = graph.data[graphKey];\n\n        // Check includes\n      } else if (\n        graph.included[this._container.inflector.pluralize(model.modelName)]\n      ) {\n        graphResource =\n          graph.included[this._container.inflector.pluralize(model.modelName)][\n            graphKey\n          ];\n      }\n\n      // If the model's in the graph, check if relationshipKey should be included\n      return (\n        graphResource &&\n        graphResource.relationships &&\n        Object.prototype.hasOwnProperty.call(\n          graphResource.relationships,\n          dasherize(relationshipKey)\n        )\n      );\n    } else {\n      let relationshipPaths = this.getKeysForIncluded();\n\n      return relationshipPaths.includes(relationshipKey);\n    }\n  }\n\n  /*\n    This is needed for _relationshipIsIncludedForModel - see the note there for\n    more background.\n\n    If/when we can refactor this serializer, the logic in this method would\n    probably be the basis for the new overall json/graph creation.\n  */\n  _createRequestedIncludesGraph(primaryResource, secondaryResource = null) {\n    let graph = {\n      data: {},\n    };\n\n    if (this.isModel(primaryResource)) {\n      let primaryResourceKey = this._graphKeyForModel(primaryResource);\n      graph.data[primaryResourceKey] = {};\n\n      this._addPrimaryModelToRequestedIncludesGraph(graph, primaryResource);\n    } else if (this.isCollection(primaryResource)) {\n      primaryResource.models.forEach((model) => {\n        let primaryResourceKey = this._graphKeyForModel(model);\n        graph.data[primaryResourceKey] = {};\n\n        this._addPrimaryModelToRequestedIncludesGraph(graph, model);\n      });\n    }\n\n    // Hack :/ Need to think of a better palce to put this if\n    // refactoring json:api serializer.\n    this.request._includesGraph = graph;\n  }\n\n  _addPrimaryModelToRequestedIncludesGraph(graph, model) {\n    if (this.hasQueryParamIncludes()) {\n      let graphKey = this._graphKeyForModel(model);\n\n      this.getQueryParamIncludes()\n        .filter((item) => !!item.trim())\n        .forEach((includesPath) => {\n          // includesPath is post.comments, for example\n          graph.data[graphKey].relationships =\n            graph.data[graphKey].relationships || {};\n\n          let relationshipKeys = includesPath.split(\".\").map(dasherize);\n          let relationshipKey = relationshipKeys[0];\n          let graphRelationshipKey = relationshipKey;\n          let normalizedRelationshipKey = camelize(relationshipKey);\n          let hasAssociation = model.associationKeys.has(\n            normalizedRelationshipKey\n          );\n\n          assert(\n            hasAssociation,\n            `You tried to include \"${relationshipKey}\" with ${model} but no association named \"${normalizedRelationshipKey}\" is defined on the model.`\n          );\n\n          let relationship = model[normalizedRelationshipKey];\n          let relationshipData;\n\n          if (this.isModel(relationship)) {\n            relationshipData = this._graphKeyForModel(relationship);\n          } else if (this.isCollection(relationship)) {\n            relationshipData = relationship.models.map(this._graphKeyForModel);\n          } else {\n            relationshipData = null;\n          }\n\n          graph.data[graphKey].relationships[graphRelationshipKey] =\n            relationshipData;\n\n          if (relationship) {\n            this._addResourceToRequestedIncludesGraph(\n              graph,\n              relationship,\n              relationshipKeys.slice(1)\n            );\n          }\n        });\n    }\n  }\n\n  _addResourceToRequestedIncludesGraph(graph, resource, relationshipNames) {\n    graph.included = graph.included || {};\n\n    let models = this.isCollection(resource) ? resource.models : [resource];\n\n    models.forEach((model) => {\n      let collectionName = this._container.inflector.pluralize(model.modelName);\n      graph.included[collectionName] = graph.included[collectionName] || {};\n\n      this._addModelToRequestedIncludesGraph(graph, model, relationshipNames);\n    });\n  }\n\n  _addModelToRequestedIncludesGraph(graph, model, relationshipNames) {\n    let collectionName = this._container.inflector.pluralize(model.modelName);\n    let resourceKey = this._graphKeyForModel(model);\n    graph.included[collectionName][resourceKey] =\n      graph.included[collectionName][resourceKey] || {};\n\n    if (relationshipNames.length) {\n      this._addResourceRelationshipsToRequestedIncludesGraph(\n        graph,\n        collectionName,\n        resourceKey,\n        model,\n        relationshipNames\n      );\n    }\n  }\n\n  /*\n    Lot of the same logic here from _addPrimaryModelToRequestedIncludesGraph, could refactor & share\n  */\n  _addResourceRelationshipsToRequestedIncludesGraph(\n    graph,\n    collectionName,\n    resourceKey,\n    model,\n    relationshipNames\n  ) {\n    graph.included[collectionName][resourceKey].relationships =\n      graph.included[collectionName][resourceKey].relationships || {};\n\n    let relationshipName = relationshipNames[0];\n    let relationship = model[camelize(relationshipName)];\n    let relationshipData;\n\n    if (this.isModel(relationship)) {\n      relationshipData = this._graphKeyForModel(relationship);\n    } else if (this.isCollection(relationship)) {\n      relationshipData = relationship.models.map(this._graphKeyForModel);\n    }\n    graph.included[collectionName][resourceKey].relationships[\n      relationshipName\n    ] = relationshipData;\n\n    if (relationship) {\n      this._addResourceToRequestedIncludesGraph(\n        graph,\n        relationship,\n        relationshipNames.slice(1)\n      );\n    }\n  }\n\n  _graphKeyForModel(model) {\n    return `${model.modelName}:${model.id}`;\n  }\n\n  getQueryParamIncludes() {\n    let includes = get(this, \"request.queryParams.include\");\n\n    if (includes && !Array.isArray(includes)) {\n      includes = includes.split(\",\");\n    }\n\n    return includes;\n  }\n\n  hasQueryParamIncludes() {\n    return !!this.getQueryParamIncludes();\n  }\n\n  /**\n    Used to customize the `type` field of the document. By default, pluralizes and dasherizes the model's `modelName`.\n\n    For example, the JSON:API document for a `blogPost` model would be:\n\n    ```js\n    {\n      data: {\n        id: 1,\n        type: 'blog-posts'\n      }\n    }\n    ```\n\n    @method typeKeyForModel\n    @param {Model} model\n    @return {String}\n    @public\n  */\n  typeKeyForModel(model) {\n    return dasherize(this._container.inflector.pluralize(model.modelName));\n  }\n\n  getCoalescedIds(request) {\n    let ids = request.queryParams && request.queryParams[\"filter[id]\"];\n    if (typeof ids === \"string\") {\n      return ids.split(\",\");\n    }\n    return ids;\n  }\n\n  /**\n    Allows for per-relationship inclusion of linkage data. Use this when `alwaysIncludeLinkageData` is not granular enough.\n\n    ```js\n    export default JSONAPISerializer.extend({\n      shouldIncludeLinkageData(relationshipKey, model) {\n        if (relationshipKey === 'author' || relationshipKey === 'ghostWriter') {\n          return true;\n        }\n        return false;\n      }\n    });\n    ```\n\n    @method shouldIncludeLinkageData\n    @param {String} relationshipKey\n    @param {Model} model\n    @return {Boolean}\n    @public\n  */\n  shouldIncludeLinkageData(relationshipKey, model) {\n    return false;\n  }\n}\n\nJSONAPISerializer.prototype.alwaysIncludeLinkageData = false;\n\nexport default JSONAPISerializer;\n", "import Model from \"./orm/model\";\nimport Collection from \"./orm/collection\";\nimport PolymorphicCollection from \"./orm/polymorphic-collection\";\nimport Serializer from \"./serializer\";\nimport JsonApiSerializer from \"./serializers/json-api-serializer\";\nimport { camelize } from \"./utils/inflector\";\nimport assert from \"./assert\";\n\n/**\n * @hide\n */\nexport default class SerializerRegistry {\n  constructor(schema, serializerMap = {}, server) {\n    this.schema = schema;\n    this._serializerMap = serializerMap;\n  }\n\n  normalize(payload, modelName) {\n    return this.serializerFor(modelName).normalize(payload);\n  }\n\n  serialize(response, request) {\n    this.request = request;\n\n    if (this._isModelOrCollection(response)) {\n      let serializer = this.serializerFor(response.modelName);\n\n      return serializer.serialize(response, request);\n    } else if (Array.isArray(response) && response.some(this._isCollection)) {\n      return response.reduce((json, collection) => {\n        let serializer = this.serializerFor(collection.modelName);\n\n        if (serializer.embed) {\n          json[this._container.inflector.pluralize(collection.modelName)] =\n            serializer.serialize(collection, request);\n        } else {\n          json = Object.assign(json, serializer.serialize(collection, request));\n        }\n\n        return json;\n      }, {});\n    } else {\n      return response;\n    }\n  }\n\n  serializerFor(type, { explicit = false } = {}) {\n    let SerializerForResponse =\n      type && this._serializerMap && this._serializerMap[camelize(type)];\n\n    if (explicit) {\n      assert(\n        !!SerializerForResponse,\n        `You passed in ${type} as an explicit serializer type but that serializer doesn't exist.`\n      );\n    } else {\n      SerializerForResponse =\n        SerializerForResponse || this._serializerMap.application || Serializer;\n\n      assert(\n        !SerializerForResponse ||\n          SerializerForResponse.prototype.embed ||\n          SerializerForResponse.prototype.root ||\n          new SerializerForResponse() instanceof JsonApiSerializer,\n        \"You cannot have a serializer that sideloads (embed: false) and disables the root (root: false).\"\n      );\n    }\n\n    return new SerializerForResponse(this, type, this.request);\n  }\n\n  _isModel(object) {\n    return object instanceof Model;\n  }\n\n  _isCollection(object) {\n    return (\n      object instanceof Collection || object instanceof PolymorphicCollection\n    );\n  }\n\n  _isModelOrCollection(object) {\n    return this._isModel(object) || this._isCollection(object);\n  }\n\n  registerSerializers(newSerializerMaps) {\n    let currentSerializerMap = this._serializerMap || {};\n    this._serializerMap = Object.assign(\n      currentSerializerMap,\n      newSerializerMaps\n    );\n  }\n\n  getCoalescedIds(request, modelName) {\n    return this.serializerFor(modelName).getCoalescedIds(request);\n  }\n}\n", "import { camelize, dasherize } from \"../utils/inflector\";\nimport Association from \"./associations/association\";\nimport Collection from \"./collection\";\nimport assert from \"../assert\";\nimport forIn from \"lodash/forIn\";\n\nconst collectionNameCache = {};\nconst internalCollectionNameCache = {};\nconst modelNameCache = {};\n\n/**\n  The primary use of the `Schema` class is to use it to find Models and Collections via the `Model` class methods.\n\n  The `Schema` is most often accessed via the first parameter to a route handler:\n\n  ```js\n  this.get('posts', schema => {\n    return schema.posts.where({ isAdmin: false });\n  });\n  ```\n\n  It is also available from the `.schema` property of a `server` instance:\n\n  ```js\n  server.schema.users.create({ name: 'Yehuda' });\n  ```\n\n  To work with the Model or Collection returned from one of the methods below, refer to the instance methods in the API docs for the `Model` and `Collection` classes.\n\n  @class Schema\n  @constructor\n  @public\n */\nexport default class Schema {\n  constructor(db, modelsMap = {}) {\n    assert(db, \"A schema requires a db\");\n\n    /**\n      Returns Mirage's database. See the `Db` docs for the db's API.\n\n      @property db\n      @type {Object}\n      @public\n    */\n    this.db = db;\n    this._registry = {};\n    this._dependentAssociations = { polymorphic: [] };\n    this.registerModels(modelsMap);\n    this.isSaving = {}; // a hash of models that are being saved, used to avoid cycles\n  }\n\n  /**\n    @method registerModels\n    @param hash\n    @public\n    @hide\n   */\n  registerModels(hash = {}) {\n    forIn(hash, (model, key) => {\n      this.registerModel(key, hash[key]);\n    });\n  }\n\n  /**\n    @method registerModel\n    @param type\n    @param ModelClass\n    @public\n    @hide\n   */\n  registerModel(type, ModelClass) {\n    let camelizedModelName = camelize(type);\n    let modelName = dasherize(camelizedModelName);\n\n    // Avoid mutating original class, because we may want to reuse it across many tests\n    ModelClass = ModelClass.extend();\n\n    // Store model & fks in registry\n    // TODO: don't think this is needed anymore\n    this._registry[camelizedModelName] = this._registry[camelizedModelName] || {\n      class: null,\n      foreignKeys: [],\n    }; // we may have created this key before, if another model added fks to it\n    this._registry[camelizedModelName].class = ModelClass;\n\n    // TODO: set here, remove from model#constructor\n    ModelClass.prototype._schema = this;\n    ModelClass.prototype.modelName = modelName;\n    // Set up associations\n    ModelClass.prototype.hasManyAssociations = {}; // a registry of the model's hasMany associations. Key is key from model definition, value is association instance itself\n    ModelClass.prototype.hasManyAssociationFks = {}; // a lookup table to get the hasMany association by foreignKey\n    ModelClass.prototype.belongsToAssociations = {}; // a registry of the model's belongsTo associations. Key is key from model definition, value is association instance itself\n    ModelClass.prototype.belongsToAssociationFks = {}; // a lookup table to get the belongsTo association by foreignKey\n    ModelClass.prototype.associationKeys = new Set(); // ex: address.user, user.addresses\n    ModelClass.prototype.associationIdKeys = new Set(); // ex: address.user_id, user.address_ids\n    ModelClass.prototype.dependentAssociations = []; // a registry of associations that depend on this model, needed for deletion cleanup.\n\n    let fksAddedFromThisModel = {};\n    for (let associationProperty in ModelClass.prototype) {\n      if (ModelClass.prototype[associationProperty] instanceof Association) {\n        let association = ModelClass.prototype[associationProperty];\n        association.name = associationProperty;\n        association.modelName =\n          association.modelName || this.toModelName(associationProperty);\n        association.ownerModelName = modelName;\n        association.setSchema(this);\n\n        // Update the registry with this association's foreign keys. This is\n        // essentially our \"db migration\", since we must know about the fks.\n        let [fkHolder, fk] = association.getForeignKeyArray();\n\n        fksAddedFromThisModel[fkHolder] = fksAddedFromThisModel[fkHolder] || [];\n        assert(\n          !fksAddedFromThisModel[fkHolder].includes(fk),\n          `Your '${type}' model definition has multiple possible inverse relationships of type '${fkHolder}'. Please use explicit inverses.`\n        );\n        fksAddedFromThisModel[fkHolder].push(fk);\n\n        this._addForeignKeyToRegistry(fkHolder, fk);\n\n        // Augment the Model's class with any methods added by this association\n        association.addMethodsToModelClass(ModelClass, associationProperty);\n      }\n    }\n\n    // Create a db collection for this model, if doesn't exist\n    let collection = this.toCollectionName(modelName);\n    if (!this.db[collection]) {\n      this.db.createCollection(collection);\n    }\n\n    // Create the entity methods\n    this[collection] = {\n      camelizedModelName,\n      new: (attrs) => this.new(camelizedModelName, attrs),\n      create: (attrs) => this.create(camelizedModelName, attrs),\n      all: (attrs) => this.all(camelizedModelName, attrs),\n      find: (attrs) => this.find(camelizedModelName, attrs),\n      findBy: (attrs) => this.findBy(camelizedModelName, attrs),\n      findOrCreateBy: (attrs) => this.findOrCreateBy(camelizedModelName, attrs),\n      where: (attrs) => this.where(camelizedModelName, attrs),\n      none: (attrs) => this.none(camelizedModelName, attrs),\n      first: (attrs) => this.first(camelizedModelName, attrs),\n    };\n\n    return this;\n  }\n\n  /**\n    @method modelFor\n    @param type\n    @public\n    @hide\n   */\n  modelFor(type) {\n    return this._registry[type];\n  }\n\n  /**\n    Create a new unsaved model instance with attributes *attrs*.\n\n    ```js\n    let post = blogPosts.new({ title: 'Lorem ipsum' });\n    post.title;   // Lorem ipsum\n    post.id;      // null\n    post.isNew(); // true\n    ```\n\n    @method new\n    @param type\n    @param attrs\n    @public\n   */\n  new(type, attrs) {\n    return this._instantiateModel(dasherize(type), attrs);\n  }\n\n  /**\n    Create a new model instance with attributes *attrs*, and insert it into the database.\n\n    ```js\n    let post = blogPosts.create({title: 'Lorem ipsum'});\n    post.title;   // Lorem ipsum\n    post.id;      // 1\n    post.isNew(); // false\n    ```\n\n    @method create\n    @param type\n    @param attrs\n    @public\n   */\n  create(type, attrs) {\n    return this.new(type, attrs).save();\n  }\n\n  /**\n    Return all models in the database.\n\n    ```js\n    let posts = blogPosts.all();\n    // [post:1, post:2, ...]\n    ```\n\n    @method all\n    @param type\n    @public\n   */\n  all(type) {\n    let collection = this.collectionForType(type);\n\n    return this._hydrate(collection, dasherize(type));\n  }\n\n  /**\n    Return an empty collection of type `type`.\n\n    @method none\n    @param type\n    @public\n   */\n  none(type) {\n    return this._hydrate([], dasherize(type));\n  }\n\n  /**\n    Return one or many models in the database by id.\n\n    ```js\n    let post = blogPosts.find(1);\n    let posts = blogPosts.find([1, 3, 4]);\n    ```\n\n    @method find\n    @param type\n    @param ids\n    @public\n   */\n  find(type, ids) {\n    let collection = this.collectionForType(type);\n    let records = collection.find(ids);\n\n    if (Array.isArray(ids)) {\n      assert(\n        records.length === ids.length,\n        `Couldn't find all ${this._container.inflector.pluralize(\n          type\n        )} with ids: (${ids.join(\",\")}) (found ${\n          records.length\n        } results, but was looking for ${ids.length})`\n      );\n    }\n\n    return this._hydrate(records, dasherize(type));\n  }\n\n  /**\n    Returns the first model in the database that matches the key-value pairs in `attrs`. Note that a string comparison is used.\n\n    ```js\n    let post = blogPosts.findBy({ published: true });\n    let post = blogPosts.findBy({ authorId: 1, published: false });\n    let post = blogPosts.findBy({ author: janeSmith, featured: true });\n    ```\n\n    This will return `null` if the schema doesn't have any matching record.\n\n    A predicate function can also be used to find a match.\n\n    ```js\n    let longPost = blogPosts.findBy((post) => post.body.length > 1000);\n    ```\n\n    @method findBy\n    @param type\n    @param attributesOrPredicate\n    @public\n   */\n  findBy(type, query) {\n    let collection = this.collectionForType(type);\n    let record = collection.findBy(query);\n\n    return this._hydrate(record, dasherize(type));\n  }\n\n  /**\n    Returns the first model in the database that matches the key-value pairs in `attrs`, or creates a record with the attributes if one is not found.\n\n    ```js\n    // Find the first published blog post, or create a new one.\n    let post = blogPosts.findOrCreateBy({ published: true });\n    ```\n\n    @method findOrCreateBy\n    @param type\n    @param attributeName\n    @public\n   */\n  findOrCreateBy(type, attrs) {\n    let collection = this.collectionForType(type);\n    let record = collection.findBy(attrs);\n    let model;\n\n    if (!record) {\n      model = this.create(type, attrs);\n    } else {\n      model = this._hydrate(record, dasherize(type));\n    }\n\n    return model;\n  }\n\n  /**\n    Return an ORM/Collection, which represents an array of models from the database matching `query`.\n\n    If `query` is an object, its key-value pairs will be compared against records using string comparison.\n\n    `query` can also be a compare function.\n\n    ```js\n    let posts = blogPosts.where({ published: true });\n    let posts = blogPosts.where(post => post.published === true);\n    ```\n\n    @method where\n    @param type\n    @param query\n    @public\n   */\n  where(type, query) {\n    let collection = this.collectionForType(type);\n    let records = collection.where(query);\n\n    return this._hydrate(records, dasherize(type));\n  }\n\n  /**\n    Returns the first model in the database.\n\n    ```js\n    let post = blogPosts.first();\n    ```\n\n    N.B. This will return `null` if the schema doesn't contain any records.\n\n    @method first\n    @param type\n    @public\n   */\n  first(type) {\n    let collection = this.collectionForType(type);\n    let record = collection[0];\n\n    return this._hydrate(record, dasherize(type));\n  }\n\n  /**\n    @method modelClassFor\n    @param modelName\n    @public\n    @hide\n   */\n  modelClassFor(modelName) {\n    let model = this._registry[camelize(modelName)];\n\n    assert(model, `Model not registered: ${modelName}`);\n\n    return model.class.prototype;\n  }\n\n  /*\n    This method updates the dependentAssociations registry, which is used to\n    keep track of which models depend on a given association. It's used when\n    deleting models - their dependents need to be looked up and foreign keys\n    updated.\n\n    For example,\n\n        schema = {\n          post: Model.extend(),\n          comment: Model.extend({\n            post: belongsTo()\n          })\n        };\n\n        comment1.post = post1;\n        ...\n        post1.destroy()\n\n    Deleting this post should clear out comment1's foreign key.\n\n    Polymorphic associations can have _any_ other model as a dependent, so we\n    handle them separately.\n  */\n  addDependentAssociation(association, modelName) {\n    if (association.isPolymorphic) {\n      this._dependentAssociations.polymorphic.push(association);\n    } else {\n      this._dependentAssociations[modelName] =\n        this._dependentAssociations[modelName] || [];\n      this._dependentAssociations[modelName].push(association);\n    }\n  }\n\n  dependentAssociationsFor(modelName) {\n    let directDependents = this._dependentAssociations[modelName] || [];\n    let polymorphicAssociations = this._dependentAssociations.polymorphic || [];\n\n    return directDependents.concat(polymorphicAssociations);\n  }\n\n  /**\n    Returns an object containing the associations registered for the model of the given _modelName_.\n\n    For example, given this configuration\n    \n    ```js\n    import { createServer, Model, hasMany, belongsTo } from 'miragejs'\n\n    let server = createServer({\n      models: {\n        user: Model,\n        article: Model.extend({\n          fineAuthor: belongsTo(\"user\"),\n          comments: hasMany()\n        }),\n        comment: Model\n      }\n    })\n    ```\n\n    each of the following would return empty objects\n\n    ```js\n    server.schema.associationsFor('user')\n    // {}\n    server.schema.associationsFor('comment')\n    // {}\n    ```\n\n    but the associations for the `article` would return\n\n    ```js\n    server.schema.associationsFor('article')\n\n    // {\n    //   fineAuthor: BelongsToAssociation,\n    //   comments: HasManyAssociation\n    // }\n    ```\n\n    Check out the docs on the Association class to see what fields are available for each association.\n\n    @method associationsFor\n    @param {String} modelName\n    @return {Object}\n    @public\n  */\n  associationsFor(modelName) {\n    let modelClass = this.modelClassFor(modelName);\n\n    return Object.assign(\n      {},\n      modelClass.belongsToAssociations,\n      modelClass.hasManyAssociations\n    );\n  }\n\n  hasModelForModelName(modelName) {\n    return this.modelFor(camelize(modelName));\n  }\n\n  /*\n    Private methods\n  */\n\n  /**\n    @method collectionForType\n    @param type\n    @private\n    @hide\n   */\n  collectionForType(type) {\n    let collection = this.toCollectionName(type);\n    assert(\n      this.db[collection],\n      `You're trying to find model(s) of type ${type} but this collection doesn't exist in the database.`\n    );\n\n    return this.db[collection];\n  }\n\n  toCollectionName(type) {\n    if (typeof collectionNameCache[type] !== \"string\") {\n      let modelName = dasherize(type);\n\n      const collectionName = camelize(\n        this._container.inflector.pluralize(modelName)\n      );\n\n      collectionNameCache[type] = collectionName;\n    }\n\n    return collectionNameCache[type];\n  }\n\n  // This is to get at the underlying Db collection. Poorly named... need to\n  // refactor to DbTable or something.\n  toInternalCollectionName(type) {\n    if (typeof internalCollectionNameCache[type] !== \"string\") {\n      const internalCollectionName = `_${this.toCollectionName(type)}`;\n\n      internalCollectionNameCache[type] = internalCollectionName;\n    }\n\n    return internalCollectionNameCache[type];\n  }\n\n  toModelName(type) {\n    if (typeof modelNameCache[type] !== \"string\") {\n      let dasherized = dasherize(type);\n\n      const modelName = this._container.inflector.singularize(dasherized);\n\n      modelNameCache[type] = modelName;\n    }\n\n    return modelNameCache[type];\n  }\n\n  /**\n    @method _addForeignKeyToRegistry\n    @param type\n    @param fk\n    @private\n    @hide\n   */\n  _addForeignKeyToRegistry(type, fk) {\n    this._registry[type] = this._registry[type] || {\n      class: null,\n      foreignKeys: [],\n    };\n\n    let fks = this._registry[type].foreignKeys;\n    if (!fks.includes(fk)) {\n      fks.push(fk);\n    }\n  }\n\n  /**\n    @method _instantiateModel\n    @param modelName\n    @param attrs\n    @private\n    @hide\n   */\n  _instantiateModel(modelName, attrs) {\n    let ModelClass = this._modelFor(modelName);\n    let fks = this._foreignKeysFor(modelName);\n\n    return new ModelClass(this, modelName, attrs, fks);\n  }\n\n  /**\n    @method _modelFor\n    @param modelName\n    @private\n    @hide\n   */\n  _modelFor(modelName) {\n    return this._registry[camelize(modelName)].class;\n  }\n\n  /**\n    @method _foreignKeysFor\n    @param modelName\n    @private\n    @hide\n   */\n  _foreignKeysFor(modelName) {\n    return this._registry[camelize(modelName)].foreignKeys;\n  }\n\n  /**\n    Takes a record and returns a model, or an array of records\n    and returns a collection.\n   *\n    @method _hydrate\n    @param records\n    @param modelName\n    @private\n    @hide\n   */\n  _hydrate(records, modelName) {\n    if (Array.isArray(records)) {\n      let models = records.map(function (record) {\n        return this._instantiateModel(modelName, record);\n      }, this);\n      return new Collection(modelName, models);\n    } else if (records) {\n      return this._instantiateModel(modelName, records);\n    } else {\n      return null;\n    }\n  }\n}\n", "import { singularize, pluralize } from \"inflected\";\nimport Db from \"./db\";\nimport Association from \"./orm/associations/association\";\nimport RouteHandler from \"./route-handler\";\nimport BaseRouteHandler from \"./route-handlers/base\";\nimport Serializer from \"./serializer\";\nimport SerializerRegistry from \"./serializer-registry\";\nimport Schema from \"./orm/schema\";\n\nconst classes = {\n  Db,\n  Association,\n  RouteHandler,\n  BaseRouteHandler,\n  Serializer,\n  SerializerRegistry,\n  Schema,\n};\n\nlet defaultInflector = { singularize, pluralize };\n\n/**\n  Lightweight DI container for customizable objects that are needed by\n  deeply nested classes.\n\n  @class Container\n  @hide\n */\nclass Container {\n  constructor() {\n    this.inflector = defaultInflector;\n  }\n\n  register(key, value) {\n    this[key] = value;\n  }\n\n  create(className, ...args) {\n    let Class = classes[className];\n    Class.prototype._container = this;\n\n    return new Class(...args);\n  }\n}\n\n/**\n  These are side effects. We give each class a default container so it can be\n  easily unit tested.\n\n  We should remove these once we have test coverage and can refactor to a proper\n  DI system.\n*/\nlet defaultContainer = new Container();\n\nDb.prototype._container = defaultContainer;\nAssociation.prototype._container = defaultContainer;\nBaseRouteHandler.prototype._container = defaultContainer;\nRouteHandler.prototype._container = defaultContainer;\nSerializer.prototype._container = defaultContainer;\nSerializerRegistry.prototype._container = defaultContainer;\nSchema.prototype._container = defaultContainer;\n\nexport default Container;\n", "import \"@miragejs/pretender-node-polyfill/before\";\nimport Pretender from \"pretender\";\nimport \"@miragejs/pretender-node-polyfill/after\";\nimport assert from \"../assert\";\nimport assign from \"lodash/assign\";\n\n/**\n  Mirage Interceptor Class\n\n    urlPrefix;\n\n    namespace;\n\n    // Creates the interceptor instance\n    constructor(mirageServer, mirageConfig)\n\n    // Allow you to change some of the config options after the server is created\n    config(mirageConfig)\n\n    // These are the equivalent of the functions that were on the Mirage Server.\n    // Those Mirage Server functions are redirected to the Interceptors functions for\n    // backward compatibility\n    get\n    post\n    put\n    delete\n    del\n    patch\n    head\n    options\n\n    // Start the interceptor. (Optional) this happens after the mirage server has been completed configured\n    // and all the models, routes, etc have been defined.\n    start\n    // Shutdown the interceptor instance\n    shutdown\n\n */\n\n/**\n @hide\n */\nconst defaultPassthroughs = [\n  \"http://localhost:0/chromecheckurl\", // mobile chrome\n  \"http://localhost:30820/socket.io\", // electron\n  (request) => {\n    return /.+\\.hot-update.json$/.test(request.url);\n  },\n];\n\nconst defaultRouteOptions = {\n  coalesce: false,\n  timing: undefined,\n};\n\n/**\n * Determine if the object contains a valid option.\n *\n * @method isOption\n * @param {Object} option An object with one option value pair.\n * @return {Boolean} True if option is a valid option, false otherwise.\n * @private\n */\nfunction isOption(option) {\n  if (!option || typeof option !== \"object\") {\n    return false;\n  }\n\n  let allOptions = Object.keys(defaultRouteOptions);\n  let optionKeys = Object.keys(option);\n  for (let i = 0; i < optionKeys.length; i++) {\n    let key = optionKeys[i];\n    if (allOptions.indexOf(key) > -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n @hide\n */\nexport { defaultPassthroughs };\n\n/**\n * Extract arguments for a route.\n *\n * @method extractRouteArguments\n * @param {Array} args Of the form [options], [object, code], [function, code]\n * [shorthand, options], [shorthand, code, options]\n * @return {Array} [handler (i.e. the function, object or shorthand), code,\n * options].\n */\nfunction extractRouteArguments(args) {\n  let [lastArg] = args.splice(-1);\n  if (isOption(lastArg)) {\n    lastArg = assign({}, defaultRouteOptions, lastArg);\n  } else {\n    args.push(lastArg);\n    lastArg = defaultRouteOptions;\n  }\n  let t = 2 - args.length;\n  while (t-- > 0) {\n    args.push(undefined);\n  }\n  args.push(lastArg);\n  return args;\n}\n\nexport default class PretenderConfig {\n  urlPrefix;\n\n  namespace;\n\n  timing;\n\n  passthroughChecks;\n\n  pretender;\n\n  mirageServer;\n\n  trackRequests;\n\n  create(mirageServer, config) {\n    this.mirageServer = mirageServer;\n    this.pretender = this._create(mirageServer, config);\n\n    /**\n     Mirage uses [pretender.js](https://github.com/trek/pretender) as its xhttp interceptor. In your Mirage config, `this.pretender` refers to the actual Pretender instance, so any config options that work there will work here as well.\n\n     ```js\n     createServer({\n        routes() {\n          this.pretender.handledRequest = (verb, path, request) => {\n            console.log(`Your server responded to ${path}`);\n          }\n        }\n      })\n     ```\n\n     Refer to [Pretender's docs](https://github.com/pretenderjs/pretender) if you want to change any options on your Pretender instance.\n\n     @property pretender\n     @return {Object} The Pretender instance\n     @public\n     */\n    mirageServer.pretender = this.pretender;\n\n    this.passthroughChecks = this.passthroughChecks || [];\n\n    this.config(config);\n\n    [\n      [\"get\"],\n      [\"post\"],\n      [\"put\"],\n      [\"delete\", \"del\"],\n      [\"patch\"],\n      [\"head\"],\n      [\"options\"],\n    ].forEach(([verb, alias]) => {\n      this[verb] = (path, ...args) => {\n        let [rawHandler, customizedCode, options] = extractRouteArguments(args);\n        let handler = mirageServer.registerRouteHandler(\n          verb,\n          path,\n          rawHandler,\n          customizedCode,\n          options\n        );\n        let fullPath = this._getFullPath(path);\n        let timing =\n          options.timing !== undefined ? options.timing : () => this.timing;\n        return this.pretender?.[verb](fullPath, handler, timing);\n      };\n\n      mirageServer[verb] = this[verb];\n      if (alias) {\n        this[alias] = this[verb];\n        mirageServer[alias] = this[verb];\n      }\n    });\n  }\n\n  config(config) {\n    let useDefaultPassthroughs =\n      typeof config.useDefaultPassthroughs !== \"undefined\"\n        ? config.useDefaultPassthroughs\n        : true;\n    if (useDefaultPassthroughs) {\n      this._configureDefaultPassthroughs();\n    }\n\n    let didOverridePretenderConfig =\n      config.trackRequests !== undefined &&\n      config.trackRequests !== this.trackRequests;\n    assert(\n      !didOverridePretenderConfig,\n      \"You cannot modify Pretender's request tracking once the server is created\"\n    );\n\n    /**\n     Set the number of milliseconds for the the Server's response time.\n\n     By default there's a 400ms delay during development, and 0 delay in testing (so your tests run fast).\n\n     ```js\n     createServer({\n        routes() {\n          this.timing = 400; // default\n        }\n      })\n     ```\n\n     To set the timing for individual routes, see the `timing` option for route handlers.\n\n     @property timing\n     @type Number\n     @public\n     */\n    this.timing = config.timing ?? this.timing ?? 400;\n\n    /**\n     Sets a string to prefix all route handler URLs with.\n\n     Useful if your app makes API requests to a different port.\n\n     ```js\n     createServer({\n        routes() {\n          this.urlPrefix = 'http://localhost:8080'\n        }\n      })\n     ```\n     */\n    this.urlPrefix = this.urlPrefix || config.urlPrefix || \"\";\n\n    /**\n     Set the base namespace used for all routes defined with `get`, `post`, `put` or `del`.\n\n     For example,\n\n     ```js\n     createServer({\n        routes() {\n          this.namespace = '/api';\n\n          // this route will handle the URL '/api/contacts'\n          this.get('/contacts', 'contacts');\n        }\n      })\n     ```\n\n     Note that only routes defined after `this.namespace` are affected. This is useful if you have a few one-off routes that you don't want under your namespace:\n\n     ```js\n     createServer({\n        routes() {\n\n          // this route handles /auth\n          this.get('/auth', function() { ...});\n\n          this.namespace = '/api';\n          // this route will handle the URL '/api/contacts'\n          this.get('/contacts', 'contacts');\n        };\n      })\n     ```\n\n     If your app is loaded from the filesystem vs. a server (e.g. via Cordova or Electron vs. `localhost` or `https://yourhost.com/`), you will need to explicitly define a namespace. Likely values are `/` (if requests are made with relative paths) or `https://yourhost.com/api/...` (if requests are made to a defined server).\n\n     For a sample implementation leveraging a configured API host & namespace, check out [this issue comment](https://github.com/miragejs/ember-cli-mirage/issues/497#issuecomment-183458721).\n\n     @property namespace\n     @type String\n     @public\n     */\n    this.namespace = this.namespace || config.namespace || \"\";\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _configureDefaultPassthroughs() {\n    defaultPassthroughs.forEach((passthroughUrl) => {\n      this.passthrough(passthroughUrl);\n    });\n  }\n\n  /**\n   * Creates a new Pretender instance.\n   *\n   * @method _create\n   * @param {Server} server\n   * @return {Object} A new Pretender instance.\n   * @public\n   */\n  _create(mirageServer, config) {\n    if (typeof window !== \"undefined\") {\n      this.trackRequests = config.trackRequests || false;\n      return new Pretender(\n        function () {\n          this.passthroughRequest = function (verb, path, request) {\n            if (mirageServer.shouldLog()) {\n              console.log(\n                `Mirage: Passthrough request for ${verb.toUpperCase()} ${\n                  request.url\n                }`\n              );\n            }\n          };\n\n          this.handledRequest = function (verb, path, request) {\n            if (mirageServer.shouldLog()) {\n              console.groupCollapsed(\n                `Mirage: [${request.status}] ${verb.toUpperCase()} ${\n                  request.url\n                }`\n              );\n              let { requestBody, responseText } = request;\n              let loggedRequest, loggedResponse;\n\n              try {\n                loggedRequest = JSON.parse(requestBody);\n              } catch (e) {\n                loggedRequest = requestBody;\n              }\n\n              try {\n                loggedResponse = JSON.parse(responseText);\n              } catch (e) {\n                loggedResponse = responseText;\n              }\n\n              console.groupCollapsed(\"Response\");\n              console.log(loggedResponse);\n              console.groupEnd();\n\n              console.groupCollapsed(\"Request (data)\");\n              console.log(loggedRequest);\n              console.groupEnd();\n\n              console.groupCollapsed(\"Request (raw)\");\n              console.log(request);\n              console.groupEnd();\n\n              console.groupEnd();\n            }\n          };\n\n          let originalCheckPassthrough = this.checkPassthrough;\n          this.checkPassthrough = function (request) {\n            let shouldPassthrough = mirageServer.passthroughChecks.some(\n              (passthroughCheck) => passthroughCheck(request)\n            );\n\n            if (shouldPassthrough) {\n              let url = request.url.includes(\"?\")\n                ? request.url.substr(0, request.url.indexOf(\"?\"))\n                : request.url;\n\n              this[request.method.toLowerCase()](url, this.passthrough);\n            }\n\n            return originalCheckPassthrough.apply(this, arguments);\n          };\n\n          this.unhandledRequest = function (verb, path) {\n            path = decodeURI(path);\n            let namespaceError = \"\";\n            if (this.namespace === \"\") {\n              namespaceError =\n                \"There is no existing namespace defined. Please define one\";\n            } else {\n              namespaceError = `The existing namespace is ${this.namespace}`;\n            }\n            assert(\n              `Your app tried to ${verb} '${path}', but there was no route defined to handle this request. Define a route for this endpoint in your routes() config. Did you forget to define a namespace? ${namespaceError}`\n            );\n          };\n        },\n        { trackRequests: this.trackRequests }\n      );\n    }\n  }\n\n  /**\n   By default, if your app makes a request that is not defined in your server config, Mirage will throw an error. You can use `passthrough` to whitelist requests, and allow them to pass through your Mirage server to the actual network layer.\n\n   Note: Put all passthrough config at the bottom of your routes, to give your route handlers precedence.\n\n   To ignore paths on your current host (as well as configured `namespace`), use a leading `/`:\n\n   ```js\n   this.passthrough('/addresses');\n   ```\n\n   You can also pass a list of paths, or call `passthrough` multiple times:\n\n   ```js\n   this.passthrough('/addresses', '/contacts');\n   this.passthrough('/something');\n   this.passthrough('/else');\n   ```\n\n   These lines will allow all HTTP verbs to pass through. If you want only certain verbs to pass through, pass an array as the last argument with the specified verbs:\n\n   ```js\n   this.passthrough('/addresses', ['post']);\n   this.passthrough('/contacts', '/photos', ['get']);\n   ```\n\n   You can pass a function to `passthrough` to do a runtime check on whether or not the request should be handled by Mirage. If the function returns `true` Mirage will not handle the request and let it pass through.\n\n   ```js\n   this.passthrough(request => {\n      return request.queryParams.skipMirage;\n    });\n   ```\n\n   If you want all requests on the current domain to pass through, simply invoke the method with no arguments:\n\n   ```js\n   this.passthrough();\n   ```\n\n   Note again that the current namespace (i.e. any `namespace` property defined above this call) will be applied.\n\n   You can also allow other-origin hosts to passthrough. If you use a fully-qualified domain name, the `namespace` property will be ignored. Use two * wildcards to match all requests under a path:\n\n   ```js\n   this.passthrough('http://api.foo.bar/**');\n   this.passthrough('http://api.twitter.com/v1/cards/**');\n   ```\n\n   In versions of Pretender prior to 0.12, `passthrough` only worked with jQuery >= 2.x. As long as you're on Pretender@0.12 or higher, you should be all set.\n\n   @method passthrough\n   @param {String} [...paths] Any number of paths to whitelist\n   @param {Array} options Unused\n   @public\n   */\n  passthrough(...paths) {\n    // this only works in browser-like environments for now. in node users will have to configure\n    // their own interceptor if they are using one.\n    if (typeof window !== \"undefined\") {\n      let verbs = [\"get\", \"post\", \"put\", \"delete\", \"patch\", \"options\", \"head\"];\n      let lastArg = paths[paths.length - 1];\n\n      if (paths.length === 0) {\n        paths = [\"/**\", \"/\"];\n      } else if (paths.length > 1 && Array.isArray(lastArg)) {\n        verbs = paths.pop();\n      }\n\n      paths.forEach((path) => {\n        if (typeof path === \"function\") {\n          this.passthroughChecks.push(path);\n        } else {\n          verbs.forEach((verb) => {\n            let fullPath = this._getFullPath(path);\n            this.pretender[verb](fullPath, this.pretender.passthrough);\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Builds a full path for Pretender to monitor based on the `path` and\n   * configured options (`urlPrefix` and `namespace`).\n   *\n   * @private\n   * @hide\n   */\n  _getFullPath(path) {\n    path = path[0] === \"/\" ? path.slice(1) : path;\n    let fullPath = \"\";\n    let urlPrefix = this.urlPrefix ? this.urlPrefix.trim() : \"\";\n    let namespace = \"\";\n\n    // if there is a urlPrefix and a namespace\n    if (this.urlPrefix && this.namespace) {\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        namespace = this.namespace\n          .substring(0, this.namespace.length - 1)\n          .substring(1);\n      }\n\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = this.namespace.substring(1);\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        namespace = this.namespace.substring(0, this.namespace.length - 1);\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = this.namespace;\n      }\n    }\n\n    // if there is a namespace and no urlPrefix\n    if (this.namespace && !this.urlPrefix) {\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        namespace = this.namespace.substring(0, this.namespace.length - 1);\n      }\n\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = this.namespace;\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        let namespaceSub = this.namespace.substring(\n          0,\n          this.namespace.length - 1\n        );\n        namespace = `/${namespaceSub}`;\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = `/${this.namespace}`;\n      }\n    }\n\n    // if no namespace\n    if (!this.namespace) {\n      namespace = \"\";\n    }\n\n    // check to see if path is a FQDN. if so, ignore any urlPrefix/namespace that was set\n    if (/^https?:\\/\\//.test(path)) {\n      fullPath += path;\n    } else {\n      // otherwise, if there is a urlPrefix, use that as the beginning of the path\n      if (urlPrefix.length) {\n        fullPath +=\n          urlPrefix[urlPrefix.length - 1] === \"/\" ? urlPrefix : `${urlPrefix}/`;\n      }\n\n      // add the namespace to the path\n      fullPath += namespace;\n\n      // add a trailing slash to the path if it doesn't already contain one\n      if (fullPath[fullPath.length - 1] !== \"/\") {\n        fullPath += \"/\";\n      }\n\n      // finally add the configured path\n      fullPath += path;\n\n      // if we're making a same-origin request, ensure a / is prepended and\n      // dedup any double slashes\n      if (!/^https?:\\/\\//.test(fullPath)) {\n        fullPath = `/${fullPath}`;\n        fullPath = fullPath.replace(/\\/+/g, \"/\");\n      }\n    }\n\n    return fullPath;\n  }\n\n  start() {\n    // unneeded for pretender implementation\n  }\n\n  shutdown() {\n    this.pretender.shutdown();\n  }\n}\n", "/* eslint no-console: 0 */\n\nimport { camelize } from \"./utils/inflector\";\nimport isAssociation from \"./utils/is-association\";\nimport assert from \"./assert\";\nimport BelongsTo from \"./orm/associations/belongs-to\";\nimport Container from \"./container\";\nimport { singularize, pluralize } from \"inflected\";\nimport pick from \"lodash/pick\";\nimport assign from \"lodash/assign\";\nimport find from \"lodash/find\";\nimport isPlainObject from \"lodash/isPlainObject\";\nimport isInteger from \"lodash/isInteger\";\n\nimport PretenderConfig from \"./mock-server/pretender-config\";\n\nconst isPluralForModelCache = {};\n\nconst defaultInflector = { singularize, pluralize };\n\n/**\n * Creates a Server\n * @param {Object} options Server's configuration object\n * @param {String} options.urlPrefix The base URL for the routes. Example: `http://miragejs.com`.\n * @param {String} options.namespace The default namespace for the `Server`. Example: `/api/v1`.\n * @param {Number} options.timing Default latency for the routes to respond to a request.\n * @param {String} options.environment Defines the environment of the `Server`.\n * @param {Boolean} options.trackRequests Pretender `trackRequests`.\n * @param {Boolean} options.useDefaultPassthroughs True to use mirage provided passthroughs\n * @param {Boolean} options.logging Set to true or false to explicitly specify logging behavior.\n * @param {Function} options.seeds Called on the seed phase. Should be used to seed the database.\n * @param {Function} options.scenarios Alias for seeds.\n * @param {Function} options.routes Should be used to define server routes.\n * @param {Function} options.baseConfig Alias for routes.\n * @param {Object} options.inflector Default inflector (used for pluralization and singularization).\n * @param {Object} options.identityManagers Database identity managers.\n * @param {Object} options.models Server models\n * @param {Object} options.serializers Server serializers\n * @param {Object} options.factories Server factories\n * @param {Object} options.pretender Pretender instance\n */\nexport function createServer(options) {\n  return new Server(options);\n}\n\n/**\n  The Mirage server.\n\n  Note that `this` within your `routes` function refers to the server instance, which is the same instance that `server` refers to in your tests.\n\n  @class Server\n  @public\n*/\nexport default class Server {\n  /**\n   * Creates a Server\n   * @param {Object} options Server's configuration object\n   * @param {String} options.urlPrefix The base URL for the routes. Example: `http://miragejs.com`.\n   * @param {String} options.namespace The default namespace for the `Server`. Example: `/api/v1`.\n   * @param {Number} options.timing Default latency for the routes to respond to a request.\n   * @param {String} options.environment Defines the environment of the `Server`.\n   * @param {Boolean} options.trackRequests Pretender `trackRequests`.\n   * @param {Boolean} options.useDefaultPassthroughs True to use mirage provided passthroughs\n   * @param {Boolean} options.logging Set to true or false to explicitly specify logging behavior.\n   * @param {Function} options.seeds Called on the seed phase. Should be used to seed the database.\n   * @param {Function} options.scenarios Alias for seeds.\n   * @param {Function} options.routes Should be used to define server routes.\n   * @param {Function} options.baseConfig Alias for routes.\n   * @param {Object} options.inflector Default inflector (used for pluralization and singularization).\n   * @param {Object} options.identityManagers Database identity managers.\n   * @param {Object} options.models Server models\n   * @param {Object} options.serializers Server serializers\n   * @param {Object} options.factories Server factories\n   * @param {Object} options.pretender Pretender instance\n   */\n  constructor(options = {}) {\n    this._container = new Container();\n    this.config(options);\n\n    /**\n      Returns the Mirage Db instance.\n\n      @property db\n      @return Db\n    */\n    this.db = this.db || undefined;\n\n    /**\n      Returns the Mirage Schema (ORM) instance.\n\n      @property schema\n      @return Schema\n    */\n    this.schema = this.schema || undefined;\n\n    this.middleware = [];\n  }\n\n  // todo deprecate following\n  get namespace() {\n    return this.interceptor.namespace;\n  }\n  set namespace(value) {\n    this.interceptor.namespace = value;\n  }\n\n  // todo deprecate following\n  get urlPrefix() {\n    return this.interceptor.urlPrefix;\n  }\n  set urlPrefix(value) {\n    this.interceptor.urlPrefix = value;\n  }\n\n  // todo deprecate following\n  get timing() {\n    return this.interceptor.timing;\n  }\n  set timing(value) {\n    this.interceptor.timing = value;\n  }\n\n  // todo deprecate following\n  get passthroughChecks() {\n    return this.interceptor.passthroughChecks;\n  }\n  set passthroughChecks(value) {\n    this.interceptor.passthroughChecks = value;\n  }\n\n  config(config = {}) {\n    if (!config.interceptor) {\n      config.interceptor = new PretenderConfig();\n    }\n\n    if (this.interceptor) {\n      this.interceptor.config(config);\n    } else {\n      this.interceptor = config.interceptor;\n      this.interceptor.create(this, config);\n    }\n\n    let didOverrideConfig =\n      config.environment &&\n      this.environment &&\n      this.environment !== config.environment;\n    assert(\n      !didOverrideConfig,\n      \"You cannot modify Mirage's environment once the server is created\"\n    );\n    this.environment = config.environment || this.environment || \"development\";\n\n    if (config.routes) {\n      assert(\n        !config.baseConfig,\n        \"The routes option is an alias for the baseConfig option. You can't pass both options into your server definition.\"\n      );\n      config.baseConfig = config.routes;\n    }\n\n    if (config.seeds) {\n      assert(\n        !config.scenarios,\n        \"The seeds option is an alias for the scenarios.default option. You can't pass both options into your server definition.\"\n      );\n      config.scenarios = { default: config.seeds };\n    }\n\n    this._config = config;\n\n    /**\n      Mirage needs know the singular and plural versions of certain words for some of its APIs to work.\n\n      For example, whenever you define a model\n\n      ```js\n      createServer({\n        models: {\n          post: Model\n        }\n      })\n      ```\n\n      Mirage will pluralize the word \"post\" and use it to create a `db.posts` database collection.\n\n      To accomplish this, Mirage uses an object called an Inflector. An Inflector is an object with two methods, `singularize` and `pluralize`, that Mirage will call whenever it needs to inflect a word.\n\n      Mirage has a default inflector, so if you write\n\n      ```js\n      createServer()\n      ```\n\n      you'll be using the node [inflected](https://github.com/martinandert/inflected#readme) package. This can be customized if you have irregular words or need to change the defaults. You can wead more in [the guide on customizing inflections](/docs/advanced/customizing-inflections).\n\n      You typically should be able to make your customizations using the provided inflector. It's good to match any custom inflections your backend uses, as this will keep your Mirage code more consistent and simpler.\n\n      You can also override the inflector completely and provide your own `pluralize` and `singularize` methods:\n\n      ```js\n      createServer({\n        inflector: {\n          pluralize(word) {\n            // your logic\n          },\n          singularize(word) {\n            // your logic\n          }\n        }\n      })\n      ```\n    */\n    this.inflector = config.inflector || defaultInflector;\n    this._container.register(\"inflector\", this.inflector);\n\n    /**\n      Set to `true` or `false` to explicitly specify logging behavior.\n\n      By default, server responses are logged in non-testing environments. Logging is disabled by default in testing, so as not to clutter CI test runner output.\n\n      For example, to enable logging in tests, write the following:\n\n      ```js\n      test('I can view all users', function() {\n        server.logging = true;\n        server.create('user');\n\n        visit('/users');\n        // ...\n      });\n      ```\n\n      You can also write a custom log message using the [Pretender server's `handledRequest` hook](https://github.com/pretenderjs/pretender#handled-requests). (You can access the pretender server from your Mirage server via `server.pretender`.)\n\n      To override,\n\n      ```js\n      createServer({\n        routes() {\n          this.pretender.handledRequest = function(verb, path, request) {\n            let { responseText } = request;\n            // log request and response data\n          }\n        }\n      })\n      ```\n\n      @property logging\n      @return {Boolean}\n      @public\n    */\n    this.logging = config.logging !== undefined ? this.logging : undefined;\n\n    this.testConfig = this.testConfig || undefined;\n\n    this.trackRequests = config.trackRequests;\n\n    if (this.db) {\n      this.db.registerIdentityManagers(config.identityManagers);\n    } else {\n      this.db = this._container.create(\n        \"Db\",\n        undefined,\n        config.identityManagers\n      );\n    }\n\n    if (this.schema) {\n      this.schema.registerModels(config.models);\n      this.serializerOrRegistry.registerSerializers(config.serializers || {});\n    } else {\n      this.schema = this._container.create(\"Schema\", this.db, config.models);\n      this.serializerOrRegistry = this._container.create(\n        \"SerializerRegistry\",\n        this.schema,\n        config.serializers\n      );\n    }\n\n    let hasFactories = this._hasModulesOfType(config, \"factories\");\n    let hasDefaultScenario =\n      config.scenarios &&\n      Object.prototype.hasOwnProperty.call(config.scenarios, \"default\");\n\n    if (config.baseConfig) {\n      this.loadConfig(config.baseConfig);\n    }\n\n    if (this.isTest()) {\n      this.loadConfig(config.testConfig);\n\n      if (typeof window !== \"undefined\") {\n        window.server = this; // TODO: Better way to inject server into test env\n      }\n    }\n\n    if (this.isTest() && hasFactories) {\n      this.loadFactories(config.factories);\n    } else if (!this.isTest() && hasDefaultScenario) {\n      this.loadFactories(config.factories);\n      config.scenarios.default(this);\n    } else {\n      this.loadFixtures();\n    }\n\n    this.interceptor.start?.();\n  }\n\n  /**\n   * Determines if the current environment is the testing environment.\n   *\n   * @method isTest\n   * @return {Boolean} True if the environment is 'test', false otherwise.\n   * @public\n   * @hide\n   */\n  isTest() {\n    return this.environment === \"test\";\n  }\n\n  /**\n    Determines if the server should log.\n\n    @method shouldLog\n    @return The value of this.logging if defined, or false if in the testing environment,\n    true otherwise.\n    @public\n    @hide\n  */\n  shouldLog() {\n    return typeof this.logging !== \"undefined\" ? this.logging : !this.isTest();\n  }\n\n  /**\n   * Load the configuration given, setting timing to 0 if in the test\n   * environment.\n   *\n   * @method loadConfig\n   * @param {Object} config The configuration to load.\n   * @public\n   * @hide\n   */\n  loadConfig(config) {\n    config?.call(this);\n    this.timing = this.isTest() ? 0 : this.timing || 0;\n  }\n\n  // TODO deprecate this in favor of direct call\n  passthrough(...paths) {\n    this.interceptor.passthrough?.(...paths);\n  }\n\n  /**\n    By default, `fixtures` will be loaded during testing if you don't have factories defined, and during development if you don't have `seeds` defined. You can use `loadFixtures()` to also load fixture files in either of these environments, in addition to using factories to seed your database.\n\n    `server.loadFixtures()` loads all the files, and `server.loadFixtures(file1, file2...)` loads selective fixture files.\n\n    For example, in a test you may want to start out with all your fixture data loaded:\n\n    ```js\n    test('I can view the photos', function() {\n      server.loadFixtures();\n      server.createList('photo', 10);\n\n      visit('/');\n\n      andThen(() => {\n        equal( find('img').length, 10 );\n      });\n    });\n    ```\n\n    or in development, you may want to load a few reference fixture files, and use factories to define the rest of your data:\n\n    ```js\n    createServer({\n      ...,\n      seeds(server) {\n        server.loadFixtures('countries', 'states');\n\n        let author = server.create('author');\n        server.createList('post', 10, {author_id: author.id});\n      }\n    })\n    ```\n\n    @method loadFixtures\n    @param {String} [...args] The name of the fixture to load.\n    @public\n  */\n  loadFixtures(...args) {\n    let { fixtures } = this._config;\n\n    if (args.length) {\n      let camelizedArgs = args.map(camelize);\n\n      let missingKeys = camelizedArgs.filter((key) => !fixtures[key]);\n      if (missingKeys.length) {\n        throw new Error(`Fixtures not found: ${missingKeys.join(\", \")}`);\n      }\n\n      fixtures = pick(fixtures, ...camelizedArgs);\n    }\n\n    this.db.loadData(fixtures);\n  }\n\n  /*\n    Factory methods\n  */\n\n  /**\n   * Load factories into Mirage's database.\n   *\n   * @method loadFactories\n   * @param {Object} factoryMap\n   * @public\n   * @hide\n   */\n  loadFactories(factoryMap = {}) {\n    // Store a reference to the factories\n    let currentFactoryMap = this._factoryMap || {};\n    this._factoryMap = assign(currentFactoryMap, factoryMap);\n\n    // Create a collection for each factory\n    Object.keys(factoryMap).forEach((type) => {\n      let collectionName = this.schema.toCollectionName(type);\n      this.db.createCollection(collectionName);\n    });\n  }\n\n  /**\n   * Get the factory for a given type.\n   *\n   * @method factoryFor\n   * @param {String} type\n   * @private\n   * @hide\n   */\n  factoryFor(type) {\n    let camelizedType = camelize(type);\n\n    if (this._factoryMap && this._factoryMap[camelizedType]) {\n      return this._factoryMap[camelizedType];\n    }\n  }\n\n  build(type, ...traitsAndOverrides) {\n    let traits = traitsAndOverrides.filter(\n      (arg) => arg && typeof arg === \"string\"\n    );\n    let overrides = find(traitsAndOverrides, (arg) => isPlainObject(arg));\n    let camelizedType = camelize(type);\n\n    // Store sequence for factory type as instance variable\n    this.factorySequences = this.factorySequences || {};\n    this.factorySequences[camelizedType] =\n      this.factorySequences[camelizedType] + 1 || 0;\n\n    let OriginalFactory = this.factoryFor(type);\n    if (OriginalFactory) {\n      OriginalFactory = OriginalFactory.extend({});\n      let attrs = OriginalFactory.attrs || {};\n      this._validateTraits(traits, OriginalFactory, type);\n      let mergedExtensions = this._mergeExtensions(attrs, traits, overrides);\n      this._mapAssociationsFromAttributes(type, attrs, overrides);\n      this._mapAssociationsFromAttributes(type, mergedExtensions);\n\n      let Factory = OriginalFactory.extend(mergedExtensions);\n      let factory = new Factory();\n\n      let sequence = this.factorySequences[camelizedType];\n      return factory.build(sequence);\n    } else {\n      return overrides;\n    }\n  }\n\n  buildList(type, amount, ...traitsAndOverrides) {\n    assert(\n      isInteger(amount),\n      `second argument has to be an integer, you passed: ${typeof amount}`\n    );\n\n    let list = [];\n\n    const buildArgs = [type, ...traitsAndOverrides];\n    for (let i = 0; i < amount; i++) {\n      list.push(this.build.apply(this, buildArgs));\n    }\n\n    return list;\n  }\n\n  /**\n    Generates a single model of type *type*, inserts it into the database (giving it an id), and returns the data that was\n    added.\n\n    ```js\n    test(\"I can view a contact's details\", function() {\n      let contact = server.create('contact');\n\n      visit('/contacts/' + contact.id);\n\n      andThen(() => {\n        equal( find('h1').text(), 'The contact is Link');\n      });\n    });\n    ```\n\n    You can override the attributes from the factory definition with a\n    hash passed in as the second parameter. For example, if we had this factory\n\n    ```js\n    export default Factory.extend({\n      name: 'Link'\n    });\n    ```\n\n    we could override the name like this:\n\n    ```js\n    test(\"I can view the contacts\", function() {\n      server.create('contact', {name: 'Zelda'});\n\n      visit('/');\n\n      andThen(() => {\n        equal( find('p').text(), 'Zelda' );\n      });\n    });\n    ```\n\n    @method create\n    @param type the singularized type of the model\n    @param traitsAndOverrides\n    @public\n  */\n  create(type, ...options) {\n    assert(\n      this._modelOrFactoryExistsForType(type),\n      `You called server.create('${type}') but no model or factory was found. Make sure you're passing in the singularized version of the model or factory name.`\n    );\n\n    // When there is a Model defined, we should return an instance\n    // of it instead of returning the bare attributes.\n    let traits = options.filter((arg) => arg && typeof arg === \"string\");\n    let overrides = find(options, (arg) => isPlainObject(arg));\n    let collectionFromCreateList = find(\n      options,\n      (arg) => arg && Array.isArray(arg)\n    );\n\n    let attrs = this.build(type, ...traits, overrides);\n    let modelOrRecord;\n\n    if (this.schema && this.schema[this.schema.toCollectionName(type)]) {\n      let modelClass = this.schema[this.schema.toCollectionName(type)];\n\n      modelOrRecord = modelClass.create(attrs);\n    } else {\n      let collection, collectionName;\n\n      if (collectionFromCreateList) {\n        collection = collectionFromCreateList;\n      } else {\n        collectionName = this.schema\n          ? this.schema.toInternalCollectionName(type)\n          : `_${this.inflector.pluralize(type)}`;\n        collection = this.db[collectionName];\n      }\n\n      assert(\n        collection,\n        `You called server.create('${type}') but no model or factory was found.`\n      );\n      modelOrRecord = collection.insert(attrs);\n    }\n\n    let OriginalFactory = this.factoryFor(type);\n    if (OriginalFactory) {\n      OriginalFactory.extractAfterCreateCallbacks({ traits }).forEach(\n        (afterCreate) => {\n          afterCreate(modelOrRecord, this);\n        }\n      );\n    }\n\n    return modelOrRecord;\n  }\n\n  /**\n    Creates *amount* models of type *type*, optionally overriding the attributes from the factory with *attrs*.\n\n    Returns the array of records that were added to the database.\n\n    Here's an example from a test:\n\n    ```js\n    test(\"I can view the contacts\", function() {\n      server.createList('contact', 5);\n      let youngContacts = server.createList('contact', 5, {age: 15});\n\n      visit('/');\n\n      andThen(function() {\n        equal(currentRouteName(), 'index');\n        equal( find('p').length, 10 );\n      });\n    });\n    ```\n\n    And one from setting up your development database:\n\n    ```js\n    createServer({\n      seeds(server) {\n        let contact = server.create('contact')\n\n        server.createList('address', 5, { contact })\n      }\n    })\n    ```\n\n    @method createList\n    @param type\n    @param amount\n    @param traitsAndOverrides\n    @public\n  */\n  createList(type, amount, ...traitsAndOverrides) {\n    assert(\n      this._modelOrFactoryExistsForType(type),\n      `You called server.createList('${type}') but no model or factory was found. Make sure you're passing in the singularized version of the model or factory name.`\n    );\n    assert(\n      isInteger(amount),\n      `second argument has to be an integer, you passed: ${typeof amount}`\n    );\n\n    let list = [];\n    let collectionName = this.schema\n      ? this.schema.toInternalCollectionName(type)\n      : `_${this.inflector.pluralize(type)}`;\n    let collection = this.db[collectionName];\n\n    const createArguments = [type, ...traitsAndOverrides, collection];\n\n    for (let i = 0; i < amount; i++) {\n      list.push(this.create.apply(this, createArguments));\n    }\n\n    return list;\n  }\n\n  /**\n    Shutdown the server and stop intercepting network requests.\n\n    @method shutdown\n    @public\n  */\n  shutdown() {\n    if (typeof window !== \"undefined\") {\n      this.interceptor.shutdown();\n    }\n\n    if (typeof window !== \"undefined\" && this.environment === \"test\") {\n      window.server = undefined;\n    }\n  }\n\n  resource(resourceName, { only, except, path } = {}) {\n    resourceName = this.inflector.pluralize(resourceName);\n    path = path || `/${resourceName}`;\n    only = only || [];\n    except = except || [];\n\n    if (only.length > 0 && except.length > 0) {\n      throw \"cannot use both :only and :except options\";\n    }\n\n    let actionsMethodsAndsPathsMappings = {\n      index: { methods: [\"get\"], path: `${path}` },\n      show: { methods: [\"get\"], path: `${path}/:id` },\n      create: { methods: [\"post\"], path: `${path}` },\n      update: { methods: [\"put\", \"patch\"], path: `${path}/:id` },\n      delete: { methods: [\"del\"], path: `${path}/:id` },\n    };\n\n    let allActions = Object.keys(actionsMethodsAndsPathsMappings);\n    let actions =\n      (only.length > 0 && only) ||\n      (except.length > 0 &&\n        allActions.filter((action) => except.indexOf(action) === -1)) ||\n      allActions;\n\n    actions.forEach((action) => {\n      let methodsWithPath = actionsMethodsAndsPathsMappings[action];\n\n      methodsWithPath.methods.forEach((method) => {\n        return path === resourceName\n          ? this[method](methodsWithPath.path)\n          : this[method](methodsWithPath.path, resourceName);\n      });\n    });\n  }\n\n  _serialize(body) {\n    if (typeof body === \"string\") {\n      return body;\n    } else {\n      return JSON.stringify(body);\n    }\n  }\n\n  registerRouteHandler(\n    verb,\n    path,\n    rawHandler,\n    customizedCode,\n    options,\n    middleware = this.middleware\n  ) {\n    let routeHandler = this._container.create(\"RouteHandler\", {\n      schema: this.schema,\n      verb,\n      rawHandler,\n      customizedCode,\n      options,\n      path,\n      serializerOrRegistry: this.serializerOrRegistry,\n      middleware,\n    });\n\n    return (request) => {\n      return routeHandler.handle(request).then((mirageResponse) => {\n        let [code, headers, response] = mirageResponse;\n\n        return [code, headers, this._serialize(response)];\n      });\n    };\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _hasModulesOfType(modules, type) {\n    let modulesOfType = modules[type];\n    return modulesOfType ? Object.keys(modulesOfType).length > 0 : false;\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _typeIsPluralForModel(typeOrCollectionName) {\n    if (typeof isPluralForModelCache[typeOrCollectionName] !== \"boolean\") {\n      let modelOrFactoryExists =\n        this._modelOrFactoryExistsForTypeOrCollectionName(typeOrCollectionName);\n      let isPlural =\n        typeOrCollectionName === this.inflector.pluralize(typeOrCollectionName);\n      let isUncountable =\n        this.inflector.singularize(typeOrCollectionName) ===\n        this.inflector.pluralize(typeOrCollectionName);\n\n      const isPluralForModel =\n        isPlural && !isUncountable && modelOrFactoryExists;\n\n      isPluralForModelCache[typeOrCollectionName] = isPluralForModel;\n    }\n\n    return isPluralForModelCache[typeOrCollectionName];\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _modelOrFactoryExistsForType(type) {\n    let modelExists = this.schema && this.schema.modelFor(camelize(type));\n    let dbCollectionExists =\n      this.db[this.schema.toInternalCollectionName(type)];\n\n    return (\n      (modelExists || dbCollectionExists) && !this._typeIsPluralForModel(type)\n    );\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _modelOrFactoryExistsForTypeOrCollectionName(typeOrCollectionName) {\n    let modelExists =\n      this.schema && this.schema.modelFor(camelize(typeOrCollectionName));\n    let dbCollectionExists =\n      this.db[this.schema.toInternalCollectionName(typeOrCollectionName)];\n\n    return modelExists || dbCollectionExists;\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _validateTraits(traits, factory, type) {\n    traits.forEach((traitName) => {\n      if (!factory.isTrait(traitName)) {\n        throw new Error(\n          `'${traitName}' trait is not registered in '${type}' factory`\n        );\n      }\n    });\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _mergeExtensions(attrs, traits, overrides) {\n    let allExtensions = traits.map((traitName) => {\n      return attrs[traitName].extension;\n    });\n    allExtensions.push(overrides || {});\n    return allExtensions.reduce((accum, extension) => {\n      return assign(accum, extension);\n    }, {});\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _mapAssociationsFromAttributes(modelName, attributes, overrides = {}) {\n    Object.keys(attributes || {})\n      .filter((attr) => {\n        return isAssociation(attributes[attr]);\n      })\n      .forEach((attr) => {\n        let modelClass = this.schema.modelClassFor(modelName);\n        let association = modelClass.associationFor(attr);\n\n        assert(\n          association && association instanceof BelongsTo,\n          `You're using the \\`association\\` factory helper on the '${attr}' attribute of your ${modelName} factory, but that attribute is not a \\`belongsTo\\` association.`\n        );\n\n        let isSelfReferentialBelongsTo =\n          association &&\n          association instanceof BelongsTo &&\n          association.modelName === modelName;\n\n        assert(\n          !isSelfReferentialBelongsTo,\n          `You're using the association() helper on your ${modelName} factory for ${attr}, which is a belongsTo self-referential relationship. You can't do this as it will lead to infinite recursion. You can move the helper inside of a trait and use it selectively.`\n        );\n\n        let isPolymorphic =\n          association && association.opts && association.opts.polymorphic;\n\n        assert(\n          !isPolymorphic,\n          `You're using the association() helper on your ${modelName} factory for ${attr}, which is a polymorphic relationship. This is not currently supported.`\n        );\n\n        let factoryAssociation = attributes[attr];\n        let foreignKey = `${camelize(attr)}Id`;\n        if (!overrides[attr]) {\n          attributes[foreignKey] = this.create(\n            association.modelName,\n            ...factoryAssociation.traitsAndOverrides\n          ).id;\n        }\n        delete attributes[attr];\n      });\n  }\n}\n", "import Serializer from \"../serializer\";\nimport { underscore, dasherize, camelize } from \"../utils/inflector\";\n\nexport default Serializer.extend({\n  serializeIds: \"always\",\n  normalizeIds: true,\n\n  keyForModel(type) {\n    return underscore(type);\n  },\n\n  keyForAttribute(attr) {\n    attr = Serializer.prototype.keyForAttribute.apply(this, arguments);\n    return underscore(attr);\n  },\n\n  keyForRelationship(type) {\n    return this._container.inflector.pluralize(underscore(type));\n  },\n\n  keyForEmbeddedRelationship(attributeName) {\n    return underscore(attributeName);\n  },\n\n  keyForRelationshipIds(type) {\n    return `${underscore(this._container.inflector.singularize(type))}_ids`;\n  },\n\n  keyForForeignKey(relationshipName) {\n    return `${underscore(relationshipName)}_id`;\n  },\n\n  keyForPolymorphicForeignKeyId(relationshipName) {\n    return `${underscore(relationshipName)}_id`;\n  },\n\n  keyForPolymorphicForeignKeyType(relationshipName) {\n    return `${underscore(relationshipName)}_type`;\n  },\n\n  normalize(payload) {\n    let type = Object.keys(payload)[0];\n    let attrs = payload[type];\n    let modelName = camelize(type);\n    let modelClass = this.schema.modelClassFor(modelName);\n    let { belongsToAssociations, hasManyAssociations } = modelClass;\n    let belongsToKeys = Object.keys(belongsToAssociations);\n    let hasManyKeys = Object.keys(hasManyAssociations);\n\n    if (this.primaryKey !== \"id\") {\n      attrs.id = attrs[this.primaryKey];\n      delete attrs[this.primaryKey];\n    }\n\n    let jsonApiPayload = {\n      data: {\n        type: this._container.inflector.pluralize(type),\n        attributes: {},\n      },\n    };\n    if (attrs.id) {\n      jsonApiPayload.data.id = attrs.id;\n    }\n\n    let relationships = {};\n\n    Object.keys(attrs).forEach((key) => {\n      if (key !== \"id\") {\n        if (this.normalizeIds) {\n          if (belongsToKeys.includes(key)) {\n            let association = belongsToAssociations[key];\n            let associationModel = association.modelName;\n            relationships[dasherize(key)] = {\n              data: {\n                type: associationModel,\n                id: attrs[key],\n              },\n            };\n          } else if (hasManyKeys.includes(key)) {\n            let association = hasManyAssociations[key];\n            let associationModel = association.modelName;\n            let data = attrs[key].map((id) => {\n              return {\n                type: associationModel,\n                id,\n              };\n            });\n            relationships[dasherize(key)] = { data };\n          } else {\n            jsonApiPayload.data.attributes[dasherize(key)] = attrs[key];\n          }\n        } else {\n          jsonApiPayload.data.attributes[dasherize(key)] = attrs[key];\n        }\n      }\n    });\n    if (Object.keys(relationships).length) {\n      jsonApiPayload.data.relationships = relationships;\n    }\n\n    return jsonApiPayload;\n  },\n\n  getCoalescedIds(request) {\n    return request.queryParams && request.queryParams.ids;\n  },\n});\n", "import ActiveModelSerializer from \"./active-model-serializer\";\nimport { camelize } from \"../utils/inflector\";\n\nexport default ActiveModelSerializer.extend({\n  serializeIds: \"always\",\n\n  keyForModel(type) {\n    return camelize(type);\n  },\n\n  keyForAttribute(attr) {\n    attr = ActiveModelSerializer.prototype.keyForAttribute.apply(\n      this,\n      arguments\n    );\n    return camelize(attr);\n  },\n\n  keyForRelationship(type) {\n    return camelize(this._container.inflector.pluralize(type));\n  },\n\n  keyForEmbeddedRelationship(attributeName) {\n    return camelize(attributeName);\n  },\n\n  keyForRelationshipIds(type) {\n    return camelize(this._container.inflector.pluralize(type));\n  },\n\n  keyForForeignKey(relationshipName) {\n    return camelize(this._container.inflector.singularize(relationshipName));\n  },\n\n  getCoalescedIds(request) {\n    return request.queryParams && request.queryParams.ids;\n  },\n});\n", "/**\n  UUID generator\n\n  @hide\n*/\nexport default function () {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    let r = (Math.random() * 16) | 0;\n    let v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n", "import Factory from \"./factory\";\nimport IdentityManager from \"./identity-manager\";\nimport association from \"./association\";\nimport trait from \"./trait\";\nimport Response from \"./response\";\nimport Server, { createServer } from \"./server\";\nimport Model from \"./orm/model\";\nimport Collection from \"./orm/collection\";\nimport Serializer from \"./serializer\";\nimport ActiveModelSerializer from \"./serializers/active-model-serializer\";\nimport JSONAPISerializer from \"./serializers/json-api-serializer\";\nimport RestSerializer from \"./serializers/rest-serializer\";\nimport HasMany from \"./orm/associations/has-many\";\nimport BelongsTo from \"./orm/associations/belongs-to\";\n\n/*\n  These are solely for ember-cli-mirage, a \"privileged consumer\", and should be\n  removed once those import paths are dropped.\n*/\nimport _assert from \"./assert\";\nimport _DbCollection from \"./db-collection\";\nimport _Db from \"./db\";\nimport _RouteHandler from \"./route-handler\";\nimport _SerializerRegistry from \"./serializer-registry\";\nimport _ormAssociationsAssociation from \"./orm/associations/association\";\nimport _ormAssociationsBelongsTo from \"./orm/associations/belongs-to\";\nimport _ormAssociationsHasMany from \"./orm/associations/has-many\";\nimport _ormPolymorphicCollection from \"./orm/polymorphic-collection\";\nimport _ormSchema from \"./orm/schema\";\nimport _routeHandlersShorthandsBase from \"./route-handlers/shorthands/base\";\nimport _routeHandlersShorthandsDelete from \"./route-handlers/shorthands/delete\";\nimport _routeHandlersShorthandsGet from \"./route-handlers/shorthands/get\";\nimport _routeHandlersShorthandsHead from \"./route-handlers/shorthands/head\";\nimport _routeHandlersShorthandsPost from \"./route-handlers/shorthands/post\";\nimport _routeHandlersShorthandsPut from \"./route-handlers/shorthands/put\";\nimport _routeHandlersBase from \"./route-handlers/base\";\nimport _routeHandlersFunction from \"./route-handlers/function\";\nimport _routeHandlersObject from \"./route-handlers/object\";\nimport _utilsExtend from \"./utils/extend\";\nimport {\n  camelize as _utilsInflectorCamelize,\n  dasherize as _utilsInflectorDasherize,\n  underscore as _utilsInflectorUnderscore,\n  capitalize as _utilsInflectorCapitalize,\n} from \"./utils/inflector\";\nimport _utilsIsAssociation from \"./utils/is-association\";\nimport _utilsReferenceSort from \"./utils/reference-sort\";\nimport _utilsUuid from \"./utils/uuid\";\n\nimport PretenderInterceptor from \"./mock-server/pretender-config\";\n\n/**\n  @hide\n*/\nfunction hasMany(...args) {\n  return new HasMany(...args);\n}\n\n/**\n  @hide\n*/\nfunction belongsTo(...args) {\n  return new BelongsTo(...args);\n}\n\nexport {\n  association,\n  trait,\n  Model,\n  Collection,\n  Serializer,\n  ActiveModelSerializer,\n  JSONAPISerializer,\n  RestSerializer,\n  hasMany,\n  belongsTo,\n  createServer,\n  Server,\n  Factory,\n  IdentityManager,\n  Response,\n  _assert,\n  _DbCollection,\n  _Db,\n  _RouteHandler,\n  _SerializerRegistry,\n  _ormAssociationsAssociation,\n  _ormAssociationsBelongsTo,\n  _ormAssociationsHasMany,\n  _ormPolymorphicCollection,\n  _ormSchema,\n  _routeHandlersShorthandsBase,\n  _routeHandlersShorthandsDelete,\n  _routeHandlersShorthandsGet,\n  _routeHandlersShorthandsHead,\n  _routeHandlersShorthandsPost,\n  _routeHandlersShorthandsPut,\n  _routeHandlersBase,\n  _routeHandlersFunction,\n  _routeHandlersObject,\n  _utilsExtend,\n  _utilsInflectorCamelize,\n  _utilsInflectorDasherize,\n  _utilsInflectorUnderscore,\n  _utilsInflectorCapitalize,\n  _utilsIsAssociation,\n  _utilsReferenceSort,\n  _utilsUuid,\n  PretenderInterceptor,\n};\n\nexport default {\n  Factory,\n  Response,\n  hasMany,\n  belongsTo,\n};\n"],
  "mappings": "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,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAM,KAAK;AAAA,EAClE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAM,KAAK;AAAA,EAAM,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACnE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAO,KAAK;AAAA,EAAM,KAAK;AAAA,EAC1D,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAM,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAClE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAK,KAAK;AAAA,EACf,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EACjE,KAAK;AAAA,EAAM,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KAAK;AAAA,EAAK,KA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",
  "names": ["uniq", "lowerFirst", "cloneDeep", "invokeMap", "index", "isFunc", "compact", "index", "hasOwnProperty", "has", "values", "forIn", "index", "index", "pick", "index", "hasOwnProperty", "assign", "isInteger", "Inflector", "values", "rules", "regex", "match", "Transliterator", "const", "map", "Target", "Matcher", "match", "let", "State", "this", "child", "RecognizeResults", "regex", "RouteRecognizer", "add", "isEmpty", "isArray", "i", "index", "parse", "match", "index", "toString", "stringify", "Registry", "Hosts", "resolve", "i", "dispatchEvent", "createHandler", "send", "abort", "getResponseHeader", "getAllResponseHeaders", "NoopArray", "isArray", "Pretender", "edges", "nodes", "uniq", "flatten", "cursor", "length", "sorted", "Array", "visited", "i", "visit", "node", "predecessors", "indexOf", "Error", "JSON", "stringify", "outgoing", "filter", "edge", "preds", "concat", "pair", "child", "reverse", "Factory", "build", "sequence", "object", "topLevelAttrs", "Object", "assign", "attrs", "afterCreate", "keys", "forEach", "attr", "isTrait", "call", "sortAttrs", "key", "buildAttrs", "buildSingleValue", "mapValues", "value", "isArray", "map", "isPlainObject", "isFunction", "extend", "newAttrs", "Subclass", "extractAfterCreateCallbacks", "traits", "afterCreateCallbacks", "traitCandidates", "push", "extension", "attrName", "__isTrait__", "Temp", "obj", "refs", "property", "defineProperty", "constructor", "prototype", "get", "set", "newValue", "enumerable", "configurable", "referenceSort", "isNumber", "n", "toString", "IdentityManager", "_nextId", "_ids", "uniqueIdentifier", "nextValue", "fetch", "id", "inc", "association", "__isAssociation__", "traitsAndOverrides", "trait", "warn", "console", "Response", "code", "headers", "data", "undefined", "hasOwnProperty", "camelizeCache", "dasherizeCache", "underscoreCache", "capitalizeCache", "camelize", "word", "camelizedWord", "_camelize", "underscore", "camelized", "split", "lowerFirst", "join", "dasherize", "dasherized", "_dasherize", "underscored", "_underscore", "capitalize", "capitalized", "_capitalize", "errorProps", "assert", "bool", "text", "MirageError", "replace", "message", "stack", "tmp", "idx", "prop", "create", "Association", "modelName", "opts", "name", "ownerModelName", "schema", "isExplicitReflexive", "inverse", "isImplicitReflexive", "polymorphic", "getForeignKey", "identifierCache", "BelongsTo", "identifier", "foreignKey", "ModelClass", "modelPrototype", "associationHash", "belongsToAssociations", "belongsToAssociationFks", "addDependentAssociation", "associationKeys", "add", "associationIdKeys", "_tempAssociations", "tempParent", "isPolymorphic", "type", "toCollectionName", "find", "foreignKeyId", "model", "hasInverseFor", "inverseFor", "associate", "parent", "save", "reload", "owner", "fk", "dependents", "where", "potentialOwner", "models", "dependent", "disassociate", "duplicate", "DbCollection", "initialData", "_records", "identityManager", "insert", "_insertRecord", "ids", "records", "_findRecords", "Boolean", "record", "_findRecord", "query", "_findRecordBy", "_findRecordsWhere", "attributesForCreate", "queryResult", "mergedAttributes", "createdRecord", "target", "changedRecords", "oldRecord", "_updateRecord", "isEqual", "remove", "reset", "index", "splice", "defaultQueryFunction", "every", "String", "queryFunction", "targetId", "currentId", "Db", "identityManagers", "_collections", "registerIdentityManagers", "loadData", "createCollection", "cloneDeep", "reduce", "collection", "all", "identityManagerFor", "newCollection", "recordsCopy", "method", "arguments", "collections", "c", "_identityManagers", "_container", "inflector", "singularize", "application", "Collection", "args", "invokeMap", "match", "m", "some", "f", "filteredModels", "sortedModels", "sort", "slicedModels", "slice", "PolymorphicCollection", "HasMany", "hasManyAssociations", "hasManyAssociationFks", "tempChildren", "el", "polymorphicIds", "compact", "children", "currentIds", "pathModelClassCache", "BaseRouteHandler", "fullPath", "path", "lastPath", "segment", "request", "jsonApiDoc", "params", "body", "requestBody", "parse", "serializerOrRegistry", "normalize", "json", "_getJsonApiDocForRequest", "_getIdForRequest", "attributes", "relationships", "sum", "relationshipName", "relationship", "modelClass", "modelClassFor", "associationFor", "valueForRelationship", "url", "rel", "urlEncodedParts", "a", "urlEncodedPart", "decodeURIComponent", "FunctionRouteHandler", "userFunction", "server", "response", "serializerType", "serializer", "serializerFor", "explicit", "serialize", "requestHeaders", "lowerCaseHeaders", "header", "toLowerCase", "test", "_getAttrsForFormRequest", "getModelClassFromPath", "hasModelForModelName", "_getAttrsForRequest", "ObjectRouteHandler", "BaseShorthandRouteHandler", "shorthand", "options", "handle", "handleStringShorthand", "modelClasses", "handleArrayShorthand", "GetShorthandRouteHandler", "camelizedModelName", "coalesce", "getCoalescedIds", "PostShorthandRouteHandler", "PutShorthandRouteHandler", "update", "DeleteShorthandRouteHandler", "destroy", "childTypes", "pluralize", "HeadShorthandRouteHandler", "queryParams", "DEFAULT_CODES", "put", "post", "createHandler", "verb", "rawHandler", "middleware", "handler", "FunctionHandler", "ObjectHandler", "GetShorthandHandler", "PostShorthandHandler", "PutShorthandHandler", "DeleteShorthandHandler", "HeadShorthandHandler", "RouteHandler", "customizedCode", "_getMirageResponseForRequest", "then", "mirageResponse", "serializedMirageResponse", "toRackResponse", "result", "setRequest", "handleWithMiddleware", "_", "req", "e", "_toMirageResponse", "current", "remaining", "Promise", "resolve", "reject", "_getCodeForResponse", "protoProps", "staticProps", "Child", "has", "Model", "fks", "_schema", "_validateAttr", "_setupAttr", "_setupRelationship", "toInternalCollectionName", "isNew", "db", "_definePlainAttribute", "isSaving", "_saveAssociations", "val", "isSaved", "_disassociateFromDependents", "hasDbRecord", "hasId", "collectionName", "associationsFor", "associations", "_explicitInverseFor", "_implicitInverseFor", "_checkForMultipleExplicitInverses", "candidate", "matchingPolymorphic", "matchingInverse", "candidateInverse", "matchingExplicitInverses", "modelMatches", "inverseKeyMatches", "values", "candidateIsImplicitInverse", "candidateIsExplicitInverse", "candidateMatches", "associatedModelOrCollection", "includes", "alreadyAssociatedWith", "found", "isAssociation", "existingProperty", "getOwnPropertyDescriptor", "isFk", "_validateForeignKeyExistsInDatabase", "isNull", "isCollection", "isArrayOfModels", "item", "endsWith", "isModelOrCollection", "modelOrCollection", "foreignKeyName", "foreignKeys", "foreignKeyLabel", "_saveBelongsToAssociations", "_saveHasManyAssociations", "_disassociateFromOldInverses", "_saveNewAssociates", "_associateWithNewInverses", "_disassociateFromHasManyInverses", "_disassociateFromBelongsToInverse", "tempAssociation", "associateIds", "associateId", "_updateInDb", "dependentAssociationsFor", "disassociateAllDependentsFromTarget", "tempAssociate", "__isSavingNewChildren", "equals", "_syncTempAssociations", "fkValue", "_associateModelWithInverse", "inverseFk", "ownerId", "newId", "inverseCollection", "currentIdsForInverse", "newIdsForInverse", "idLabel", "findBelongsToAssociation", "associationType", "Serializer", "registry", "include", "root", "embed", "_embedFn", "serializeIds", "primaryKey", "primaryResource", "buildPayload", "toInclude", "didSerialize", "isEmpty", "getHashForPrimaryResource", "resourceHash", "newIncludes", "newDidSerialize", "nextIncludedResource", "shift", "getHashForIncludedResource", "newToInclude", "resource", "newJson", "mergePayloads", "getHashForResource", "hash", "addToIncludes", "hashWithRoot", "rootKey", "keyForResource", "newModels", "keyForRelationship", "removeForeignKeys", "lookupSerializer", "isModel", "_hashForModel", "modelSerializer", "uniqBy", "getKeysForIncluded", "resourceHashKey", "keyForModel", "keyForCollection", "_attrsForModel", "getKeysForEmbedded", "associatedResource", "associatedResourceHash", "formattedKey", "keyForEmbeddedRelationship", "_maybeAddAssociationIds", "memo", "_formatAttributeKeys", "newHash", "keyForRelationshipIds", "formattedTypeKey", "keyForPolymorphicForeignKeyType", "formattedIdKey", "keyForPolymorphicForeignKeyId", "keyForForeignKey", "keyForAttribute", "keyForId", "attributeName", "getAssociationKeys", "k", "formattedAttrs", "formattedValue", "valueForId", "JSONAPISerializer", "alwaysIncludeLinkageData", "_createRequestedIncludesGraph", "getAddToIncludesForResource", "included", "hasQueryParamIncludes", "getResourceObjectForModel", "relationshipPaths", "getQueryParamIncludes", "getAddToIncludesForResourceAndPaths", "relationshipNames", "getIncludesForResourceAndPath", "names", "nameForCurrentResource", "modelsToAdd", "typeKeyForModel", "_maybeAddRelationshipsToResourceObjectForModel", "relationshipKey", "relationshipHash", "hasLinksForRelationship", "links", "shouldIncludeLinkageData", "_relationshipIsIncludedForModel", "graph", "_includesGraph", "graphKey", "_graphKeyForModel", "graphResource", "primaryResourceKey", "_addPrimaryModelToRequestedIncludesGraph", "trim", "includesPath", "relationshipKeys", "graphRelationshipKey", "normalizedRelationshipKey", "hasAssociation", "relationshipData", "_addResourceToRequestedIncludesGraph", "_addModelToRequestedIncludesGraph", "resourceKey", "_addResourceRelationshipsToRequestedIncludesGraph", "SerializerRegistry", "serializerMap", "_serializerMap", "payload", "_isModelOrCollection", "_isCollection", "SerializerForResponse", "JsonApiSerializer", "_isModel", "newSerializerMaps", "currentSerializerMap", "collectionNameCache", "internalCollectionNameCache", "modelNameCache", "Schema", "modelsMap", "_registry", "_dependentAssociations", "registerModels", "forIn", "registerModel", "Set", "dependentAssociations", "fksAddedFromThisModel", "associationProperty", "toModelName", "setSchema", "getForeignKeyArray", "fkHolder", "_addForeignKeyToRegistry", "addMethodsToModelClass", "findBy", "findOrCreateBy", "none", "first", "_instantiateModel", "collectionForType", "_hydrate", "directDependents", "polymorphicAssociations", "modelFor", "internalCollectionName", "_modelFor", "_foreignKeysFor", "classes", "defaultInflector", "Container", "className", "Class", "defaultContainer", "defaultPassthroughs", "defaultRouteOptions", "timing", "isOption", "option", "allOptions", "optionKeys", "extractRouteArguments", "lastArg", "t", "PretenderConfig", "mirageServer", "config", "pretender", "_create", "passthroughChecks", "alias", "registerRouteHandler", "_getFullPath", "useDefaultPassthroughs", "_configureDefaultPassthroughs", "didOverridePretenderConfig", "trackRequests", "urlPrefix", "namespace", "passthroughUrl", "passthrough", "window", "Pretender", "passthroughRequest", "shouldLog", "log", "toUpperCase", "handledRequest", "groupCollapsed", "status", "responseText", "loggedRequest", "loggedResponse", "groupEnd", "originalCheckPassthrough", "checkPassthrough", "shouldPassthrough", "passthroughCheck", "substr", "apply", "unhandledRequest", "decodeURI", "namespaceError", "paths", "verbs", "pop", "substring", "namespaceSub", "shutdown", "isPluralForModelCache", "createServer", "Server", "interceptor", "didOverrideConfig", "environment", "routes", "baseConfig", "seeds", "scenarios", "_config", "register", "logging", "testConfig", "registerSerializers", "serializers", "hasFactories", "_hasModulesOfType", "hasDefaultScenario", "loadConfig", "isTest", "loadFactories", "factories", "loadFixtures", "start", "fixtures", "camelizedArgs", "missingKeys", "pick", "factoryMap", "currentFactoryMap", "_factoryMap", "camelizedType", "arg", "overrides", "factorySequences", "OriginalFactory", "factoryFor", "_validateTraits", "mergedExtensions", "_mergeExtensions", "_mapAssociationsFromAttributes", "factory", "amount", "isInteger", "list", "buildArgs", "_modelOrFactoryExistsForType", "collectionFromCreateList", "modelOrRecord", "createArguments", "resourceName", "only", "except", "actionsMethodsAndsPathsMappings", "methods", "show", "allActions", "actions", "action", "methodsWithPath", "routeHandler", "_serialize", "modules", "modulesOfType", "typeOrCollectionName", "modelOrFactoryExists", "_modelOrFactoryExistsForTypeOrCollectionName", "isPlural", "isUncountable", "isPluralForModel", "modelExists", "dbCollectionExists", "_typeIsPluralForModel", "traitName", "allExtensions", "accum", "isSelfReferentialBelongsTo", "factoryAssociation", "normalizeIds", "belongsToKeys", "hasManyKeys", "jsonApiPayload", "associationModel", "ActiveModelSerializer", "r", "Math", "random", "v", "hasMany", "belongsTo"]
}
